{"version":3,"sources":["store/constants/user.constants.js","store/constants/game.constant.js","store/actions/user.action.js","store/actions/game.action.js","adminPanel/Home.js","adminPanel/Dashboard.js","adminPanel/Settings.js","adminPanel/Users.js","adminPanel/Countries.js","adminPanel/States.js","adminPanel/Vendor.js","adminPanel/Device.js","adminPanel/Roles.js","adminPanel/RolesEntity.js","adminPanel/Organization.js","adminPanel/CategoriesType.js","adminPanel/Config.js","adminPanel/DeviceLog.js","adminPanel/JobLog.js","adminPanel/JobMaster.js","adminPanel/OrgDevices.js","adminPanel/Reports.js","adminPanel/RoleDetails.js","adminPanel/UserRolesMapping.js","components/Header.js","components/SideBar.js","components/Footer.js","components/AdminContent.js","adminPanel/Login.js","container/AdminContainer.js","store/reducers/initialDefaultState.js","store/reducers/user.reducer.js","store/reducers/game.reducer.js","store/configureStore.js","container/index.js","index.js"],"names":["userConstants","USERLOGIN_REQUEST","USERLOGIN_SUCCESS","USERLOGIN_FAILURE","STORE_CURRENT_USER","STORE_CURRENT_USER_SETTINGS","GET_CURRENT_USER_FROM_STORE","UPDATE_TAB_DATA","UPDATE_TAB_PERMISSION","gameConstants","updateTabNavigation","tabSettings","type","createNewGame","gameData","data","label","x","y","axes","primary","position","Home","props","onClickTab","tabName","TabName","state","isLoading","isPopupOpen","actionType","userCount","vendorCount","deviceCount","organizationCount","localStorage","getItem","this","loadDashboard","loadRoleDetails","setState","request","get","process","set","r","response","body","success","dashboardData","ResponsePacket","length","arr","rows","alert","loginId","updateTabPermissions","tabPermissions","tabNames","className","onClick","bind","style","fontSize","href","data-toggle","id","height","width","value","isEmpty","title","data-card-widget","Component","connect","userReducer","dispatch","Dashboard","paddingTop","map","val","indx","color","Settings","onTextChange","e","target","showAlert","msg","confirmAlert","message","buttons","closeOnCllickOutside","closeOnEscape","gameName","username","password","newPassword","confirmPassword","validator","SimpleReactValidator","autoForceUpdate","apiBase","post","send","active","spinner","fontWeight","htmlFor","onChange","disabled","updateAdminPassword","gameList","gameReducer","bindActionCreators","Users","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onBtStartEditing","key","char","pinned","setFocusedCell","startEditingCell","rowIndex","colKey","rowPinned","keyPress","charPress","clearState","selectedRow","isDeleted","hideMessages","handleChange","selectedRoleCard","console","log","onEditorStateChange","editorState","description","draftToMarkdown","convertToRaw","getCurrentContent","onUserRoleChange","newValue","actionMeta","action","selectedUserRole","roleId","onSalutationChange","salutations","onSelectionChanged","selectedRows","getSelectedRows","selectedSequence","modules","AllModules","columnDefs","field","headerName","maxWidth","cellStyle","defaultColDef","flex","minWidth","sortable","resizable","autoHeight","filter","getRowHeight","Math","floor","rowSelection","paginationPageSize","rowData","organisation","userRoleList","recentlyCreatedOrgUserId","confirm_password","usersFirstName","usersLastName","email","age","phone","website","addressId","salutation","SalutationList","onCreateUser","onAddEditUser","onDeleteUser","onEditUserName","loadUsers","loadUserRoles","allValid","showMessages","random","name","organisationId","closeOnClickOutside","patch","roleName","find","deleteUser","del","event","gameBoard","URL","createObjectURL","files","purgeFields","display","marginTop","enableCellTextSelection","pagination","onRowDoubleClicked","rowDeselection","isClearable","onInputChange","handleInputChange","options","getOptionLabel","option","getOptionValue","padding","Countries","onCheckboxChange","checked","handleSequenceNumber","countryList","valueGetter","param","countryStatus","countryName","phoneCode","flag","onCreateCountry","onAddEditCountry","onDeleteCountry","onEditCountry","loadContries","deleteCountry","for","playerList","States","onCountryChange","selectedCountry","countryId","stateList","stateStatus","stateName","onCreateState","onAddEditState","onDeleteState","onEditState","loadStates","deleteState","Vendors","clearVendor","onEditorVendorChange","editorVendor","vendorList","vendorStatus","vendorName","onCreateVendor","onAddEditVendor","onDeleteVendor","onEditVendor","loadVendors","vendorCode","vendorDescription","vendorWeb","deleteVendor","vendor","Devices","onVendorChange","selectedVendor","vendorId","deviceStatus","deviceType","deviceDescription","deviceModel","onCreateDevice","onAddEditDevice","onDeleteDevice","onEditDevice","loadDevices","deleteDevice","Roles","clearRole","onEditorRoleChange","editorRole","roleStatus","roleOrgId","onCreateRole","onAddEditRole","onDeleteRole","onEditRole","loadRoles","roleDescription","deleteRole","role","roleList","RoleEntity","clearEntity","onEditorEntityChange","editorEntity","entityList","userEntityList","selectedUserEntity","entityName","entityStatus","onCreateEntity","onAddEditEntity","onDeleteEntity","onEditEntity","loadRoleEntity","entityDescription","deleteEntity","entity","Organization","clearOrganization","onEditorOrganizationChange","editorOrganization","orgStatus","userOrganizationList","selectedUserOrganization","orgName","orgCode","orgDescription","orgType","entityExport","orgEmail","onCreateOrganization","onAddEditOrganization","onDeleteOrganization","onEditOrganization","loadOrganizations","orgEmai","deleteOrganization","CategoriesType","clearCategoriesType","onEditorCategoriesTypeChange","editorCategoriesType","typeStatus","typeName","typeValue","typeDescription","typeOrder","typeDefault","onCreateCategoriesType","onAddEditCategoriesType","onDeleteCategoriesType","onEditCategoriesType","loadCategoriesType","deleteCategoriesType","Config","clearConfig","onEditorConfigChange","editorConfig","onChangeOrg","selectedOrg","orgId","configStatus","orgList","configName","configValue","onCreateConfig","onAddEditConfig","onDeleteConfig","onEditConfig","loadConfig","loadOrganization","deleteConfig","DeviceLog","clearDeviceLog","onEditorDeviceLogChange","editorDeviceLog","onChangeOrgDevice","selectedOrgDevice","orgDeviceId","deviceId","logDateTime","logMessage","logMessageType","logType","orgDeviceList","onCreateDeviceLog","onAddEditDeviceLog","onDeleteDeviceLog","onEditDeviceLog","loadDeviceLog","loadOrgDevices","deviceCode","deleteDeviceLog","JobLog","clearJobLog","onEditorJobLogChange","editorJobLog","onChangeJobMaster","selectedJobId","jobId","jobLogDateTime","jobLogMessage","jobMasterList","onCreateJobLog","onAddEditJobLog","onDeleteJobLog","onEditJobLog","loadJobLog","loadJobMaster","jobName","deleteJobLog","JobMaster","clearJobMaster","onEditorJobMasterChange","editorJobMaster","jobSchedule","jobType","jobConfig","onCreateJobMaster","onAddEditJobMaster","onDeleteJobMaster","onEditJobMaster","deleteJobMaster","OrgDevices","clearOrgDevice","onEditorOrgDeviceChange","editorOrgDevice","onChangeDevice","selectedDeviceId","deviceLocation","deviceIP","deviceCredentials","deviceConnectionType","deviceList","onCreateOrgDevice","onAddEditOrgDevice","onDeleteOrgDevice","onEditOrgDevice","deleteOrgDevice","orgDevice","Reports","clearReport","handleChangeUsers","selectedUser","userId","onEditorReportChange","editorReport","reportName","reportConfig","onCreateReport","onAddEditReport","onDeleteReport","onEditReport","loadReports","userList","deleteReport","report","RoleDetails","roleEntityObj","objIndex","roleEntityId","entityRead","entityAdd","entityUpdate","entityPrint","entityDelete","onEditRoleDetail","onCreateRoleDetail","roleDetailList","editorRoleDetail","selectedRoleEntity","roleEntityList","readOnly","onlabel","offlabel","size","roleDetail","UserRolesMapping","clearUserRolesMapping","handleChangeRoles","selectedRole","handleChangeOrg","onEditorUserRolesMappingChange","editorUserRolesMapping","UserRolesMappingList","onCreateUserRolesMapping","onAddEditUserRolesMapping","onDeleteUserRolesMapping","onEditUserRolesMapping","loadUserRolesMapping","deleteUserRolesMapping","Header","logout","setItem","window","location","reload","currentUserFromStore","data-widget","aria-haspopup","aria-expanded","aria-labelledby","src","alt","data-slide","opacity","currentUser","gameDataFromStore","SideBar","data-accordion","Footer","AdminContent","renderPage","Vendor","Device","RolesEntity","Login","loginWithTeam","token","history","push","placeholder","onLoginClick","storeCurrentUser","AdminContainer","JSON","parse","initialDefaultState","Response","AppUserID","VendorID","UserTypeID","Email","UserType","Name","ProfileImage","CustomerID","OutletID","OutletName","DeviceToken","VehicleRegNumber","IsFirstTime","IsActivated","Status","Message","currentUserSetings","SettingID","Currency","DeliveryCharges","IsGST","GSTPercentage","IsLanguage2","Language2","initialState","currentUserSettings","teamList","gamePlayers","Players","isMeJoined","gameMoves","Moves","gameChats","Chats","numberOfPlayers","playerNames","gameSecret","isPlayerLoggedIn","currentUserPlayerID","currentUserCredentials","currentGameID","currentGameName","currentGameSetupData","currentMainTab","defaultRoleCards","DefaultRoleCards","defaultRoleNames","DefaultRoleNames","notificationsFromStore","players","result","i","isJoined","isLogin","credentials","OldArr","Plrs","playerID","plDT","playerData","tabData","notificationData","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunk","store","App","exact","path","render","to","pattern","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f2aa8363.chunk.js","sourcesContent":["export const userConstants = {\n\n    USERLOGIN_REQUEST: 'USERLOGIN_REQUEST',\n    USERLOGIN_SUCCESS: 'USERLOGIN_SUCCESS',\n    USERLOGIN_FAILURE: 'USERLOGIN_FAILURE',\n\n    STORE_CURRENT_USER: 'STORE_CURRENT_USER',\n    STORE_CURRENT_USER_SETTINGS: 'STORE_CURRENT_USER_SETTINGS',\n\n    GET_CURRENT_USER_FROM_STORE: 'GET_CURRENT_USER_FROM_STORE',\n\n    UPDATE_TAB_DATA: 'UPDATE_TAB_DATA',\n\n    UPDATE_TAB_PERMISSION: 'UPDATE_TAB_PERMISSION'\n\n}\n","export const gameConstants = {\n    PLAYER_LOGIN: 'PLAYER_LOGIN',\n\n    STORE_CURRENT_GAME_DETAILS: 'STORE_CURRENT_GAME_DETAILS',\n    STORE_CURRENT_PLAYER_CREDENTIALS: 'STORE_CURRENT_PLAYER_CREDENTIALS',\n\n    CREATE_NEW_GAME: 'CREATE_NEW_GAME',\n\n    UPDATE_CURRENT_PLAYER_ID: 'UPDATE_CURRENT_PLAYER_ID',\n\n    REMOVE_CURRENT_PLAYER_ID: 'REMOVE_CURRENT_PLAYER_ID',\n\n    SET_TAB_TO_STORE: 'SET_TAB_TO_STORE',\n\n    SET_GAME_PLAYER: 'SET_GAME_PLAYER',\n\n    SET_NOTIFICATION_TO_STORE: 'SET_NOTIFICATION_TO_STORE'\n}\n","import { userConstants } from '../constants'\nimport { userService } from '../services'\n\n// export function UserLogin(tdata) {\n//     return dispatch => {\n//         // dispatch(loaderActions.showLoader());\n//         dispatch(request())\n//         userService.UserLogin(tdata)\n//             .then(\n//                 data => {                 \n//                     dispatch(success(data))\n//                 },\n//                 error => {\n//                     dispatch(failure(error))\n//                 }\n//             )\n//     }\n//     function request() { return { type: userConstants.USERLOGIN_REQUEST } }\n//     function success(data) { return { type: userConstants.USERLOGIN_SUCCESS, data } }\n//     function failure(error) { return { type: userConstants.USERLOGIN_FAILURE, error } }\n// }\n\nexport const currentUser = (user) => {\n    return {\n        type: userConstants.CURRENT_USER,\n        user: user,\n    }\n}\n\nexport const storeCurrentUser = (currentUser) => {\n    debugger\n    return {\n        type: userConstants.STORE_CURRENT_USER,\n        currentUser: currentUser,\n    }\n}\n\nexport const storeCurrentUserSettings = (currentUserSettings) => {\n    return {\n        type: userConstants.STORE_CURRENT_USER_SETTINGS,\n        currentUserSettings: currentUserSettings,\n    }\n}\n\n\n\n\nexport const getCurrentUserFromStore = (currentUser) => {\n    return {\n        type: userConstants.GET_CURRENT_USER_FROM_STORE,\n        currentUser: currentUser,\n    }\n}\n\nexport const updateTabNavigation = (tabSettings) => {\n    return {\n        type: userConstants.UPDATE_TAB_DATA,\n        tabSettings: tabSettings,\n    }\n}\n\nexport const updateTabPermissions = (TabPermissions) => {\n    debugger\n    return {\n        type: userConstants.UPDATE_TAB_PERMISSION,\n        tabPermissions: TabPermissions,\n    }\n}\n\n\n\n\n","import { gameConstants } from '../constants'\n\n\nexport const playerLogin = (islogin) => {\n    return {\n        type: gameConstants.PLAYER_LOGIN,\n        isLogin: islogin,\n    }\n}\n\n\nexport const createNewGame = (gameData) => {\n    return {\n        type: gameConstants.CREATE_NEW_GAME,\n        gameData: gameData,\n    }\n}\n\nexport const updateCurrentPlayerID = (playerid) => {\n    return {\n        type: gameConstants.UPDATE_CURRENT_PLAYER_ID,\n        playerID: playerid,\n    }\n}\n\nexport const removeCurrentPlayerID = (playerid) => {\n    return {\n        type: gameConstants.REMOVE_CURRENT_PLAYER_ID,\n        playerID: playerid,\n    }\n}\n\nexport const storeCurrentGameDetails = (gameData) => {\n    return {\n        type: gameConstants.STORE_CURRENT_GAME_DETAILS,\n        gameData: gameData,\n    }\n}\n\nexport const storeCurrentPlayerCredentials = (credentials) => {\n    return {\n        type: gameConstants.STORE_CURRENT_PLAYER_CREDENTIALS,\n        credentials: credentials,\n    }\n}\n\nexport const setTabToStore = (data) => {\n    return {\n        type: gameConstants.SET_TAB_TO_STORE,\n        tabData: data,\n    }\n}\n\nexport const setGamePlayerToStore = (data) => {\n    return {\n        type: gameConstants.SET_GAME_PLAYER,\n        playerData: data,\n    }\n}\n\nexport const setNotificationToStore = (data) => {\n    return {\n        type: gameConstants.SET_NOTIFICATION_TO_STORE,\n        notificationData: data,\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation, updateTabPermissions } from '../store/actions'\nimport { Chart } from 'react-charts'\nimport DonutChart from 'react-donut-chart';\n\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nconst data = [\n    {\n        label: 'Series 1',\n        data: [{ x: 1, y: 10 }, { x: 2, y: 20 }, { x: 3, y: 30 }]\n    },\n    {\n        label: 'Series 2',\n        data: [{ x: 1, y: 20 }, { x: 2, y: 40 }, { x: 3, y: 70 }]\n    },\n    {\n        label: 'Series 3',\n        data: [{ x: 1, y: 10 }, { x: 2, y: 50 }, { x: 3, y: 800 }]\n    }\n]\n\nconst axes = [\n    { primary: true, type: 'linear', position: 'bottom' },\n    { type: 'linear', position: 'left' }\n]\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n\n            isPopupOpen: false,\n            actionType: null,\n\n            userCount: 0,\n            vendorCount: 0,\n            deviceCount: 0,\n            organizationCount: 0,\n\n\n        }\n\n    }\n\n    componentDidMount() {\n        const loginId = localStorage.getItem('admin_access_token')\n        if (loginId) {\n            this.loadDashboard()\n            this.loadRoleDetails()\n        }\n    }\n\n    async loadDashboard() {\n        this.setState({\n            isLoading: true\n        })\n        debugger\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'dashboard')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    dashboardData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n\n                    if (response.ResponsePacket.length == 4) {\n                        let arr = response.ResponsePacket\n                        this.setState({\n                            userCount: arr[0].rows,\n                            vendorCount: arr[1].rows,\n                            deviceCount: arr[2].rows,\n                            organizationCount: arr[3].rows\n                        })\n                    }\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async loadRoleDetails() {\n        const { tabSettings } = this.props\n        const loginId = localStorage.getItem('LoginId')\n        this.setState({\n            isLoading: true\n        })\n\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roledetails/id/' + loginId)\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.props.updateTabPermissions({ tabPermissions: response.ResponsePacket })\n                this.setState({\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabNames } = this.props\n        return (\n            <div className=\"card\">\n                <div className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-2\">\n                            <div className=\"col-sm-6\">\n                                <h1 className=\"m-0 text-dark\">Dashboard</h1>\n                            </div>\n                            <div className=\"col-sm-6\">\n                                {/* <ol className=\"breadcrumb float-sm-right\">\n                                    <li className=\"breadcrumb-item\"><a href=\"#\">Home</a></li>\n                                    <li className=\"breadcrumb-item active\">Dashboard v1</li>\n                                </ol> */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-3 col-6\">\n                                <div className=\"small-box bg-info\">\n                                    <div className=\"inner\">\n                                        <h3>{this.state.userCount}</h3>\n                                        <p>Users</p>\n                                    </div>\n                                    <div className=\"icon\">\n                                        <i className=\"ion ion-person\"></i>\n                                    </div>\n                                    <a onClick={this.onClickTab.bind(this, tabNames[1])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-3 col-6\">\n                                <div className=\"small-box bg-info\">\n                                    <div className=\"inner\">\n                                        <h3>{this.state.vendorCount}<sup style={{ fontSize: '20px' }}></sup></h3>\n                                        <p>Vendors</p>\n                                    </div>\n                                    <div className=\"icon\">\n                                        <i className=\"ion ion-person\"></i>\n                                    </div>\n                                    <a onClick={this.onClickTab.bind(this, tabNames[4])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-3 col-6\">\n                                <div className=\"small-box bg-info\">\n                                    <div className=\"inner\">\n                                        <h3>{this.state.deviceCount}</h3>\n                                        <p>Devices</p>\n                                    </div>\n                                    <div className=\"icon\">\n                                        <i className=\"ion ion-laptop\"></i>\n                                    </div>\n                                    <a onClick={this.onClickTab.bind(this, tabNames[5])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-3 col-6\">\n                                <div className=\"small-box bg-info\">\n                                    <div className=\"inner\">\n                                        <h3>{this.state.organizationCount}</h3>\n                                        <p>Organizations</p>\n                                    </div>\n                                    <div className=\"icon\">\n                                        <i className=\"ion ion-pie-graph\"></i>\n                                    </div>\n                                    <a onClick={this.onClickTab.bind(this, tabNames[8])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <section className=\"col-lg-7 connectedSortable\">\n                                <div className=\"card\">\n                                    <div className=\"card-header\">\n                                        <h3 className=\"card-title\">\n                                            <i className=\"fas fa-chart-pie mr-1\"></i>Sales</h3>\n                                        <div className=\"card-tools\">\n                                            <ul className=\"nav nav-pills ml-auto\">\n                                                <li className=\"nav-item\">\n                                                    <a className=\"nav-link active\" href=\"#revenue-chart\" data-toggle=\"tab\">Area</a>\n                                                </li>\n                                                <li className=\"nav-item\">\n                                                    <a className=\"nav-link\" href=\"#sales-chart\" data-toggle=\"tab\">Donut</a>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <div className=\"tab-content p-0\">\n                                            <div className=\"chart tab-pane active\" id=\"revenue-chart\" style={{ position: 'relative', height: '300px' }}>\n                                                {/* <canvas id=\"revenue-chart-canvas\" height=\"300\" style={{ height: '300px' }}></canvas> */}\n                                                <div\n                                                    style={{\n                                                        // width: '600px',\n                                                        height: '300px'\n                                                    }}\n                                                >\n                                                    <Chart data={data} axes={axes} />\n                                                </div>\n                                            </div>\n                                            <div className=\"chart tab-pane\" id=\"sales-chart\" style={{ position: 'relative', height: '300px' }}>\n                                                {/* <canvas id=\"sales-chart-canvas\" height='300' style={{ height: '300px' }}></canvas> */}\n                                                <DonutChart\n                                                    height='300'\n                                                    width='450'\n                                                    data={[{\n                                                        label: 'Give you up',\n                                                        value: 15\n                                                    },\n                                                    {\n                                                        label: '',\n                                                        value: 50,\n                                                        isEmpty: true\n                                                    }]} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"card\">\n                                    {/* <div className=\"card-header\">\n                                        <h3 className=\"card-title\">\n                                            <i className=\"ion ion-clipboard mr-1\"></i>To Do List</h3>\n                                        <div className=\"card-tools\">\n                                            <ul className=\"pagination pagination-sm\">\n                                                <li className=\"page-item\"><a href=\"#\" className=\"page-link\">&laquo;</a></li>\n                                                <li className=\"page-item\"><a href=\"#\" className=\"page-link\">1</a></li>\n                                                <li className=\"page-item\"><a href=\"#\" className=\"page-link\">2</a></li>\n                                                <li className=\"page-item\"><a href=\"#\" className=\"page-link\">3</a></li>\n                                                <li className=\"page-item\"><a href=\"#\" className=\"page-link\">&raquo;</a></li>\n                                            </ul>\n                                        </div>\n                                    </div> */}\n\n                                    {/* <div className=\"card-body\">\n                                        <ul className=\"todo-list\" data-widget=\"todo-list\">\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo1\" id=\"todoCheck1\" />\n                                                    <label for=\"todoCheck1\"></label>\n                                                </div>\n\n                                                <span className=\"text\">Design a nice theme</span>\n\n                                                <small className=\"badge badge-danger\"><i className=\"far fa-clock\"></i> 2 mins</small>\n\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo2\" id=\"todoCheck2\" checked />\n                                                    <label for=\"todoCheck2\"></label>\n                                                </div>\n                                                <span className=\"text\">Make the theme responsive</span>\n                                                <small className=\"badge badge-info\"><i className=\"far fa-clock\"></i> 4 hours</small>\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo3\" id=\"todoCheck3\" />\n                                                    <label for=\"todoCheck3\"></label>\n                                                </div>\n                                                <span className=\"text\">Let theme shine like a star</span>\n                                                <small className=\"badge badge-warning\"><i className=\"far fa-clock\"></i> 1 day</small>\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo4\" id=\"todoCheck4\" />\n                                                    <label for=\"todoCheck4\"></label>\n                                                </div>\n                                                <span className=\"text\">Let theme shine like a star</span>\n                                                <small className=\"badge badge-success\"><i className=\"far fa-clock\"></i> 3 days</small>\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo5\" id=\"todoCheck5\" />\n                                                    <label for=\"todoCheck5\"></label>\n                                                </div>\n                                                <span className=\"text\">Check your messages and notifications</span>\n                                                <small className=\"badge badge-primary\"><i className=\"far fa-clock\"></i> 1 week</small>\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <span className=\"handle\">\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                    <i className=\"fas fa-ellipsis-v\"></i>\n                                                </span>\n                                                <div className=\"icheck-primary d-inline ml-2\">\n                                                    <input type=\"checkbox\" value=\"\" name=\"todo6\" id=\"todoCheck6\" />\n                                                    <label for=\"todoCheck6\"></label>\n                                                </div>\n                                                <span className=\"text\">Let theme shine like a star</span>\n                                                <small className=\"badge badge-secondary\"><i className=\"far fa-clock\"></i> 1 month</small>\n                                                <div className=\"tools\">\n                                                    <i className=\"fas fa-edit\"></i>\n                                                    <i className=\"fas fa-trash-o\"></i>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div className=\"card-footer clearfix\">\n                                        <button type=\"button\" className=\"btn btn-info float-right\"><i className=\"fas fa-plus\"></i> Add item</button>\n                                    </div> */}\n                                </div>\n                            </section>\n                            <section className=\"col-lg-5 connectedSortable\">\n                                <div className=\"card \">\n                                    <div className=\"card-header border-0\">\n                                        <h3 className=\"card-title\">\n                                            <i className=\"fas fa-map-marker-alt mr-1\"></i>Visitors</h3>\n                                        <div className=\"card-tools\">\n                                            <button type=\"button\"\n                                                className=\"btn btn-primary btn-sm daterange\"\n                                                data-toggle=\"tooltip\"\n                                                title=\"Date range\">\n                                                <i className=\"far fa-calendar-alt\"></i>\n                                            </button>\n                                            <button type=\"button\"\n                                                className=\"btn btn-primary btn-sm\"\n                                                data-card-widget=\"collapse\"\n                                                data-toggle=\"tooltip\"\n                                                title=\"Collapse\">\n                                                <i className=\"fas fa-minus\"></i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div className=\"card-body\">\n                                        <div id=\"world-map\" style={{ height: '250px', width: '100%' }}></div>\n                                    </div>\n                                    <div className=\"card-footer bg-transparent\">\n                                        <div className=\"row\">\n                                            <div className=\"col-4 text-center\">\n                                                <div id=\"sparkline-1\"></div>\n                                                <div className=\"text-white\">Visitors</div>\n                                            </div>\n                                            <div className=\"col-4 text-center\">\n                                                <div id=\"sparkline-2\"></div>\n                                                <div className=\"text-white\">Online</div>\n                                            </div>\n                                            <div className=\"col-4 text-center\">\n                                                <div id=\"sparkline-3\"></div>\n                                                <div className=\"text-white\">Sales</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"card direct-chat direct-chat-primary\">\n                                    {/* <div className=\"card-header\">\n                                        <h3 className=\"card-title\">Direct Chat</h3>\n                                        <div className=\"card-tools\">\n                                            <span data-toggle=\"tooltip\" title=\"3 New Messages\" className=\"badge badge-primary\">3</span>\n                                            <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\n                                                <i className=\"fas fa-minus\"></i>\n                                            </button>\n                                            <button type=\"button\" className=\"btn btn-tool\" data-toggle=\"tooltip\" title=\"Contacts\"\n                                                data-widget=\"chat-pane-toggle\">\n                                                <i className=\"fas fa-comments\"></i>\n                                            </button>\n                                            <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"remove\"><i className=\"fas fa-times\"></i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div className=\"card-footer\">\n                                        <form action=\"#\" method=\"post\">\n                                            <div className=\"input-group\">\n                                                <input type=\"text\" name=\"message\" placeholder=\"Type Message ...\" className=\"form-control\" />\n                                                <span className=\"input-group-append\">\n                                                    <button type=\"button\" className=\"btn btn-primary\">Send</button>\n                                                </span>\n                                            </div>\n                                        </form>\n                                    </div> */}\n                                </div>\n                            </section>\n                        </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n    updateTabPermissions: (data) => { dispatch(updateTabPermissions(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\n\nclass Dashboard extends Component {\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabNames } = this.props\n        return (\n            <div className=\"card\" style={{ paddingTop: '20px' }}>\n                <section className=\"container-fluid \">\n                    <div className=\"row\">\n                        {\n                            tabNames.map((val, indx) => {\n                                return (\n                                    <div className=\"col-lg-2 col-6\">\n                                        <div className=\"small-box bg-info\">\n                                            <div className=\"inner\">\n                                                <h3 style={{ color: 'transparent' }}>-</h3>\n                                                <h5>{tabNames[indx]}</h5>\n                                            </div>\n                                            <div className=\"icon\">\n                                                <i className=\"ion ion-bag\"></i>\n                                            </div>\n                                            <a onClick={this.onClickTab.bind(this, tabNames[indx])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { createNewGame } from '../store/actions'\nimport { bindActionCreators } from 'redux';\nimport request from 'superagent';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameName: 'NCM',\n            username: 'admin',\n            password: '',\n            newPassword: '',\n            confirmPassword: '',\n\n            isLoading: false\n        }\n                this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    async updateAdminPassword() {\n\n        if (this.state.newPassword != this.state.confirmPassword) {\n            this.showAlert(\"New password and confirm password do not match!!\")\n            return\n        }\n        this.setState({\n            isLoading: true\n        })\n        const r = await request.post(`${this.apiBase}/updateAdmin`)\n            .send({\n                username: this.state.username,\n                password: this.state.password,\n                newPassword: this.state.newPassword\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                password: '',\n                newPassword: '',\n                confirmPassword: ''\n            }, () => {\n                this.showAlert(response.message)\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                this.showAlert(response.message)\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    showAlert = (msg) => {\n        confirmAlert({\n            title: 'Login',\n            message: msg,\n            buttons: [\n                {\n                    label: 'Ok',\n                    onClick: () => {\n                        // this.props.undo()\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n\n    render() {\n        return (\n            <LoadingOverlay active={this.state.isLoading} spinner >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body py-5\">\n                                    <div>\n                                        {/* <div className=\"text-center\">\n                                        <img className=\"profile-user-img img-fluid img-circle\"\n                                            src=\"../../dist/img/user4-128x128.jpg\"\n                                            alt=\"User profile picture\" />\n                                    </div> */}\n                                        <h1 className=\"profile-username text-center\">Change Admin Password</h1>\n                                        <br />\n                                        {/* <p className=\"text-muted text-center\">Admin</p> */}\n                                    </div>\n                                    <div className=\"row justify-content-center\" >\n                                        <div className=\"col-md-6\" >\n                                            {/* <div className=\"form-group\">\n                                            <label style={{fontWeight: 200}} htmlFor=\"Username\">Username</label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"username\" value={this.state.username} className=\"form-control\" />\n                                        </div> */}\n                                            <div className=\"form-group\">\n                                                <label style={{fontWeight: 200}} htmlFor=\"emailAddress\">Current Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"password\" value={this.state.password} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label style={{fontWeight: 200}} htmlFor=\"emailAddress\">New Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"newPassword\" value={this.state.newPassword} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label style={{fontWeight: 200}} htmlFor=\"emailAddress\">Confirm New Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"confirmPassword\" value={this.state.confirmPassword} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\" >\n                                                <button disabled={true} type=\"button\" className=\"btn btn-info float-right\" onClick={this.updateAdminPassword.bind(this)} >Submit</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return { gameList: state.gameReducer.gameList }\n}\n\nconst mapDispatchToProps = dispatch => {\n    // createNewGame: (data) => { dispatch(createNewGame(data)) },\n    return bindActionCreators({ createNewGame: createNewGame }, dispatch);\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Settings)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Users extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'id',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'username',\n                    headerName: 'Username',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'usersFirstName',\n                    headerName: 'FirstName',\n                    maxWidth: 150\n                },\n                {\n                    field: 'usersLastName',\n                    headerName: 'LastName',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'roleName',\n                    headerName: 'Roles',\n                    cellStyle: { 'white-space': 'normal' },\n                    maxWidth: 150\n                },\n                {\n                    field: 'email',\n                    headerName: 'Email Address',\n                    cellStyle: { 'white-space': 'normal' }\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            organisation: '',\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            username: \"\",\n            password: \"\",\n            confirm_password: \"\",\n            usersFirstName: \"\",\n            usersLastName: \"\",\n            email: \"\",\n            roleId: null,\n            age: \"\",\n            phone: \"\",\n            website: \"\",\n            addressId: \"\",\n            salutation: \"\",\n            salutations: null,\n            SalutationList: [{ label: 'Mr.', value: 'Mr.' }, { label: 'Mrs.', value: 'Mrs.' }]\n        }\n        this.onCreateUser = this.onCreateUser.bind(this)\n        this.onAddEditUser = this.onAddEditUser.bind(this)\n        this.onDeleteUser = this.onDeleteUser.bind(this)\n        this.onEditUserName = this.onEditUserName.bind(this)\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadUsers()\n        this.loadUserRoles()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUserRoles() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roles')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userRoleList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateUser() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n\n        const {\n            selectedUserRole,\n            username,\n            password,\n            confirm_password,\n            usersFirstName,\n            usersLastName,\n            email,\n            roleId,\n            age,\n            phone,\n            website,\n            addressId,\n            salutation,\n            salutations\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'users')\n            .send({\n                username: usersFirstName + Math.floor(Math.random() * 23434),\n                password: password,\n                confirm_password: password,\n                usersFirstName: usersFirstName,\n                usersLastName: usersLastName,\n                email: email,\n                roleId: roleId,\n                age: 20,\n                phone: phone,\n                website: website,\n                addressId: addressId,\n                salutation: salutations.value,\n                isDeleted: false\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                name: \"\",\n                organisationId: \"\",\n                description: \"\",\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditUserName() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedUserRole,\n            selectedSequence,\n            selectedRow,\n            id,\n            usersFirstName,\n            usersLastName,\n            email,\n            phone,\n            website,\n            salutation,\n            addressId,\n            password,\n            username,\n            roleId,\n            confirm_password,\n            age,\n            salutations\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'users/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                password: 'test@123',\n                confirm_password: 'test@123',\n                usersFirstName,\n                usersLastName,\n                email,\n                roleId: selectedUserRole.id,\n                age,\n                phone,\n                website,\n                addressId,\n                salutation: salutations.value,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'User',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'User',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onRowDoubleClicked(type) {\n\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditUser(type)\n        })\n    }\n\n    async onAddEditUser(type) {\n        const { selectedRow, userRoleList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update User',\n                    id: selectedRow.id,\n                    usersFirstName: selectedRow.usersFirstName,\n                    usersLastName: selectedRow.usersLastName,\n                    email: selectedRow.email,\n                    phone: selectedRow.phone,\n                    website: selectedRow.website,\n                    salutations: { label: selectedRow.salutation, value: selectedRow.salutation },\n                    addressId: selectedRow.addressId,\n                    username: selectedRow.username,\n                    roleId: selectedRow.roleId,\n                    age: selectedRow.age,\n                    selectedUserRole: { id: selectedRow.roleId, roleName: userRoleList.find(x => x.id === selectedRow.roleId).roleName }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    id: '',\n                    selectedUserRole: null,\n                    selectedSequence: null,\n                    isDeleted: false,\n                    actionType: 'Add User',\n                    usersFirstName: \"\",\n                    usersLastName: \"\",\n                    email: \"\",\n                    phone: \"\",\n                    website: \"\",\n                    salutations: null,\n                    addressId: \"\",\n                    password: \"\",\n                    username: \"\",\n                    roleId: null,\n                    confirm_password: \"\",\n                    age: 21\n                })\n            }\n        }\n    }\n\n    async onDeleteUser() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete RoleName',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.usersFirstName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteUser()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteUser() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'users/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                name: \"\",\n                description: \"\",\n                isLoading: false,\n                selectedRow: null\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onUserRoleChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            debugger\n            this.setState({\n                selectedUserRole: newValue,\n                roleId: newValue.id,\n            })\n        }\n    }\n\n    onSalutationChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                salutations: newValue,\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div className=\"row mb-2\">\n                                        <div className=\"col-sm-6\">\n                                            <h4 className=\"m-0 text-dark\">{this.state.actionType}</h4>\n                                        </div>\n                                        <div className=\"col-sm-6 float-sm-right\">\n                                            {/* <ol className=\"breadcrumb float-sm-right\"> */}\n                                            <div style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                                <button\n                                                    disabled={!this.state.selectedRow}\n                                                    type=\"button\"\n                                                    className=\"btn btn-danger float-right\"\n                                                    onClick={this.onDeleteUser}\n                                                >{'Delete Record'}</button>\n                                                <button\n                                                    disabled={!this.state.selectedRow}\n                                                    type=\"button\"\n                                                    className=\"btn btn-info float-right  mx-2\"\n                                                    onClick={this.onAddEditUser.bind(this, 'edit')}\n                                                >{'Update Record'}</button>\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-info float-right \"\n                                                    onClick={this.onAddEditUser.bind(this, 'add')}\n                                                >{'Add New'}</button>\n                                            </div>\n                                            {/* <div style={{  display: !isPopupOpen ? 'none' : 'block' }}>\n                                                    <strong className=\"text-center\">{this.state.actionType} </strong>\n                                                    <button\n                                                        type=\"button\"\n                                                        className=\"btn btn-secondary float-right mx-1\"\n                                                        onClick={() => {\n                                                            this.setState({ isPopupOpen: false }, () => {\n                                                                this.clearState()\n                                                            })\n                                                        }}\n                                                    >{'Back'}</button>\n                                                </div> */}\n                                            {/* </ol> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"row\">\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-group\">\n                                                <label style={{ fontWeight: 100 }} htmlFor=\"Salutation\">Salutation</label>\n                                                <CreatableSelect\n                                                    isClearable\n                                                    value={this.state.salutations}\n                                                    onChange={this.onSalutationChange}\n                                                    onInputChange={this.handleInputChange}\n                                                    options={this.state.SalutationList}\n                                                />\n                                                {this.validator.message('salutations', this.state.salutations, 'required', { className: 'text-danger small-font14' })}\n                                            </div>\n                                        </div>\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-group\">\n                                                <label style={{ fontWeight: 100 }} htmlFor=\"UserRole\">User Role</label>\n                                                <Select\n                                                    id={\"roles\"}\n                                                    value={this.state.selectedUserRole}\n                                                    onChange={this.onUserRoleChange}\n                                                    options={this.state.userRoleList}\n                                                    getOptionLabel={(option) => option.roleName}\n                                                    getOptionValue={(option) => option.id}\n                                                />\n                                                {this.validator.message('selectedUserRole', this.state.selectedUserRole, 'required', { className: 'text-danger small-font14' })}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 100 }} htmlFor=\"usersFirstName\">First Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"usersFirstName\" value={this.state.usersFirstName} className=\"form-control\" />\n                                        {this.validator.message('usersFirstName', this.state.usersFirstName, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 100 }} htmlFor=\"usersLastName\">Last Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"usersLastName\" value={this.state.usersLastName} className=\"form-control\" />\n                                        {this.validator.message('usersLastName', this.state.usersLastName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 100 }} htmlFor=\"email\">Email Address </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"email\" value={this.state.email} className=\"form-control\" />\n                                        {this.validator.message('email', this.state.email, 'required|email', { className: 'text-danger' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    {\n                                        this.state.actionType == 'Add User' &&\n                                        <div className=\"form-group\">\n                                            <label style={{ fontWeight: 100 }} htmlFor=\"password\">Password </label>\n                                            <input type=\"password\" onChange={this.onTextChange} id=\"password\" value={this.state.password} className=\"form-control\" />\n                                            {this.validator.message('password', this.state.password, 'required', { className: 'text-danger small-font14' })}\n                                        </div>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 100 }} htmlFor=\"phone\">Phone </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"phone\" value={this.state.phone} className=\"form-control\" />\n                                        {this.validator.message('phone', this.state.phone, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearState()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update User' ? this.onEditUserName : this.onCreateUser}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Users)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Countries extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            countryList: [],\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Country Id',\n                },\n                {\n                    field: 'countryName',\n                    headerName: 'Country Name',\n                },\n                {\n                    field: 'countryStatus',\n                    headerName: 'Country Status',\n                    valueGetter: function (param) {\n                        return param.data.countryStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.countryStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'phoneCode',\n                    headerName: 'Phone Code',\n\n                },\n                {\n                    field: 'flag',\n                    headerName: 'Flag',\n                }\n\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            countryName: \"\",\n            countryStatus: \"\",\n            phoneCode: \"\",\n            flag: \"\",\n\n        }\n        this.onCreateCountry = this.onCreateCountry.bind(this)\n        this.onAddEditCountry = this.onAddEditCountry.bind(this)\n        this.onDeleteCountry = this.onDeleteCountry.bind(this)\n        this.onEditCountry = this.onEditCountry.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadContries()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadContries() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'countries')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    countryList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.countryList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateCountry() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            countryName,\n            countryStatus,\n            phoneCode,\n            flag\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'countries')\n            .send({\n                countryName,\n                countryStatus,\n                phoneCode,\n                flag\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                countryName: '',\n                countryStatus: 0,\n                phoneCode: '',\n                flag: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditCountry() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            countryName,\n            countryStatus,\n            phoneCode,\n            flag\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'countries/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                countryName,\n                countryStatus,\n                phoneCode,\n                flag\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditCountry(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Country',\n                    id: selectedRow.id,\n                    countryName: selectedRow.countryName,\n                    countryStatus: selectedRow.countryStatus,\n                    phoneCode: selectedRow.phoneCode,\n                    flag: selectedRow.flag\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Country',\n                    id: null,\n                    countryName: '',\n                    countryStatus: '',\n                    phoneCode: '',\n                    flag: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteCountry() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Country',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.countryName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteCountry()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteCountry() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'countries/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                countryName: '',\n                countryStatus: '',\n                phoneCode: '',\n                flag: '',\n                selectedRow: null\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Country',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Country',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditCountry(type)\n        })\n    }\n\n    render() {\n        const { countryList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay active={isLoading} spinner >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteCountry}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right mx-2\"\n                                            onClick={this.onAddEditCountry.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right\"\n                                            onClick={this.onAddEditCountry.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"countryName\">Country Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"countryName\" value={this.state.countryName} className=\"form-control\" />\n                                        {this.validator.message('countryName', this.state.countryName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"countryStatus\">Country Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"countryStatus\"\n                                                value={this.state.countryStatus}\n                                                checked={this.state.countryStatus == 1 ? true : false}\n                                            />\n                                            <label className=\"custom-control-label\" for=\"countryStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"phoneCode\">Phone Code </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"phoneCode\" value={this.state.phoneCode} className=\"form-control\" />\n                                        {this.validator.message('phoneCode', this.state.phoneCode, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"flag\">Flag </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"flag\" value={this.state.flag} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right mx-1\"\n                                onClick={this.state.actionType == 'Update Country' ? this.onEditCountry : this.onCreateCountry}\n                            >{'Submit'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearState()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    countryList: state.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Countries)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass States extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            stateList: [],\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Id',\n                },\n                {\n                    field: 'countryName',\n                    headerName: 'Country',\n                },\n                {\n                    field: 'stateName',\n                    headerName: 'State Name',\n                },\n                {\n                    field: 'stateStatus',\n                    headerName: 'State Status',\n                    valueGetter: function (param) {\n                        return param.data.stateStatus == 1 ? 'Active' : 'InActive'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.stateStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            stateName: \"\",\n            stateStatus: null,\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateState = this.onCreateState.bind(this)\n        this.onAddEditState = this.onAddEditState.bind(this)\n        this.onDeleteState = this.onDeleteState.bind(this)\n        this.onEditState = this.onEditState.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadStates()\n        this.loadContries()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadStates() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'states')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    stateList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.stateList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadContries() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'countries')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    countryList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateState() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            stateName,\n            stateStatus,\n            countryId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'states')\n            .send({\n                stateName,\n                stateStatus,\n                countryId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                stateName: '',\n                stateStatus: null,\n                countryId: null,\n                isLoading: false,\n                isPopupOpen: false,\n                selectedCountry: null\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditState() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            stateName,\n            stateStatus,\n            countryId,\n            selectedCountry\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'states/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                stateName,\n                stateStatus,\n                countryId: selectedCountry.id\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null,\n                selectedCountry: null\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditState(type) {\n        const { selectedRow, countryList } = this.state\n\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update State',\n                    id: selectedRow.id,\n                    stateName: selectedRow.stateName,\n                    stateStatus: selectedRow.stateStatus,\n                    countryId: selectedRow.countryId,\n                    selectedCountry: { id: selectedRow.countryId, countryName: countryList.find(x => x.id === selectedRow.countryId).countryName }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add State',\n                    id: null,\n                    stateName: '',\n                    stateStatus: null,\n                    countryId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteState() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete State',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.stateName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteState()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteState() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'states/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                stateName: '',\n                stateStatus: null,\n                countryId: null,\n                selectedRow: null\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        debugger\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n                countryId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditState(type)\n        })\n    }\n\n    render() {\n        const { stateList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteState}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditState.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditState.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"Country\">Country</label>\n                                        <Select\n                                            // className=\"form-control\"\n                                            id={\"country\"}\n                                            value={this.state.selectedCountry}\n                                            onChange={this.onCountryChange}\n                                            options={this.state.countryList}\n                                            getOptionLabel={(option) => option.countryName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedCountry', this.state.selectedCountry, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"stateStatus\">State Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"stateStatus\"\n                                                // value={this.state.stateStatus}\n                                                checked={this.state.stateStatus == 1 ? true : false} />\n                                            <label className=\"custom-control-label\" htmlFor=\"stateStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"stateName\">State Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"stateName\" value={this.state.stateName} className=\"form-control\" />\n                                        {this.validator.message('stateName', this.state.stateName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearState()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update State' ? this.onEditState : this.onCreateState}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    stateList: state.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(States)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Vendors extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Vendor Id',\n                },\n                {\n                    field: 'vendorCode',\n                    headerName: 'Vendor Code',\n                },\n                {\n                    field: 'vendorName',\n                    headerName: 'Vendor Name',\n                },\n                {\n                    field: 'vendorStatus',\n                    headerName: 'Vendor Status',\n                    valueGetter: function (param) {\n                        return param.data.vendorStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.vendorStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'vendorWeb',\n                    headerName: 'Vendor Web',\n                },\n                {\n                    field: 'vendorDescription',\n                    headerName: 'Vendor Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorVendor: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            vendorName: \"\",\n            vendorStatus: \"\",\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateVendor = this.onCreateVendor.bind(this)\n        this.onAddEditVendor = this.onAddEditVendor.bind(this)\n        this.onDeleteVendor = this.onDeleteVendor.bind(this)\n        this.onEditVendor = this.onEditVendor.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadVendors()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadVendors() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'vendors')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    vendorList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.vendorList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateVendor() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            vendorCode,\n            vendorName,\n            vendorDescription,\n            vendorWeb,\n            vendorStatus\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'vendors')\n            .send({\n                vendorCode,\n                vendorName,\n                vendorDescription,\n                vendorWeb,\n                vendorStatus\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                vendorCode: '',\n                vendorName: '',\n                vendorDescription: '',\n                vendorWeb: '',\n                vendorStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditVendor() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            vendorCode,\n            vendorName,\n            vendorDescription,\n            vendorWeb,\n            vendorStatus\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'vendors/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                vendorCode,\n                vendorName,\n                vendorDescription,\n                vendorWeb,\n                vendorStatus\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearVendor = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditVendor(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Vendor',\n                    id: selectedRow.id,\n                    vendorCode: selectedRow.vendorCode,\n                    vendorName: selectedRow.vendorName,\n                    vendorDescription: selectedRow.vendorDescription,\n                    vendorWeb: selectedRow.vendorDescription,\n                    vendorStatus: selectedRow.vendorDescription\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Vendor',\n                    id: null,\n                    vendorCode: '',\n                    vendorName: '',\n                    vendorDescription: '',\n                    vendorWeb: '',\n                    vendorStatus: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteVendor() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Vendor',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.vendorName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteVendor()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteVendor() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'vendors/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                vendorName: '',\n                vendorStatus: '',\n                countryId: null,\n                selectedRow: null\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendor',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendor',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorVendorChange = (editorVendor) => {\n        this.setState({\n            editorVendor,\n            description: editorVendor && draftToMarkdown(convertToRaw(editorVendor.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditVendor(type)\n        })\n    }\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteVendor}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditVendor.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditVendor.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearVendor()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"vendorCode\">Vendor Code </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"vendorCode\" value={this.state.vendorCode} className=\"form-control\" />\n                                        {this.validator.message('vendorCode', this.state.vendorCode, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"vendorName\">Vendor Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"vendorName\" value={this.state.vendorName} className=\"form-control\" />\n                                        {this.validator.message('vendorName', this.state.vendorName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"vendorWeb\">Vendor Web </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"vendorWeb\" value={this.state.vendorWeb} className=\"form-control\" />\n                                        {this.validator.message('vendorWeb', this.state.vendorWeb, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        {/* <input type=\"text\" onChange={this.onTextChange} id=\"vendorStatus\" value={this.state.vendorStatus} className=\"form-control\" /> */}\n                                        <div className=\"form-group\">\n                                            <label style={{ fontWeight: 200 }} htmlFor=\"vendorStatus\">Vendor Status </label>\n                                            <div className=\"custom-control custom-switch\">\n                                                <input type=\"checkbox\" className=\"custom-control-input\"\n                                                    onChange={this.onCheckboxChange} id=\"vendorStatus\"\n                                                    value={this.state.vendorStatus}\n                                                    checked={this.state.vendorStatus == 1 ? true : false}\n                                                />\n                                                <label className=\"custom-control-label\" for=\"vendorStatus\"></label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label style={{ fontWeight: 200 }} htmlFor=\"vendorDescription\">Vendor Description </label>\n                                <textarea onChange={this.onTextChange} id=\"vendorDescription\" value={this.state.vendorDescription} className=\"form-control\" />\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearVendor()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Vendor' ? this.onEditVendor : this.onCreateVendor}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapVendorToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapVendorToProps,\n    mapDispatchToProps\n)(Vendors)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Devices extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Device Id',\n                },\n                {\n                    field: 'vendorName',\n                    headerName: 'Vendor',\n                },\n                {\n                    field: 'deviceType',\n                    headerName: 'Device Type',\n                },\n                {\n                    field: 'deviceModel',\n                    headerName: 'Device Model',\n                },\n                {\n                    field: 'deviceStatus',\n                    headerName: 'Device Status',\n                    valueGetter: function (param) {\n                        return param.data.deviceStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.deviceStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'deviceDescription',\n                    headerName: 'Device Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            isPopupOpen: false,\n            actionType: null,\n\n            deviceType: \"\",\n            vendorId: null,\n            deviceDescription: \"\",\n            deviceModel: \"\",\n            deviceStatus: \"\",\n\n            selectedVendor: null,\n            vendorList: []\n\n        }\n        this.onCreateDevice = this.onCreateDevice.bind(this)\n        this.onAddEditDevice = this.onAddEditDevice.bind(this)\n        this.onDeleteDevice = this.onDeleteDevice.bind(this)\n        this.onEditDevice = this.onEditDevice.bind(this)\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadDevices()\n        this.loadVendors()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadVendors() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'vendors')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    vendorList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateDevice() {\n\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n\n        debugger\n\n        const {\n            deviceType,\n            vendorId,\n            deviceDescription,\n            deviceModel,\n            deviceStatus,\n            selectedVendor\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'devices')\n            .send({\n                deviceType,\n                deviceDescription,\n                deviceModel,\n                deviceStatus,\n                vendorId: selectedVendor.id\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                deviceType: '',\n                deviceDescription: '',\n                deviceModel: '',\n                deviceStatus: '',\n                vendorId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditDevice() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            deviceType,\n            deviceDescription,\n            deviceModel,\n            deviceStatus,\n            vendorId,\n            selectedVendor\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'devices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                deviceType,\n                deviceDescription,\n                deviceModel,\n                deviceStatus,\n                vendorId: selectedVendor.id\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditDevice(type) {\n        const { selectedRow, vendorList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Device',\n                    id: selectedRow.id,\n                    deviceType: selectedRow.deviceType,\n                    deviceDescription: selectedRow.deviceDescription,\n                    deviceModel: selectedRow.deviceModel,\n                    deviceStatus: selectedRow.deviceStatus,\n                    vendorId: selectedRow.vendorId,\n                    selectedVendor: { id: selectedRow.vendorId, vendorName: vendorList.find(x => x.id === selectedRow.vendorId).vendorName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Device',\n                    id: null,\n                    deviceType: '',\n                    deviceDescription: '',\n                    deviceModel: '',\n                    deviceStatus: '',\n                    vendorId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteDevice() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Device',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.deviceType + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteDevice()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteDevice() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'devices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                deviceType: '',\n                deviceDescription: '',\n                deviceModel: '',\n                deviceStatus: '',\n                vendorId: null,\n                selectedRow: null\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onVendorChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedVendor: newValue,\n                vendorId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditDevice(type)\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteDevice}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditDevice.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditDevice.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"Vendor\">Vendor</label>\n                                        <Select\n                                            id={\"country\"}\n                                            value={this.state.selectedVendor}\n                                            onChange={this.onVendorChange}\n                                            options={vendorList}\n                                            getOptionLabel={(option) => option.vendorName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedVendor', this.state.selectedVendor, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceType\">Device Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceType\" value={this.state.deviceType} className=\"form-control\" />\n                                        {this.validator.message('deviceType', this.state.deviceType, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceModel\">Device Model </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceModel\" value={this.state.deviceModel} className=\"form-control\" />\n                                        {this.validator.message('deviceModel', this.state.deviceModel, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <div className=\"form-group\">\n                                            <label style={{ fontWeight: 200 }} htmlFor=\"deviceStatus\">Device Status </label>\n                                            <div className=\"custom-control custom-switch\">\n                                                <input type=\"checkbox\" className=\"custom-control-input\"\n                                                    onChange={this.onCheckboxChange} id=\"deviceStatus\"\n                                                    value={this.state.deviceStatus}\n                                                    checked={this.state.deviceStatus == 1 ? true : false}\n                                                />\n                                                <label className=\"custom-control-label\" for=\"deviceStatus\"></label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label style={{ fontWeight: 200 }} htmlFor=\"deviceDescription\">Device Description </label>\n                                <textarea onChange={this.onTextChange} id=\"deviceDescription\" value={this.state.deviceDescription} className=\"form-control\" />\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearState()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Device' ? this.onEditDevice : this.onCreateDevice}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div>\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Devices)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Roles extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Role Id',\n                },\n                {\n                    field: 'roleName',\n                    headerName: 'Role Name',\n                },\n                {\n                    field: 'roleDescription',\n                    headerName: 'Role Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorRole: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            roleName: \"\",\n            roleStatus: \"\",\n            roleOrgId: 1,\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateRole = this.onCreateRole.bind(this)\n        this.onAddEditRole = this.onAddEditRole.bind(this)\n        this.onDeleteRole = this.onDeleteRole.bind(this)\n        this.onEditRole = this.onEditRole.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadRoles()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadRoles() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roles')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateRole() {\n\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            roleName,\n            roleDescription,\n            roleOrgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roles')\n            .send({\n                roleName,\n                roleDescription,\n                roleOrgId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                roleName: '',\n                roleDescription: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditRole() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            roleName,\n            roleOrgId,\n            roleDescription,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roles/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                roleName,\n                roleDescription,\n                roleOrgId\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearRole = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditRole(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Role',\n                    id: selectedRow.id,\n                    roleName: selectedRow.roleName,\n                    roleDescription: selectedRow.roleDescription,\n                    roleOrgId: selectedRow.roleOrgId\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Role',\n                    id: null,\n                    roleName: '',\n                    roleDescription: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteRole() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Role',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.roleName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteRole()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteRole() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'roles/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                roleName: '',\n                roleDescription: '',\n                selectedRow: null\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Role',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Role',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        const { selectedRow } = this.state\n        if (!selectedRow) {\n            return\n        } else {\n            this.props.updateTabNavigation({ TabName: tabName, roleId: selectedRow.id, roleName: selectedRow.roleName })\n        }\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorRoleChange = (editorRole) => {\n        this.setState({\n            editorRole,\n            description: editorRole && draftToMarkdown(convertToRaw(editorRole.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditRole(type)\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right  mx-2\"\n                                            onClick={this.onDeleteRole}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right\"\n                                            onClick={this.onClickTab.bind(this, 'RoleDetails')}\n                                        >{'Update Permissions'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditRole.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditRole.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearRole()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"roleName\">Role Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"roleName\" value={this.state.roleName} className=\"form-control\" />\n                                        {this.validator.message('roleName', this.state.roleName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"roleDescription\">Role Description </label>\n                                        <textarea onChange={this.onTextChange} id=\"roleDescription\" value={this.state.roleDescription} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearRole()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Role' ? this.onEditRole : this.onCreateRole}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapRoleToProps = role => ({\n    tabSettings: role.userReducer.tabSettings,\n    roleList: role.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapRoleToProps,\n    mapDispatchToProps\n)(Roles)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass RoleEntity extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            entityList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Entity Id',\n                },\n                {\n                    field: 'entityName',\n                    headerName: 'Entity Name',\n                },\n                {\n                    field: 'entityDescription',\n                    headerName: 'Entity Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorEntity: null,\n            userEntityList: [],\n            selectedUserEntity: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            entityName: \"\",\n            entityStatus: \"\",\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateEntity = this.onCreateEntity.bind(this)\n        this.onAddEditEntity = this.onAddEditEntity.bind(this)\n        this.onDeleteEntity = this.onDeleteEntity.bind(this)\n        this.onEditEntity = this.onEditEntity.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadRoleEntity()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadRoleEntity() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roleentities')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    entityList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.entityList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateEntity() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            entityName,\n            entityDescription,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roleentities')\n            .send({\n                entityName,\n                entityDescription,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                entityName: '',\n                entityDescription: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditEntity() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            entityName,\n            entityDescription,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roleentities/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                entityName,\n                entityDescription\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearEntity = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditEntity(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Entity',\n                    id: selectedRow.id,\n                    entityName: selectedRow.entityName,\n                    entityDescription: selectedRow.entityDescription\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Entity',\n                    id: null,\n                    entityName: '',\n                    entityDescription: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteEntity() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Entity',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.entityName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteEntity()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteEntity() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'roleentities/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                entityName: '',\n                entityDescription: '',\n                selectedRow: null\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorEntityChange = (editorEntity) => {\n        this.setState({\n            editorEntity,\n            description: editorEntity && draftToMarkdown(convertToRaw(editorEntity.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditEntity(type)\n        })\n    }\n\n    render() {\n        const { entityList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteEntity}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditEntity.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditEntity.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearEntity()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"EntityNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"entityName\">Entity Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"entityName\" value={this.state.entityName} className=\"form-control\" />\n                                        {this.validator.message('entityName', this.state.entityName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"entityDescription\">Entity Description </label>\n                                        <textarea onChange={this.onTextChange} id=\"entityDescription\" value={this.state.entityDescription} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearEntity()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Entity' ? this.onEditEntity : this.onCreateEntity}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapEntityToProps = entity => ({\n    tabSettings: entity.userReducer.tabSettings,\n    entityList: entity.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapEntityToProps,\n    mapDispatchToProps\n)(RoleEntity)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Organization extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            roleList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Organization Id',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Name',\n                },\n                {\n                    field: 'orgCode',\n                    headerName: 'Organization Code',\n                },\n                {\n                    field: 'orgEmail',\n                    headerName: 'Email',\n                },\n                {\n                    field: 'orgStatus',\n                    headerName: 'Status',\n                    valueGetter: function (param) {\n                        return param.data.orgStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.orgStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'orgType',\n                    headerName: 'Organization Type',\n                },\n                {\n                    field: 'entityExport',\n                    headerName: 'Entity Export',\n                },\n                {\n                    field: 'orgDescription',\n                    headerName: 'Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorOrganization: null,\n            userOrganizationList: [],\n            selectedUserOrganization: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            orgName: '',\n            orgCode: '',\n            orgDescription: '',\n            orgStatus: null,\n            orgType: '',\n            entityExport: '',\n            orgEmail: ''\n\n        }\n        this.onCreateOrganization = this.onCreateOrganization.bind(this)\n        this.onAddEditOrganization = this.onAddEditOrganization.bind(this)\n        this.onDeleteOrganization = this.onDeleteOrganization.bind(this)\n        this.onEditOrganization = this.onEditOrganization.bind(this)\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadOrganizations()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadOrganizations() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateOrganization() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            orgName,\n            orgCode,\n            orgDescription,\n            orgStatus,\n            orgType,\n            entityExport,\n            orgEmail\n        } = this.state\n\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'organizations')\n            .send({\n                orgName,\n                orgCode,\n                orgDescription,\n                orgStatus,\n                orgType,\n                entityExport,\n                orgEmail\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                orgName: '',\n                orgCode: '',\n                orgDescription: '',\n                orgStatus: null,\n                orgType: '',\n                entityExport: '',\n                orgEmail: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditOrganization() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            orgName,\n            orgCode,\n            orgDescription,\n            orgStatus,\n            orgType,\n            entityExport,\n            orgEmail\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'organizations/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                orgName,\n                orgCode,\n                orgDescription,\n                orgStatus,\n                orgType,\n                entityExport,\n                orgEmail\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearOrganization = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditOrganization(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Organization',\n                    id: selectedRow.id,\n                    orgName: selectedRow.orgName,\n                    orgCode: selectedRow.orgCode,\n                    orgDescription: selectedRow.orgDescription,\n                    orgStatus: selectedRow.orgStatus,\n                    orgType: selectedRow.orgType,\n                    entityExport: selectedRow.entityExport,\n                    orgEmai: selectedRow.orgEmail\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Organization',\n                    id: null,\n                    orgName: '',\n                    orgCode: '',\n                    orgDescription: '',\n                    orgStatus: null,\n                    orgType: '',\n                    entityExport: '',\n                    orgEmail: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteOrganization() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Organization',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.orgName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteOrganization()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteOrganization() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'organizations/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                orgName: '',\n                orgCode: '',\n                orgDescription: '',\n                orgStatus: null,\n                orgType: '',\n                entityExport: '',\n                orgEmail: '',\n                selectedRow: null\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organization',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organization',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorOrganizationChange = (editorOrganization) => {\n        this.setState({\n            editorOrganization,\n            description: editorOrganization && draftToMarkdown(convertToRaw(editorOrganization.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditOrganization(type)\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    render() {\n        const { roleList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteOrganization}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditOrganization.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditOrganization.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearOrganization()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"OrganizationNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgName\">Organization Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"orgName\" value={this.state.orgName} className=\"form-control\" />\n                                        {this.validator.message('orgName', this.state.orgName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgStatus\">Organization Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"orgStatus\"\n                                                value={this.state.orgStatus}\n                                                checked={this.state.orgStatus == 1 ? true : false}\n                                            />\n                                            <label className=\"custom-control-label\" for=\"orgStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgCode\">Organization Code </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"orgCode\" value={this.state.orgCode} className=\"form-control\" />\n                                        {this.validator.message('orgCode', this.state.orgCode, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgType\">Organization Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"orgType\" value={this.state.orgType} className=\"form-control\" />\n                                        {this.validator.message('orgType', this.state.orgType, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"entityExport\">Entity Export </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"entityExport\" value={this.state.entityExport} className=\"form-control\" />\n                                        {this.validator.message('entityExport', this.state.entityExport, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgEmail\">Organization Email </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"orgEmail\" value={this.state.orgEmail} className=\"form-control\" />\n                                        {this.validator.message('orgEmail', this.state.orgEmail, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label style={{ fontWeight: 200 }} htmlFor=\"orgDescription\">Organization Description </label>\n                                <textarea onChange={this.onTextChange} id=\"orgDescription\" value={this.state.orgDescription} className=\"form-control\" />\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearOrganization()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Organization' ? this.onEditOrganization : this.onCreateOrganization}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapOrganizationToProps = role => ({\n    tabSettings: role.userReducer.tabSettings,\n    roleList: role.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapOrganizationToProps,\n    mapDispatchToProps\n)(Organization)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass CategoriesType extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Type Id',\n                },\n                {\n                    field: 'typeValue',\n                    headerName: 'Type Value',\n                },\n                {\n                    field: 'typeDescription',\n                    headerName: 'Description',\n                },\n                {\n                    field: 'typeStatus',\n                    headerName: 'CategoriesType Status',\n                    valueGetter: function (param) {\n                        return param.data.typeStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.typeStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'typeOrder',\n                    headerName: 'Type Order',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorCategoriesType: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            typeName: '',\n            typeValue: '',\n            typeDescription: '',\n            typeOrder: '',\n            typeDefault: '',\n            typeStatus: '',\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateCategoriesType = this.onCreateCategoriesType.bind(this)\n        this.onAddEditCategoriesType = this.onAddEditCategoriesType.bind(this)\n        this.onDeleteCategoriesType = this.onDeleteCategoriesType.bind(this)\n        this.onEditCategoriesType = this.onEditCategoriesType.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadCategoriesType()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadCategoriesType() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'categoriestype')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateCategoriesType() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            typeName,\n            typeValue,\n            typeDescription,\n            typeOrder,\n            typeDefault,\n            typeStatus\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'categoriestype')\n            .send({\n                typeName,\n                typeValue,\n                typeDescription,\n                typeOrder,\n                typeDefault,\n                typeStatus\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                typeName: '',\n                typeValue: '',\n                typeDescription: '',\n                typeOrder: '',\n                typeDefault: '',\n                typeStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditCategoriesType() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            typeName,\n            typeValue,\n            typeDescription,\n            typeOrder,\n            typeDefault,\n            typeStatus\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'categoriestype/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                typeName,\n                typeValue,\n                typeDescription,\n                typeOrder,\n                typeDefault,\n                typeStatus\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearCategoriesType = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditCategoriesType(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update CategoriesType',\n                    id: selectedRow.id,\n                    typeName: selectedRow.typeName,\n                    typeValue: selectedRow.typeValue,\n                    typeDescription: selectedRow.typeDescription,\n                    typeOrder: selectedRow.typeOrder,\n                    typeDefault: selectedRow.typeDefault,\n                    typeStatus: selectedRow.typeStatus\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add CategoriesType',\n                    id: null,\n                    typeName: '',\n                    typeValue: '',\n                    typeDescription: '',\n                    typeOrder: '',\n                    typeDefault: '',\n                    typeStatus: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteCategoriesType() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete CategoriesType',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.vendorName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteCategoriesType()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteCategoriesType() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'categoriestype/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                typeName: '',\n                typeValue: '',\n                typeDescription: '',\n                typeOrder: '',\n                typeDefault: '',\n                typeStatus: '',\n                selectedRow: null\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorCategoriesTypeChange = (editorCategoriesType) => {\n        this.setState({\n            editorCategoriesType,\n            description: editorCategoriesType && draftToMarkdown(convertToRaw(editorCategoriesType.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditCategoriesType(type)\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteCategoriesType}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditCategoriesType.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditCategoriesType.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearCategoriesType()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeName\">Type Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"typeName\" value={this.state.typeName} className=\"form-control\" />\n                                        {this.validator.message('typeName', this.state.typeName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeValue\">Type Value </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"typeValue\" value={this.state.typeValue} className=\"form-control\" />\n                                        {this.validator.message('typeValue', this.state.typeValue, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeOrder\">Type Order </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"typeOrder\" value={this.state.typeOrder} className=\"form-control\" />\n                                        {this.validator.message('typeOrder', this.state.typeOrder, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeStatus\">Type Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"typeStatus\"\n                                                value={this.state.typeStatus}\n                                                checked={this.state.typeStatus == 1 ? true : false}\n                                            />\n                                            <label className=\"custom-control-label\" for=\"typeStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeDescription\">Type Description </label>\n                                        <textarea onChange={this.onTextChange} id=\"typeDescription\" value={this.state.typeDescription} className=\"form-control\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"typeDefault\">Type Default </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"typeDefault\" value={this.state.typeDefault} className=\"form-control\" />\n                                        {this.validator.message('typeDefault', this.state.typeDefault, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 5px 5px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearCategoriesType()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update CategoriesType' ? this.onEditCategoriesType : this.onCreateCategoriesType}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapCategoriesTypeToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapCategoriesTypeToProps,\n    mapDispatchToProps\n)(CategoriesType)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Config extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Config Id',\n                },\n                {\n                    field: 'configName',\n                    headerName: 'Config Name',\n                },\n                {\n                    field: 'configValue',\n                    headerName: 'Config Value',\n                },\n                {\n                    field: 'configStatus',\n                    headerName: 'Config Status',\n                    valueGetter: function (param) {\n                        return param.data.configStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.configStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorConfig: null,\n            orgList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            configName: '',\n            configValue: '',\n            configStatus: '',\n            orgId: null,\n            selectedOrg: null,\n\n        }\n        this.onCreateConfig = this.onCreateConfig.bind(this)\n        this.onAddEditConfig = this.onAddEditConfig.bind(this)\n        this.onDeleteConfig = this.onDeleteConfig.bind(this)\n        this.onEditConfig = this.onEditConfig.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadConfig()\n        this.loadOrganization()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadConfig() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'configs')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateConfig() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            configName,\n            configValue,\n            configStatus,\n            orgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'configs')\n            .send({\n                configName,\n                configValue,\n                configStatus,\n                orgId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                configName: '',\n                configValue: '',\n                configStatus: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditConfig() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            configName,\n            configValue,\n            configStatus,\n            orgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'configs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                configName,\n                configValue,\n                configStatus,\n                orgId\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearConfig = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditConfig(type) {\n        const { selectedRow, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Config',\n                    id: selectedRow.id,\n                    configName: selectedRow.configName,\n                    configValue: selectedRow.configValue,\n                    configStatus: selectedRow.configStatus,\n                    orgId: selectedRow.orgId,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Config',\n                    id: null,\n                    configName: '',\n                    configValue: '',\n                    configStatus: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteConfig() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Config',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.configName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteConfig()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteConfig() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'configs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                configName: '',\n                configValue: '',\n                configStatus: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorConfigChange = (editorConfig) => {\n        this.setState({\n            editorConfig,\n            description: editorConfig && draftToMarkdown(convertToRaw(editorConfig.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditConfig(type)\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteConfig}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditConfig.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditConfig.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearConfig()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"configName\">ConfigName </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"configName\" value={this.state.configName} className=\"form-control\" />\n                                        {this.validator.message('configName', this.state.configName, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"configValue\">Config Value </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"configValue\" value={this.state.configValue} className=\"form-control\" />\n                                        {this.validator.message('configValue', this.state.configValue, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgId\">Organization </label>\n                                        <Select\n                                            // className=\"form-control\"\n                                            id={\"org\"}\n                                            value={this.state.selectedOrg}\n                                            onChange={this.onChangeOrg}\n                                            options={this.state.orgList}\n                                            getOptionLabel={(option) => option.orgName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedOrg', this.state.selectedOrg, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"configStatus\">Config Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"configStatus\"\n                                                value={this.state.configStatus}\n                                                checked={this.state.configStatus == 1 ? true : false}\n                                            />\n                                            <label className=\"custom-control-label\" for=\"configStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary float-right mx-1\"\n                                    onClick={() => {\n                                        this.setState({ isPopupOpen: false }, () => {\n                                            this.clearConfig()\n                                        })\n                                    }}\n                                >{'Cancel'}</button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-info float-right  mx-1\"\n                                    onClick={this.state.actionType == 'Update Config' ? this.onEditConfig : this.onCreateConfig}\n                                >{'Submit'}</button>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapConfigToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapConfigToProps,\n    mapDispatchToProps\n)(Config)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass DeviceLog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Log Id',\n                },\n                {\n                    field: 'logDateTime',\n                    headerName: 'Log DateTime',\n                },\n                {\n                    field: 'logMessage',\n                    headerName: 'Log Message',\n                },\n                {\n                    field: 'logMessageType',\n                    headerName: 'Log Message Type',\n                },\n                {\n                    field: 'logType',\n                    headerName: 'log Type',\n                },\n                {\n                    field: 'orgDeviceId',\n                    headerName: 'Org DeviceId',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Org Id',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorDeviceLog: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            logDateTime: '',\n            logMessage: '',\n            logMessageType: '',\n            logType: '',\n            orgDeviceId: '',\n            orgId: null,\n            selectedOrg: null,\n\n            orgList: [],\n            orgDeviceList: []\n        }\n        this.onCreateDeviceLog = this.onCreateDeviceLog.bind(this)\n        this.onAddEditDeviceLog = this.onAddEditDeviceLog.bind(this)\n        this.onDeleteDeviceLog = this.onDeleteDeviceLog.bind(this)\n        this.onEditDeviceLog = this.onEditDeviceLog.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadDeviceLog()\n        this.loadOrganization()\n        this.loadOrgDevices()\n\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadDeviceLog() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devicelogs')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrgDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'orgdevices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgDeviceList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateDeviceLog() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            logDateTime,\n            logMessage,\n            logMessageType,\n            logType,\n            orgDeviceId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'devicelogs')\n            .send({\n                logDateTime,\n                logMessage,\n                logMessageType,\n                logType,\n                orgDeviceId,\n                orgId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                logDateTime: '',\n                logMessage: '',\n                logMessageType: '',\n                logType: '',\n                orgDeviceId: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditDeviceLog() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            logDateTime,\n            logMessage,\n            logMessageType,\n            logType,\n            orgDeviceId,\n            orgId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'devicelogs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                logDateTime,\n                logMessage,\n                logMessageType,\n                logType,\n                orgDeviceId,\n                orgId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearDeviceLog = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditDeviceLog(type) {\n        const { selectedRow, orgList, orgDeviceList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update DeviceLog',\n                    id: selectedRow.id,\n                    logDateTime: selectedRow.logDateTime,\n                    logMessage: selectedRow.logMessage,\n                    logMessageType: selectedRow.logMessageType,\n                    logType: selectedRow.logType,\n                    orgDeviceId: selectedRow.orgDeviceId,\n                    orgId: selectedRow.orgId,\n\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName },\n                    selectedOrgDevice: { id: selectedRow.orgDeviceId, deviceCode: orgDeviceList.find(x => x.id === selectedRow.orgDeviceId).deviceCode }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add DeviceLog',\n                    id: null,\n                    logDateTime: '',\n                    logMessage: '',\n                    logMessageType: '',\n                    logType: '',\n                    orgDeviceId: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteDeviceLog() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete DeviceLog',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.logDateTime + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteDeviceLog()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteDeviceLog() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'devicelogs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                logDateTime: '',\n                logMessage: '',\n                logMessageType: '',\n                logType: '',\n                orgDeviceId: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorDeviceLogChange = (editorDeviceLog) => {\n        this.setState({\n            editorDeviceLog,\n            description: editorDeviceLog && draftToMarkdown(convertToRaw(editorDeviceLog.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onChangeOrgDevice = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrgDevice: newValue,\n                orgDeviceId: newValue.deviceId\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditDeviceLog(type)\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteDeviceLog}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditDeviceLog.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditDeviceLog.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearDeviceLog()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"logDateTime\">Log DateTime </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"logDateTime\" value={this.state.logDateTime} className=\"form-control\" />\n                                        {this.validator.message('logDateTime', this.state.logDateTime, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"logMessageType\">Log MessageType </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"logMessageType\" value={this.state.logMessageType} className=\"form-control\" />\n                                        {this.validator.message('logMessageType', this.state.logMessageType, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"logType\">Log Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"logType\" value={this.state.logType} className=\"form-control\" />\n                                        {this.validator.message('logType', this.state.logType, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgDeviceId\">Org Device Id </label>\n                                        <Select\n                                            id={\"orgDevice\"}\n                                            value={this.state.selectedOrgDevice}\n                                            onChange={this.onChangeOrgDevice}\n                                            options={this.state.orgDeviceList}\n                                            getOptionLabel={(option) => option.deviceCode}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('orgDeviceId', this.state.orgDeviceId, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"logMessage\">Log Message </label>\n                                        <textarea onChange={this.onTextChange} id=\"logMessage\" value={this.state.logMessage} className=\"form-control\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgId\">Organization </label>\n                                        <Select\n                                            id={\"org\"}\n                                            value={this.state.selectedOrg}\n                                            onChange={this.onChangeOrg}\n                                            options={this.state.orgList}\n                                            getOptionLabel={(option) => option.orgName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedOrg', this.state.selectedOrg, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearDeviceLog()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update DeviceLog' ? this.onEditDeviceLog : this.onCreateDeviceLog}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapDeviceLogToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapDeviceLogToProps,\n    mapDispatchToProps\n)(DeviceLog)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass JobLog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'JobLog Id',\n                },\n                {\n                    field: 'jobLogDateTime',\n                    headerName: 'JobLog DateTime',\n                },\n                {\n                    field: 'jobLogMessage',\n                    headerName: 'JobLog Message',\n                },\n                {\n                    field: 'jobName',\n                    headerName: 'Job',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorJobLog: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            jobLogDateTime: '',\n            jobLogMessage: '',\n            jobId: null,\n            jobMasterList: [],\n\n            countryList: [],\n            selectedJobId: null,\n        }\n        this.onCreateJobLog = this.onCreateJobLog.bind(this)\n        this.onAddEditJobLog = this.onAddEditJobLog.bind(this)\n        this.onDeleteJobLog = this.onDeleteJobLog.bind(this)\n        this.onEditJobLog = this.onEditJobLog.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadJobLog()\n        this.loadJobMaster()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadJobLog() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'joblog')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadJobMaster() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'jobmaster')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    jobMasterList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateJobLog() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            jobLogDateTime,\n            jobLogMessage,\n            jobId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'joblog')\n            .send({\n                jobLogDateTime,\n                jobLogMessage,\n                jobId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                jobLogDateTime: '',\n                jobLogMessage: '',\n                jobId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditJobLog() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            jobLogDateTime,\n            jobLogMessage,\n            jobId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'joblog/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                jobLogDateTime,\n                jobLogMessage,\n                jobId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearJobLog = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditJobLog(type) {\n        const { selectedRow, jobMasterList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update JobLog',\n                    id: selectedRow.id,\n                    jobLogDateTime: selectedRow.jobLogDateTime,\n                    jobLogMessage: selectedRow.jobLogMessage,\n                    jobId: selectedRow.jobId,\n                    selectedJobId: { id: selectedRow.jobId, jobName: jobMasterList.find(x => x.id === selectedRow.jobId).jobName }\n\n                }, () => {\n                    console.log(this.state.selectedJobId)\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add JobLog',\n                    id: null,\n                    jobLogDateTime: '',\n                    jobLogMessage: '',\n                    jobId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteJobLog() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete JobLog',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.jobLogDateTime + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteJobLog()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteJobLog() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'joblog/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                jobLogDateTime: '',\n                jobLogMessage: '',\n                jobId: null,\n                selectedRow: null\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorJobLogChange = (editorJobLog) => {\n        this.setState({\n            editorJobLog,\n            description: editorJobLog && draftToMarkdown(convertToRaw(editorJobLog.getCurrentContent())),\n        })\n    }\n\n    onChangeJobMaster = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedJobId: newValue,\n                jobId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditJobLog(type)\n        })\n    }\n\n    render() {\n        const { jobMasterList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteJobLog}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditJobLog.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditJobLog.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearJobLog()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobLogDateTime\">jobLogDateTime </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"jobLogDateTime\" value={this.state.jobLogDateTime} className=\"form-control\" />\n                                        {this.validator.message('jobLogDateTime', this.state.jobLogDateTime, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobId\">Job Id </label>\n                                        <Select\n                                            // className=\"form-control\"\n                                            id={\"jobId\"}\n                                            value={this.state.selectedJobId}\n                                            onChange={this.onChangeJobMaster}\n                                            options={jobMasterList}\n                                            getOptionLabel={(option) => option.jobName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedJobId', this.state.selectedJobId, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobLogMessage\">JobLog Message </label>\n                                        <textarea onChange={this.onTextChange} id=\"jobLogMessage\" value={this.state.jobLogMessage} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                            <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-secondary float-right mx-1\"\n                                    onClick={() => {\n                                        this.setState({ isPopupOpen: false }, () => {\n                                            this.clearJobLog()\n                                        })\n                                    }}\n                                >{'Cancel'}</button>\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-info float-right  mx-1\"\n                                    onClick={this.state.actionType == 'Update JobLog' ? this.onEditJobLog : this.onCreateJobLog}\n                                >{'Submit'}</button>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapJobLogToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapJobLogToProps,\n    mapDispatchToProps\n)(JobLog)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass JobMaster extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Job Master Id',\n                },\n                {\n                    field: 'jobName',\n                    headerName: 'Job Name',\n                },\n                {\n                    field: 'jobSchedule',\n                    headerName: 'Job Schedule',\n                },\n                {\n                    field: 'jobType',\n                    headerName: 'Job Type',\n                },\n                {\n                    field: 'jobConfig',\n                    headerName: 'Job Config',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorJobMaster: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            jobName: '',\n            jobSchedule: '',\n            jobType: '',\n            jobConfig: '',\n            orgId: null,\n            selectedOrg: null,\n            orgList: []\n\n        }\n        this.onCreateJobMaster = this.onCreateJobMaster.bind(this)\n        this.onAddEditJobMaster = this.onAddEditJobMaster.bind(this)\n        this.onDeleteJobMaster = this.onDeleteJobMaster.bind(this)\n        this.onEditJobMaster = this.onEditJobMaster.bind(this)\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadJobMaster()\n        this.loadOrganization()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadJobMaster() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'jobmaster')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n\n    async onCreateJobMaster() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            jobName,\n            jobSchedule,\n            jobType,\n            jobConfig,\n            orgId,\n\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'jobmaster')\n            .send({\n                jobName,\n                jobSchedule,\n                jobType,\n                jobConfig,\n                orgId,\n\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                jobName: '',\n                jobSchedule: '',\n                jobType: '',\n                jobConfig: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditJobMaster() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            jobName,\n            jobSchedule,\n            jobType,\n            jobConfig,\n            orgId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'jobmaster/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                jobName,\n                jobSchedule,\n                jobType,\n                jobConfig,\n                orgId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearJobMaster = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditJobMaster(type) {\n        const { selectedRow, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update JobMaster',\n                    id: selectedRow.id,\n                    jobName: selectedRow.jobName,\n                    jobSchedule: selectedRow.jobSchedule,\n                    jobType: selectedRow.jobType,\n                    jobConfig: selectedRow.jobConfig,\n                    orgId: selectedRow.orgId,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add JobMaster',\n                    id: null,\n                    jobName: '',\n                    jobSchedule: '',\n                    jobType: '',\n                    jobConfig: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteJobMaster() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete JobMaster',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.jobName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteJobMaster()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteJobMaster() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'jobmaster/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                jobName: '',\n                jobSchedule: '',\n                jobType: '',\n                jobConfig: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorJobMasterChange = (editorJobMaster) => {\n        this.setState({\n            editorJobMaster,\n            description: editorJobMaster && draftToMarkdown(convertToRaw(editorJobMaster.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditJobMaster(type)\n        })\n    }\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteJobMaster}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditJobMaster.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditJobMaster.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearJobMaster()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobName\">Job Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"jobName\" value={this.state.jobName} className=\"form-control\" />\n                                        {this.validator.message('jobName', this.state.jobName, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobSchedule\">Job Schedule </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"jobSchedule\" value={this.state.jobSchedule} className=\"form-control\" />\n                                        {this.validator.message('jobSchedule', this.state.jobSchedule, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobType\">Job Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"jobType\" value={this.state.jobType} className=\"form-control\" />\n                                        {this.validator.message('jobType', this.state.jobType, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"jobConfig\">Job Config </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"jobConfig\" value={this.state.jobConfig} className=\"form-control\" />\n                                        {this.validator.message('jobConfig', this.state.jobConfig, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgId\">Organization </label>\n                                        <Select\n                                            id={\"org\"}\n                                            value={this.state.selectedOrg}\n                                            onChange={this.onChangeOrg}\n                                            options={this.state.orgList}\n                                            getOptionLabel={(option) => option.orgName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedOrg', this.state.selectedOrg, 'required', { className: 'text-danger small-font14' })}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearJobMaster()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update JobMaster' ? this.onEditJobMaster : this.onCreateJobMaster}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapJobMasterToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapJobMasterToProps,\n    mapDispatchToProps\n)(JobMaster)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass OrgDevices extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            orgDeviceList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Device Id',\n                },\n                {\n                    field: 'deviceType',\n                    headerName: 'Device Type',\n                },\n                {\n                    field: 'model',\n                    headerName: 'Device Model',\n                },\n                {\n                    field: 'deviceStatus',\n                    headerName: 'Device Status',\n                    valueGetter: function (param) {\n                        return param.data.deviceStatus == 0 ? 'InActive' : 'Active'\n                    },\n                    cellStyle: function (param) {\n                        if (param.data.deviceStatus == 1) {\n                            return { color: 'green' };\n                        } else {\n                            return { color: 'red' };\n                        }\n                    }\n                },\n                {\n                    field: 'deviceDescription',\n                    headerName: 'Description',\n                },\n                {\n                    field: 'deviceModel',\n                    headerName: 'Model',\n                },\n                {\n                    field: 'deviceCode',\n                    headerName: 'Code',\n                },\n                {\n                    field: 'deviceLocation',\n                    headerName: 'Location',\n                },\n                {\n                    field: 'deviceIP',\n                    headerName: 'IP',\n                },\n                {\n                    field: 'deviceCredentials',\n                    headerName: 'Credentials',\n                },\n                {\n                    field: 'deviceConnectionType',\n                    headerName: 'Connection Type',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorOrgDevice: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            deviceType: '',\n            deviceId: null,\n            deviceDescription: '',\n            deviceModel: '',\n            deviceCode: '',\n            deviceLocation: '',\n            deviceIP: '',\n            deviceCredentials: '',\n            deviceConnectionType: '',\n            deviceStatus: '',\n            selectedCountry: null,\n            countryList: [],\n\n            deviceList: []\n\n        }\n        this.onCreateOrgDevice = this.onCreateOrgDevice.bind(this)\n        this.onAddEditOrgDevice = this.onAddEditOrgDevice.bind(this)\n        this.onDeleteOrgDevice = this.onDeleteOrgDevice.bind(this)\n        this.onEditOrgDevice = this.onEditOrgDevice.bind(this)\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadOrgDevices()\n        this.loadDevices()\n\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadOrgDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'orgDevices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    deviceList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateOrgDevice() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            deviceType,\n            deviceId,\n            deviceDescription,\n            deviceModel,\n            deviceCode,\n            deviceLocation,\n            deviceIP,\n            deviceCredentials,\n            deviceConnectionType,\n            deviceStatus,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'orgDevices')\n            .send({\n                deviceType,\n                deviceId,\n                deviceDescription,\n                deviceModel,\n                deviceCode,\n                deviceLocation,\n                deviceIP,\n                deviceCredentials,\n                deviceConnectionType,\n                deviceStatus,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                deviceType: '',\n                deviceId: null,\n                deviceDescription: '',\n                deviceModel: '',\n                deviceCode: '',\n                deviceLocation: '',\n                deviceIP: '',\n                deviceCredentials: '',\n                deviceConnectionType: '',\n                deviceStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditOrgDevice() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            deviceType,\n            deviceId,\n            deviceDescription,\n            deviceModel,\n            deviceCode,\n            deviceLocation,\n            deviceIP,\n            deviceCredentials,\n            deviceConnectionType,\n            deviceStatus,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'orgDevices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                deviceType,\n                deviceId,\n                deviceDescription,\n                deviceModel,\n                deviceCode,\n                deviceLocation,\n                deviceIP,\n                deviceCredentials,\n                deviceConnectionType,\n                deviceStatus,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearOrgDevice = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditOrgDevice(type) {\n        const { selectedRow, deviceList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update OrgDevice',\n                    id: selectedRow.id,\n                    deviceType: selectedRow.deviceType,\n                    deviceId: selectedRow.deviceId,\n                    deviceDescription: selectedRow.deviceDescription,\n                    deviceModel: selectedRow.deviceModel,\n                    deviceCode: selectedRow.deviceCode,\n                    deviceLocation: selectedRow.deviceLocation,\n                    deviceIP: selectedRow.deviceIP,\n                    deviceCredentials: selectedRow.deviceCredentials,\n                    deviceConnectionType: selectedRow.deviceConnectionType,\n                    deviceStatus: selectedRow.deviceStatus,\n                    selectedDeviceId: { id: selectedRow.deviceId, deviceModel: deviceList.find(x => x.id === selectedRow.deviceId).deviceModel }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add OrgDevice',\n                    id: null,\n                    deviceType: '',\n                    deviceId: null,\n                    deviceDescription: '',\n                    deviceModel: '',\n                    deviceCode: '',\n                    deviceLocation: '',\n                    deviceIP: '',\n                    deviceCredentials: '',\n                    deviceConnectionType: '',\n                    deviceStatus: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteOrgDevice() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete OrgDevice',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.deviceCode + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteOrgDevice()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteOrgDevice() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'orgdevices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                deviceType: '',\n                deviceId: null,\n                deviceDescription: '',\n                deviceModel: '',\n                deviceCode: '',\n                deviceLocation: '',\n                deviceIP: '',\n                deviceCredentials: '',\n                deviceConnectionType: '',\n                deviceStatus: '',\n                selectedRow: null\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevice',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevice',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorOrgDeviceChange = (editorOrgDevice) => {\n        this.setState({\n            editorOrgDevice,\n            description: editorOrgDevice && draftToMarkdown(convertToRaw(editorOrgDevice.getCurrentContent())),\n        })\n    }\n\n    onChangeDevice = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedDeviceId: newValue,\n                deviceId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    onCheckboxChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.checked ? 1 : 0\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditOrgDevice(type)\n        })\n    }\n\n\n    render() {\n        const { orgDeviceList, deviceList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteOrgDevice}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditOrgDevice.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditOrgDevice.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearOrgDevice()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceType\">Device Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceType\" value={this.state.deviceType} className=\"form-control\" />\n                                        {this.validator.message('deviceType', this.state.deviceType, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceId\">Device Id </label>\n                                        <Select\n                                            id={\"deviceId\"}\n                                            value={this.state.selectedDeviceId}\n                                            onChange={this.onChangeDevice}\n                                            options={deviceList}\n                                            getOptionLabel={(option) => option.deviceModel}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('deviceId', this.state.deviceId, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceModel\">Device Model </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceModel\" value={this.state.deviceModel} className=\"form-control\" />\n                                        {this.validator.message('deviceModel', this.state.deviceModel, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceCode\">Device Code </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceCode\" value={this.state.deviceCode} className=\"form-control\" />\n                                        {this.validator.message('deviceCode', this.state.deviceCode, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceLocation\">Device Location </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceLocation\" value={this.state.deviceLocation} className=\"form-control\" />\n                                        {this.validator.message('deviceLocation', this.state.deviceLocation, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceIP\">Device IP </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceIP\" value={this.state.deviceIP} className=\"form-control\" />\n                                        {this.validator.message('deviceIP', this.state.deviceIP, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceCredentials\">Device Credentials </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceCredentials\" value={this.state.deviceCredentials} className=\"form-control\" />\n                                        {this.validator.message('deviceCredentials', this.state.deviceCredentials, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceConnectionType\">Connection Type </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"deviceConnectionType\" value={this.state.deviceConnectionType} className=\"form-control\" />\n                                        {this.validator.message('deviceConnectionType', this.state.deviceConnectionType, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceDescription\">Device Description </label>\n                                        <textarea onChange={this.onTextChange} id=\"deviceDescription\" value={this.state.deviceDescription} className=\"form-control\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"deviceStatus\">Device Status </label>\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\"\n                                                onChange={this.onCheckboxChange} id=\"deviceStatus\"\n                                                value={this.state.deviceStatus}\n                                                checked={this.state.deviceStatus == 1 ? true : false}\n                                            />\n                                            <label className=\"custom-control-label\" for=\"deviceStatus\"></label>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearOrgDevice()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update OrgDevice' ? this.onEditOrgDevice : this.onCreateOrgDevice}\n                            >{'Submit'}</button>\n                        </div>\n                    </section>\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapOrgDeviceToProps = orgDevice => ({\n    tabSettings: orgDevice.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapOrgDeviceToProps,\n    mapDispatchToProps\n)(OrgDevices)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass Reports extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Report Id',\n                },\n                {\n                    field: 'reportName',\n                    headerName: 'Report Name',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                },\n                {\n                    field: 'userId',\n                    headerName: 'User Id',\n                },\n                {\n                    field: 'reportConfig',\n                    headerName: 'Report Config',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorReport: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            reportName: '',\n            orgId: null,\n            userId: null,\n            reportConfig: '',\n            selectedCountry: null,\n            countryList: [],\n            selectedOrg: null,\n\n        }\n        this.onCreateReport = this.onCreateReport.bind(this)\n        this.onAddEditReport = this.onAddEditReport.bind(this)\n        this.onDeleteReport = this.onDeleteReport.bind(this)\n        this.onEditReport = this.onEditReport.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadReports()\n        this.loadOrganization()\n        this.loadUsers()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadReports() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'reports')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateReport() {\n        const {\n            reportName,\n            orgId,\n            userId,\n            reportConfig,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'reports')\n            .send({\n                reportName,\n                orgId,\n                userId,\n                reportConfig,\n\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                reportName: '',\n                orgId: null,\n                userId: null,\n                reportConfig: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditReport() {\n        const {\n            selectedRow,\n            id,\n            reportName,\n            orgId,\n            userId,\n            reportConfig,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'reports/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                reportName,\n                orgId,\n                userId,\n                reportConfig,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearReport = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditReport(type) {\n        const { selectedRow, orgList, userList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Report',\n                    id: selectedRow.id,\n                    reportName: selectedRow.reportName,\n                    orgId: selectedRow.orgId,\n                    userId: selectedRow.userId,\n                    reportConfig: selectedRow.reportConfig,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName },\n                    selectedUser: { id: selectedRow.userId, usersFirstName: userList.find(x => x.id === selectedRow.userId).usersFirstName },\n\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Report',\n                    id: null,\n                    reportName: '',\n                    orgId: null,\n                    userId: null,\n                    reportConfig: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteReport() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Report',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.reportName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteReport()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteReport() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'reports/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                reportName: '',\n                orgId: null,\n                userId: null,\n                reportConfig: '',\n                selectedRow: null\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Report',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Report',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    handleChangeUsers = selectedUser => {\n\n        this.setState({\n            selectedUser,\n            userId: selectedUser.id\n        })\n    }\n\n\n\n    onEditorReportChange = (editorReport) => {\n        this.setState({\n            editorReport,\n            description: editorReport && draftToMarkdown(convertToRaw(editorReport.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditReport(type)\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteReport}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditReport.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditReport.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearReport()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"reportName\">Report Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"reportName\" value={this.state.reportName} className=\"form-control\" />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgId\">Organization </label>\n                                        <Select\n                                            id={\"org\"}\n                                            value={this.state.selectedOrg}\n                                            onChange={this.onChangeOrg}\n                                            options={this.state.orgList}\n                                            getOptionLabel={(option) => option.orgName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"userId\">User Id </label>\n                                        <Select\n                                            id={\"user\"}\n                                            value={this.state.selectedUser}\n                                            onChange={this.handleChangeUsers}\n                                            options={this.state.userList}\n                                            getOptionLabel={(option) => option.usersFirstName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"reportConfig\">Report Config </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"reportConfig\" value={this.state.reportConfig} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearReport()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update Report' ? this.onEditReport : this.onCreateReport}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapReportToProps = report => ({\n    tabSettings: report.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapReportToProps,\n    mapDispatchToProps\n)(Reports)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport LoadingOverlay from 'react-loading-overlay';\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\n\nclass RoleDetails extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            roleDetailList: [],\n\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorRoleDetail: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            roleEntityId: null,\n            roleId: null,\n            entityRead: null,\n            entityAdd: null,\n            entityUpdate: null,\n            entityPrint: null,\n            entityExport: null,\n            entityDelete: null,\n            selectedRoleEntity: null,\n            roleEntityList: []\n\n        }\n        this.onCreateRoleDetail = this.onCreateRoleDetail.bind(this)\n        this.onEditRoleDetail = this.onEditRoleDetail.bind(this)\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        const { tabSettings } = this.props\n        if (tabSettings.roleId) {\n            this.loadRoleDetails()\n        } else {\n            this.props.updateTabNavigation({ TabName: 'Roles' })\n        }\n    }\n\n    async loadRoleDetails() {\n        const { tabSettings } = this.props\n        this.setState({\n            isLoading: true\n        })\n\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roledetails/id/' + tabSettings.roleId)\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateRoleDetail() {\n        const {\n            roleId,\n            roleEntityId,\n            entityRead,\n            entityAdd,\n            entityUpdate,\n            entityPrint,\n            entityExport,\n            entityDelete,\n        } = this.state\n\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roledetails')\n            .send({\n                roleId,\n                roleEntityId,\n                entityRead,\n                entityAdd,\n                entityUpdate,\n                entityPrint,\n                entityExport,\n                entityDelete,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                roleEntityId: null,\n                entityRead: null,\n                entityAdd: null,\n                entityUpdate: null,\n                entityPrint: null,\n                entityExport: null,\n                entityDelete: null,\n\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoleDetails()\n                // confirmAlert({\n                //     title: 'RoleDetails',\n                //     message: response.message,\n                //     buttons: [\n                //         {\n                //             label: 'Ok',\n                //             onClick: () => {\n\n                //             }\n                //         }\n                //     ],\n                //     closeOnClickOutside: false,\n                //     closeOnEscape: false\n                // })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditRoleDetail() {\n        const {\n            id,\n            roleId,\n            roleEntityId,\n            entityRead,\n            entityAdd,\n            entityUpdate,\n            entityPrint,\n            entityExport,\n            entityDelete,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roledetails/id/' + id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                roleId,\n                roleEntityId,\n                entityRead,\n                entityAdd,\n                entityUpdate,\n                entityPrint,\n                entityExport,\n                entityDelete,\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoleDetails()\n                // confirmAlert({\n                //     title: 'RoleDetails',\n                //     message: response.message,\n                //     buttons: [\n                //         {\n                //             label: 'Ok',\n                //             onClick: () => {\n\n                //             }\n                //         }\n                //     ],\n                //     closeOnClickOutside: false,\n                //     closeOnEscape: false\n                // })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onCheckboxChange = (roleEntityObj, objIndex, entityName, checked,) => {\n        const { rowData } = this.state\n        const { tabSettings } = this.props\n\n        this.setState({\n            id: roleEntityObj.id,\n            roleId: tabSettings.roleId,\n            roleEntityId: roleEntityObj.roleEntityId,\n            entityRead: rowData[objIndex].entityRead,\n            entityAdd: rowData[objIndex].entityAdd,\n            entityUpdate: rowData[objIndex].entityUpdate,\n            entityPrint: rowData[objIndex].entityPrint,\n            entityExport: rowData[objIndex].entityExport,\n            entityDelete: rowData[objIndex].entityDelete,\n\n            [entityName]: checked ? 1 : 0,\n        }, () => {\n\n            if (roleEntityObj.id) {\n                this.onEditRoleDetail()\n            } else {\n                this.onCreateRoleDetail()\n            }\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { roleDetailList, isLoading, isPopupOpen } = this.state\n        const { tabSettings } = this.props\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card\">\n                    <section className=\"content\" >\n                        <div className=\"card-body\">\n                            <div className=\"row card-header\">\n                                <div className=\"col-md-12\">\n                                    <div className=\"card-body\">\n                                        <strong className=\"text-center\">{'Manage Role Permissions'} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right\"\n                                            onClick={() => this.props.updateTabNavigation({ TabName: 'Roles' })}\n                                        >{'Back'}</button>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row card-header\">\n                                <div className=\"col-md-2\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"entityDelete\">Role Name </label>\n                                    </div>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <div className=\"form-group\">\n                                        <input readOnly type=\"text\" value={tabSettings.roleName} className=\"form-control\" />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row card-header\">\n                                <div className=\"col-md-4\">\n                                    <label htmlFor=\"name\">Entity Name</label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"add\">Add </label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"view\">View</label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"update\">Update</label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"delete\">Delete</label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"print\">Print</label>\n                                </div>\n                                <div className=\"col-md-1\">\n                                    <label htmlFor=\"export\">Export</label>\n                                </div>\n                            </div>\n                            {this.state.rowData.map((value, indx) => {\n                                console.log('value>>>', value)\n                                return (\n                                    <div className=\"row card-header\">\n                                        <div className=\"col-md-4\">\n                                            <label style={{ fontWeight: 200 }} htmlFor=\"name\">{value.entityName}</label>\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityAdd}\n                                                checked={value.entityAdd == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityAdd', checked) }} id={value.entityName + '-entityAdd'}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityRead}\n                                                checked={value.entityRead == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityRead', checked) }} id={value.entityName + '-entityRead'}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityUpdate}\n                                                checked={value.entityUpdate == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityUpdate', checked) }} id={value.entityName + '-entityUpdate'}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityDelete}\n                                                checked={value.entityDelete == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityDelete', checked) }} id={value.entityName + '-entityDelete'}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityPrint}\n                                                checked={value.entityPrint == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityPrint', checked) }} id={value.entityName + '-entityPrint'}\n                                            />\n                                        </div>\n                                        <div className=\"col-md-1\">\n                                            <BootstrapSwitchButton\n                                                value={value.entityExport}\n                                                checked={value.entityExport == 1 ? true : false}\n                                                onlabel='ON'\n                                                offlabel='OFF'\n                                                size=\"sm\"\n                                                onChange={(checked) => { this.onCheckboxChange(value, indx, 'entityExport', checked) }} id={value.entityName + '-entityExport'}\n                                            />\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapRoleDetailToProps = roleDetail => ({\n    tabSettings: roleDetail.userReducer.tabSettings,\n    roleDetailList: roleDetail.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapRoleDetailToProps,\n    mapDispatchToProps\n)(RoleDetails)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport SimpleReactValidator from 'simple-react-validator';\n\nclass UserRolesMapping extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            UserRolesMappingList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'RolesMapping Id',\n                },\n                {\n                    field: 'userId',\n                    headerName: 'User Id',\n                },\n                {\n                    field: 'roleId',\n                    headerName: 'RoleId',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true,\n                filter: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            editorUserRolesMapping: null,\n\n            rowData: [],\n            userRoleList: [],\n            userList: [],\n            orgList: [],\n\n            selectedOrg: null,\n            selectedRole: null,\n            selectedUser: null,\n\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            userId: null,\n            roleId: null,\n            orgId: null,\n            selectedCountry: null,\n\n        }\n        this.onCreateUserRolesMapping = this.onCreateUserRolesMapping.bind(this)\n        this.onAddEditUserRolesMapping = this.onAddEditUserRolesMapping.bind(this)\n        this.onDeleteUserRolesMapping = this.onDeleteUserRolesMapping.bind(this)\n        this.onEditUserRolesMapping = this.onEditUserRolesMapping.bind(this)\n\n        this.validator = new SimpleReactValidator({ autoForceUpdate: this })\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadUserRolesMapping()\n        this.loadUsers()\n        this.loadUserRoles()\n        this.loadOrganizations()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadUserRolesMapping() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'userrolesmapping')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUserRoles() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roles')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userRoleList: response.ResponsePacket,\n                    isLoading: false\n                })\n\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganizations() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateUserRolesMapping() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            userId,\n            roleId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'userrolesmapping')\n            .send({\n                userId,\n                roleId,\n                orgId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                userId: null,\n                roleId: null,\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditUserRolesMapping() {\n        if (!this.validator.allValid()) {\n            this.validator.showMessages();\n            return\n        }\n        const {\n            selectedRow,\n            id,\n            userId,\n            roleId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'userrolesmapping/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                userId,\n                roleId,\n                orgId,\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearUserRolesMapping = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n        this.validator.hideMessages()\n    }\n\n    async onAddEditUserRolesMapping(type) {\n        const { selectedRow, userList, userRoleList, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update UserRolesMapping',\n                    id: selectedRow.id,\n                    userId: selectedRow.userId,\n                    roleId: selectedRow.roleId,\n                    orgId: selectedRow.orgId,\n                    selectedUser: { id: selectedRow.userId, usersFirstName: userList.find(x => x.id === selectedRow.userId).usersFirstName },\n                    selectedRole: { id: selectedRow.roleId, roleName: userRoleList.find(x => x.id === selectedRow.roleId).roleName },\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add UserRolesMapping',\n                    id: null,\n                    userId: null,\n                    roleId: null,\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteUserRolesMapping() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete UserRolesMapping',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.id + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteUserRolesMapping()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteUserRolesMapping() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'userrolesmapping/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                userId: null,\n                roleId: null,\n                orgId: null,\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChangeUsers = selectedUser => {\n\n        this.setState({\n            selectedUser,\n            userId: selectedUser.id\n        })\n    }\n\n    handleChangeRoles = selectedRole => {\n        this.setState({\n            selectedRole,\n            roleId: selectedRole.id\n        })\n    }\n\n    handleChangeOrg = selectedOrg => {\n        this.setState({\n            selectedOrg,\n            orgId: selectedOrg.id\n        })\n    }\n\n    onEditorUserRolesMappingChange = (editorUserRolesMapping) => {\n        this.setState({\n            editorUserRolesMapping,\n            description: editorUserRolesMapping && draftToMarkdown(convertToRaw(editorUserRolesMapping.getCurrentContent())),\n        })\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    async onRowDoubleClicked(type) {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        }, () => {\n            this.onAddEditUserRolesMapping(type)\n        })\n    }\n\n    render() {\n        const { UserRolesMappingList, isLoading, isPopupOpen } = this.state\n        this.validator.purgeFields();\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right\"\n                                            onClick={this.onDeleteUserRolesMapping}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right  mx-2\"\n                                            onClick={this.onAddEditUserRolesMapping.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-info float-right \"\n                                            onClick={this.onAddEditUserRolesMapping.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-secondary float-right mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearUserRolesMapping()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px', marginTop: '10px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                    onRowDoubleClicked={() => this.onRowDoubleClicked('edit')}\n\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"userId\">User Id </label>\n                                        <Select\n                                            id={\"user\"}\n                                            value={this.state.selectedUser}\n                                            onChange={this.handleChangeUsers}\n                                            options={this.state.userList}\n                                            getOptionLabel={(option) => option.usersFirstName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedUser', this.state.selectedUser, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"roleId\">Role Id </label>\n                                        <Select\n                                            id={\"roleName\"}\n                                            value={this.state.selectedRole}\n                                            onChange={this.handleChangeRoles}\n                                            options={this.state.userRoleList}\n                                            getOptionLabel={(option) => option.roleName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedRole', this.state.selectedRole, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label style={{ fontWeight: 200 }} htmlFor=\"orgId\">Org Id </label>\n                                        <Select\n                                            id={\"org\"}\n                                            value={this.state.selectedOrg}\n                                            onChange={this.handleChangeOrg}\n                                            options={this.state.orgList}\n                                            getOptionLabel={(option) => option.orgName}\n                                            getOptionValue={(option) => option.id}\n                                        />\n                                        {this.validator.message('selectedOrg', this.state.selectedOrg, 'required', { className: 'text-danger small-font14' })}\n\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-secondary float-right mx-1\"\n                                onClick={() => {\n                                    this.setState({ isPopupOpen: false }, () => {\n                                        this.clearUserRolesMapping()\n                                    })\n                                }}\n                            >{'Cancel'}</button>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-info float-right  mx-1\"\n                                onClick={this.state.actionType == 'Update UserRolesMapping' ? this.onEditUserRolesMapping : this.onCreateUserRolesMapping}\n                            >{'Submit'}</button>\n                        </div>\n                    </section >\n                </div >\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapUserRolesMappingToProps = UserRolesMapping => ({\n    tabSettings: UserRolesMapping.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapUserRolesMappingToProps,\n    mapDispatchToProps\n)(UserRolesMapping)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { storeCurrentUser, updateTabNavigation } from '../store/actions'\n\nclass Header extends Component {\n    logout = () => {\n        localStorage.setItem('adminLogin', false);\n        localStorage.setItem('admin_access_token', null);\n        localStorage.setItem('LoginId', null);\n        localStorage.setItem('user', null);\n\n        window.location.reload();\n    }\n\n    onClickTab = (tabName) => {\n        // alert(tabName)\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabSettings, currentUserFromStore, tabNames } = this.props\n        return (\n            <div className=\"wrapper\">\n                <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\n                    {/* <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a className=\"brand-link\">\n                                <img src=\"dist/img/AdminLTELogo.png\" alt=\"Logo\" className=\"brand-image img-circle elevation-3\" />\n                                &nbsp;\n                                <span className=\"brand-text font-weight-light\">NCM Admin</span>\n                            </a>\n                        </li>\n                    </ul> */}\n                    {tabSettings.TabName != 'Dashboard' ?\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item dropdown\">\n                                <li className=\"nav-item\">\n                                    <a className=\"nav-link\" data-widget=\"pushmenu\" role=\"button\"><i className=\"fas fa-bars\"></i></a>\n                                </li>\n                            </li>\n                            <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    All\n                            </a>\n                                <div className=\"dropdown-menu overflow-hidden\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[0])}>\n                                        {tabNames[0]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                        {tabNames[1]}\n                                    </a><a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[2])}>\n                                        {tabNames[2]}\n                                    </a><a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[3])}>\n                                        {tabNames[3]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                        {tabNames[4]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[5])}>\n                                        {tabNames[5]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                        {tabNames[6]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                        {tabNames[7]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[8])}>\n                                        {tabNames[8]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[9])}>\n                                        {tabNames[9]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[10])}>\n                                        {tabNames[10]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[11])}>\n                                        {tabNames[11]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[12])}>\n                                        {tabNames[12]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[13])}>\n                                        {tabNames[13]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[14])}>\n                                        {tabNames[14]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[15])}>\n                                        {tabNames[15]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[16])}>\n                                        {tabNames[16]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[17])}>\n                                        {tabNames[17]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[18])}>\n                                        {tabNames[18]}\n                                    </a>\n                                    <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[19])}>\n                                        {tabNames[19]}\n                                    </a>\n                                </div>\n                            </li>\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Masters\n                                </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[2])}>\n                                        {tabNames[2]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[3])}>\n                                        {tabNames[3]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                        {tabNames[4]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                        {tabNames[6]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                        {tabNames[7]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[8])}>\n                                        {tabNames[8]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[9])}>\n                                        {tabNames[9]}\n                                    </a>\n                                </div>\n                            </li> */}\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Job\n                            </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[12])}>\n                                        {tabNames[12]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[13])}>\n                                        {tabNames[13]}\n                                    </a>\n                                </div>\n                            </li> */}\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Devices\n                            </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[5])}>\n                                        {tabNames[5]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[11])}>\n                                        {tabNames[11]}\n                                    </a>\n                                </div>\n                            </li> */}\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Reports\n                            </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[15])}>\n                                        {tabNames[15]}\n                                    </a>\n                                </div>\n                            </li> */}\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    User\n                            </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                        {tabNames[1]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                        {tabNames[6]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                        {tabNames[7]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[16])}>\n                                        {tabNames[16]}\n                                    </a>\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[17])}>\n                                        {tabNames[17]}\n                                    </a>\n                                </div>\n                            </li> */}\n                            {/* <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Settings\n                            </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className={\"dropdown-item\"} onClick={this.onClickTab.bind(this, tabNames[18])}>\n                                        {tabNames[18]}\n                                    </a>\n                                </div>\n                            </li> */}\n                        </ul>\n                        :\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item dropdown\">\n                                <li className=\"nav-item\">\n                                    <a className=\"nav-link\" data-widget=\"pushmenu\" role=\"button\"><i className=\"fas fa-bars\"></i></a>\n                                </li>\n                            </li>\n                        </ul>\n                    }\n                    {/* <form className=\"form-inline ml-2\">\n                        <div className=\"input-group input-group-sm\">\n                            <input className=\"form-control form-control-navbar\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                            <div className=\"input-group-append\">\n                                <button className=\"btn btn-navbar\" type=\"submit\" >\n                                    <i className=\"fas fa-search\"></i>\n                                </button>\n                            </div>\n                        </div>\n                    </form> */}\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item dropdown\">\n                            {/* <a className=\"nav-link\" data-toggle=\"dropdown\" >\n                                <i className=\"far fa-comments\"></i>\n                                <span className=\"badge badge-danger navbar-badge\">3</span>\n                            </a> */}\n                            <div className=\"dropdown-menu dropdown-menu-lg dropdown-menu-right\">\n                                <a className=\"dropdown-item\">\n                                    <div className=\"media\">\n                                        <img src=\"dist/img/user1-128x128.jpg\" alt=\"User Avatar\" className=\"img-size-50 mr-3 img-circle\" />\n                                        <div className=\"media-body\">\n                                            <h3 className=\"dropdown-item-title\">\n                                                Brad Diesel\n                                            <span className=\"float-right text-sm text-danger\"><i className=\"fas fa-star\"></i></span>\n                                            </h3>\n                                            <p className=\"text-sm\">Call me whenever you can...</p>\n                                            <p className=\"text-sm text-muted\"><i className=\"far fa-clock mr-1\"></i> 4 Hours Ago</p>\n                                        </div>\n                                    </div>\n                                </a>\n                                <div className=\"dropdown-divider\"></div>\n                                <a className=\"dropdown-item\">\n                                    <div className=\"media\">\n                                        <img src=\"dist/img/user8-128x128.jpg\" alt=\"User Avatar\" className=\"img-size-50 img-circle mr-3\" />\n                                        <div className=\"media-body\">\n                                            <h3 className=\"dropdown-item-title\">\n                                                John Pierce\n                                                <span className=\"float-right text-sm text-muted\"><i className=\"fas fa-star\"></i></span>\n                                            </h3>\n                                            <p className=\"text-sm\">I got your message bro</p>\n                                            <p className=\"text-sm text-muted\"><i className=\"far fa-clock mr-1\"></i> 4 Hours Ago</p>\n                                        </div>\n                                    </div>\n                                </a>\n                                <div className=\"dropdown-divider\"></div>\n                                <a className=\"dropdown-item\">\n                                    <div className=\"media\">\n                                        <img src=\"dist/img/user3-128x128.jpg\" alt=\"User Avatar\" className=\"img-size-50 img-circle mr-3\" />\n                                        <div className=\"media-body\">\n                                            <h3 className=\"dropdown-item-title\">\n                                                Nora Silvester\n                                                <span className=\"float-right text-sm text-warning\"><i className=\"fas fa-star\"></i></span>\n                                            </h3>\n                                            <p className=\"text-sm\">The subject goes here</p>\n                                            <p className=\"text-sm text-muted\"><i className=\"far fa-clock mr-1\"></i> 4 Hours Ago</p>\n                                        </div>\n                                    </div>\n                                </a>\n                                <div className=\"dropdown-divider\"></div>\n                                <a className=\"dropdown-item dropdown-footer\">See All Messages</a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item\" onClick={this.logout.bind(this)}>\n                            <a className=\"nav-link\" data-widget=\"control-sidebar\" data-slide=\"true\" role=\"button\">\n                                {/* <i className=\"fas fa-th-large\"></i> */}\n                                <h3 className=\"dropdown-item-title\">\n                                    {/* <span className=\"float-right text-sm text-warning\">\n                                        <i className=\"fas fa-star\"></i></span> */}\n\n                                </h3>\n                                Logout\n                            </a>\n                        </li>\n                    </ul>\n                </nav>\n                <aside className=\"main-sidebar sidebar-dark-primary elevation-4\">\n                    <a href=\"index3.html\" className=\"brand-link\">\n                        <img src=\"dist/img/AdminLTELogo.png\" alt=\"AdminLTE Logo\" className=\"brand-image img-circle elevation-3\" style={{ opacity: .8 }} />\n                        <span className=\"brand-text font-weight-light\">AdminLTE 3</span>\n                    </a>\n                    <div className=\"sidebar\">\n                        <div className=\"user-panel mt-3 pb-3 mb-3 d-flex\">\n                            <div className=\"image\">\n                                <img src=\"dist/img/user2-160x160.jpg\" className=\"img-circle elevation-2\" alt=\"User Image\" />\n                            </div>\n                            <div className=\"info\">\n                                <a className=\"d-block\">Alexander Pierce</a>\n                            </div>\n                        </div>\n                    </div>\n                </aside>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameData,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { storeCurrentUser, updateTabNavigation } from '../store/actions'\n\nclass SideBar extends Component {\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabSettings, currentUserFromStore, tabNames, tabPermissions } = this.props\n        return (\n            <aside className=\"main-sidebar sidebar-dark-primary elevation-4\">\n                <a className=\"brand-link\" onClick={this.onClickTab.bind(this, tabNames[0])}>\n                    <img src=\"dist/img/AdminLTELogo.png\" alt=\"Logo\" className=\"brand-image img-circle elevation-3\" />\n                    <span className=\"brand-text font-weight-light text-light\">NCM Portal</span>\n                </a>\n                <div className=\"sidebar\">\n                    <div className=\"user-panel mt-3 pb-3 mb-3 d-flex\">\n                        <div className=\"image\">\n                            <img src=\"dist/img/user.jpeg\" className=\"img-circle elevation-2\" alt=\"User Image\" />\n                        </div>\n                        <div className=\"info\">\n                            <a href=\"#\" className=\"d-block\">{localStorage.getItem('user')}</a>\n                        </div>\n                    </div>\n                    <nav className=\"mt-2\">\n                        <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\n\n                            {\n                                tabPermissions.map((val, indx) => {\n                                    if (val.entityRead == 1 || val.entityAdd == 1 || val.entityUpdate == 1) {\n                                        return (\n                                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, val.entityName)}>\n                                                <a className={\"nav-link \" + (tabSettings.TabName == val.entityName ? 'active' : '')} >\n                                                    {/* <i className=\"nav-icon fas fa-home\"></i> */}\n                                                    <p>{val.entityName}</p>\n                                                </a>\n                                            </li>\n                                        )\n                                    }\n                                })\n                            }\n                            {/* <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[0])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[0] ? 'active' : '')} >\n                                    <i className=\"nav-icon fas fa-home\"></i>\n                                    <p>{tabNames[0]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[1] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-user\"></i>\n                                    <p>{tabNames[1]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[4] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-users\"></i>\n                                    <p>{tabNames[4]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[5])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[5] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-tablet-alt\"></i>\n                                    <p>{tabNames[5]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[8])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[8] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-sitemap\"></i>\n                                    <p>{tabNames[8]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[13])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[13] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-tasks\"></i>\n                                    <p>{tabNames[13]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[15])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[15] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-file\"></i>\n                                    <p>{tabNames[15]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[18])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[18] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-cog\"></i>\n                                    <p>{tabNames[18]}</p>\n                                </a>\n                            </li> */}\n                        </ul>\n                    </nav>\n                </div>\n            </aside>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameData,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n    tabPermissions: state.userReducer.tabPermissions\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SideBar)\n","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <footer className=\"main-footer\">\n                <span>Copyright &copy; 2020-2021</span>\n                <div className=\"float-right d-none d-sm-inline-block\">\n                    <span>v1.0</span>\n                </div>\n            </footer>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Home from '../adminPanel/Home';\nimport Dashboard from '../adminPanel/Dashboard'\nimport Settings from '../adminPanel/Settings'\nimport Users from '../adminPanel/Users';\nimport Countries from '../adminPanel/Countries';\nimport States from '../adminPanel/States';\nimport Vendor from '../adminPanel/Vendor';\nimport Device from '../adminPanel/Device';\nimport Roles from '../adminPanel/Roles';\nimport RolesEntity from '../adminPanel/RolesEntity';\nimport Organization from '../adminPanel/Organization';\n\nimport CategoriesType from '../adminPanel/CategoriesType';\nimport Config from '../adminPanel/Config';\nimport DeviceLog from '../adminPanel/DeviceLog';\nimport JobLog from '../adminPanel/JobLog';\nimport JobMaster from '../adminPanel/JobMaster';\nimport OrgDevices from '../adminPanel/OrgDevices';\nimport Reports from '../adminPanel/Reports';\nimport RoleDetails from '../adminPanel/RoleDetails';\nimport UserRolesMapping from '../adminPanel/UserRolesMapping';\n\nimport Header from './Header';\nimport SideBar from './SideBar';\nimport Footer from './Footer';\n\nclass AdminContent extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    renderPage = () => {\n        const { tabSettings, tabNames } = this.props\n        if (tabSettings.TabName == tabNames[0]) {\n            return <Home />      \n        } else if (tabSettings.TabName == tabNames[1]) {\n            return <Users />\n        } else if (tabSettings.TabName == tabNames[2]) {\n            return <Countries />\n        } else if (tabSettings.TabName == tabNames[3]) {\n            return <States />\n        } else if (tabSettings.TabName == tabNames[4]) {\n            return <Vendor />\n        } else if (tabSettings.TabName == tabNames[5]) {\n            return <Device />\n        } else if (tabSettings.TabName == tabNames[6]) {\n            return <Roles />\n        } else if (tabSettings.TabName == tabNames[7]) {\n            return <RolesEntity />\n        } else if (tabSettings.TabName == tabNames[8]) {\n            return <Organization />\n        } else if (tabSettings.TabName == tabNames[9]) {\n            return <CategoriesType />\n        } else if (tabSettings.TabName == tabNames[10]) {\n            return <Config />\n        } else if (tabSettings.TabName == tabNames[11]) {\n            return <DeviceLog />\n        } else if (tabSettings.TabName == tabNames[12]) {\n            return <JobLog />\n        } else if (tabSettings.TabName == tabNames[13]) {\n            return <JobMaster />\n        } else if (tabSettings.TabName == tabNames[14]) {\n            return <OrgDevices />\n        } else if (tabSettings.TabName == tabNames[15]) {\n            return <Reports />\n        } else if (tabSettings.TabName == tabNames[16]) {\n            return <RoleDetails />\n        } else if (tabSettings.TabName == tabNames[17]) {\n            return <UserRolesMapping />\n        } else if (tabSettings.TabName == tabNames[18]) {\n            return <Settings />\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <Header />\n                <SideBar />\n                <div className=\"content-wrapper\" style={{ padding: '10px' }}>\n                    {this.renderPage()}\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameList,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n})\n\nexport default connect(\n    mapStateToProps,\n    null\n)(AdminContent)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport request from 'superagent';\n// import { API_URL, IS_PRODUCTION, API_PORT } from '../constants'\nimport { updateTabNavigation, storeCurrentUser } from '../store/actions'\nimport { Card, Nav } from 'react-bootstrap'\nimport LoadingOverlay from 'react-loading-overlay';\n\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport AdminContent from '../components/AdminContent';\nimport { Redirect } from 'react-router-dom';\n// import { browserHistory } from 'react-router';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameName: 'NCM',\n            email: '',\n            password: '',\n            isLoading: false\n        }\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    async onLoginClick() {\n        if (this.state.email && this.state.password) {\n            await this.loginWithTeam()\n        } else {\n            this.showAlert(\"Credientials can't blank !!\")\n        }\n    }\n\n    showAlert = (msg) => {\n        confirmAlert({\n            title: 'Login',\n            message: msg,\n            buttons: [\n                {\n                    label: 'Ok',\n                    onClick: () => {\n                        // this.props.undo()\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async loginWithTeam() {\n        this.setState({\n            isLoading: true\n        })\n\n        try {\n            const r = await request.post(process.env.REACT_APP_API_URL + 'users/login')\n                .send({\n                    email: this.state.email,\n                    password: this.state.password\n                })\n            const response = r.body\n\n            if (response.success) {\n                let _that = this\n                debugger\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    localStorage.setItem('adminLogin', true);\n                    localStorage.setItem('admin_access_token', response.ResponsePacket.token);\n                    localStorage.setItem('LoginId', response.ResponsePacket.roleId);\n                    localStorage.setItem('user', response.ResponsePacket.usersFirstName);\n\n                    // this.props.storeCurrentUser(response.ResponsePacket)\n                    // window.location.reload();\n\n                    this.props.history.push('/admin');\n                    // window.location.reload();\n\n                    // browserHistory.push('/admin');\n                    // return <Redirect to=\"/admin\" />\n\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    this.showAlert(response.message)\n                })\n            }\n        } catch (catchErr) {\n            // this.showAlert(\"Error:\", catchErr.error)\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <LoadingOverlay active={this.state.isLoading} spinner >\n                <section className=\"hold-transition login-page\">\n                    <div className=\"login-box\">\n                        <div className=\"login-logo\">\n                            <a href='javascript:void(0)'><b></b> &nbsp;NCM</a>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body login-card-body\">\n                                <p className=\"login-box-msg\">Sign in to start your session</p>\n                                <form>\n                                    <div className=\"input-group mb-3\">\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"email\" value={this.state.email} className=\"form-control\" placeholder=\"email\" />\n                                        <div className=\"input-group-append\">\n                                            {/* <div className=\"input-group-text\">\n                                                <span className=\"fas fa-envelope\"></span>\n                                            </div> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"input-group mb-3\">\n                                        <input type=\"password\" className=\"form-control\" onChange={this.onTextChange} id=\"password\" value={this.state.password} placeholder=\"Password\" />\n                                        <div className=\"input-group-append\">\n                                            {/* <div className=\"input-group-text\">\n                                                <span className=\"fas fa-lock\"></span>\n                                            </div> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-8\">\n                                        </div>\n                                        <div className=\"col-4\">\n                                            <button type=\"button\" onClick={this.onLoginClick.bind(this)} className=\"btn btn-primary btn-block\">Sign In</button>\n                                        </div>\n                                    </div>\n                                </form>\n                                <div className=\"social-auth-links text-center mb-3\">\n                                    <p>- OR -</p>\n                                    <a href=\"javascript:void(0)\" className=\"btn btn-block btn-primary\">\n                                        <i className=\"fab fa-facebook mr-2\"></i> Sign in using Facebook\n                                    </a>\n                                    <a href=\"javascript:void(0)\" className=\"btn btn-block btn-danger\">\n                                        <i className=\"fab fa-google-plus mr-2\"></i> Sign in using Google+\n                                    </a>\n                                </div>\n                                <p className=\"mb-1\">\n                                    {/* <a href=\"javascript:void(0)\">I forgot my password</a> */}\n                                </p>\n                                <p className=\"mb-0\">\n                                    {/* <a href=\"javascript:void(0)\" className=\"text-center\">Register a new membership</a> */}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n    storeCurrentUser: (data) => { dispatch(storeCurrentUser(data)) },\n\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login)\n","import React from 'react';\n\nimport AdminContent from '../components/AdminContent';\nimport Login from '../adminPanel/Login';\n\nfunction AdminContainer() {\n  if (JSON.parse(localStorage.getItem('adminLogin'))) {\n    return (\n      <AdminContent />\n    )\n  } else {\n    return (\n      <Login />\n    )\n  }\n}\n\nexport default AdminContainer;\n","export const initialDefaultState = {\n    currentUser: {\n        Response: \"\",\n        AppUserID: null,\n        VendorID: null,\n        UserTypeID: null,\n        Email: \"\",\n        UserType: \"\",\n        Name: \"Admin\",\n        ProfileImage: \"\",\n        CustomerID: null,\n        OutletID: null,\n        OutletName: null,\n        DeviceToken: \"\",\n        VehicleRegNumber: \"\",\n        IsFirstTime: false,\n        IsActivated: false,\n        Status: false,\n        Message: \"\"\n    },\n    currentUserSetings: {\n        SettingID: 1,\n        Currency: \"\",\n        DeliveryCharges: \"\",\n        IsGST: \"\",\n        GSTPercentage: \"\",\n        IsLanguage2: \"\",\n        Language2: \"\",\n        Message: \"\"\n    },\n    tabSettings: {\n        TabName: 'Dashboard',\n    },\n    tabNames: [\n        'Dashboard', 'Users', 'Countries', 'States', 'Vendors', 'Devices', 'Roles', 'Roles Entity', 'Organization',\n        'CategoriesType', 'Config', 'DeviceLog', 'JobLog', 'JobMaster', 'OrgDevices', 'Reports', 'RoleDetails', 'UserRolesMapping', 'Settings'\n    ],\n    tabPermissions: []\n}","import { userConstants } from '../constants'\nimport { initialDefaultState } from './initialDefaultState'\n\nconst initialState = {\n    currentUser: initialDefaultState.currentUser,\n    currentUserSettings: initialDefaultState.currentUserSetings,\n    tabSettings: initialDefaultState.tabSettings,\n    tabNames: initialDefaultState.tabNames,\n    userList: initialDefaultState.userList,\n    teamList: initialDefaultState.teamList,\n    gameList: initialDefaultState.gameList,\n    tabPermissions: initialDefaultState.tabPermissions\n\n}\nconst userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case userConstants.USERLOGIN_REQUEST:\n            return state;\n        case userConstants.USERLOGIN_SUCCESS:\n            return state\n        case userConstants.USERLOGIN_FAILURE:\n            return state;\n        case userConstants.STORE_CURRENT_USER:\n            debugger\n            return {\n                ...state,\n                currentUser: action.currentUser\n            }\n        case userConstants.STORE_CURRENT_USER_SETTINGS:\n            debugger\n            return {\n                ...state,\n                currentUserSettings: action.currentUserSettings\n            }\n\n        case userConstants.UPDATE_TAB_DATA:\n            return {\n                ...state,\n                tabSettings: action.tabSettings\n            }\n\n        case userConstants.UPDATE_TAB_PERMISSION:\n            debugger\n            return {\n                ...state,\n                tabPermissions: action.tabPermissions.tabPermissions\n            }\n\n        case userConstants.GET_CURRENT_USER_FROM_STORE:\n            return {\n                ...state,\n                currentUser: state.currentUser\n            }\n        default:\n            return state;\n    }\n}\nexport default userReducer;\n","import { gameConstants } from '../constants'\nimport { initialDefaultState } from './initialDefaultState'\n\nconst initialState = {\n    gameData: initialDefaultState.gameData,\n    gameList: initialDefaultState.gameList,\n    gamePlayers: initialDefaultState.Players,\n    isMeJoined: false,\n    gameMoves: initialDefaultState.Moves,\n    gameChats: initialDefaultState.Chats,\n    numberOfPlayers: initialDefaultState.numberOfPlayers,\n    playerNames: initialDefaultState.playerNames,\n    gameSecret: initialDefaultState.gameSecret,\n    isPlayerLoggedIn: initialDefaultState.isPlayerLoggedIn,\n\n    currentUserPlayerID: null,\n    currentUserCredentials: null,\n    currentGameID: null,\n    currentGameName: 'NCM',\n    currentGameSetupData: {},\n    currentMainTab: '',\n    defaultRoleCards: initialDefaultState.DefaultRoleCards,\n    defaultRoleNames: initialDefaultState.DefaultRoleNames,\n    notificationsFromStore: []\n}\n\nfunction isMeJoined(players) {\n    var result = false;\n    for (let i = 0; i < players.length; i++) {\n        if (players[i].isJoined === true) {\n            result = true;\n            break;\n        }\n    }\n    return result\n}\n\nconst gameReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case gameConstants.PLAYER_LOGIN:\n            return {\n                ...state,\n                isPlayerLoggedIn: action.isLogin\n            }\n\n        case gameConstants.STORE_CURRENT_GAME_DETAILS:\n            return {\n                ...state,\n                currentGameID: action.gameData.currentGameID,\n                currentGameSetupData: action.gameData.currentGameSetupData\n            }\n\n        case gameConstants.STORE_CURRENT_PLAYER_CREDENTIALS:\n            return {\n                ...state,\n                currentUserPlayerID: action.credentials ? action.credentials.currentUserPlayerID : null,\n                currentUserCredentials: action.credentials ? action.credentials.currentUserCredentials : null\n            }\n\n        case gameConstants.CREATE_NEW_GAME:\n            let OldArr = state.gameList\n            OldArr.push(action.gameData)\n            return {\n                ...state,\n                gameList: OldArr\n            }\n\n        case gameConstants.UPDATE_CURRENT_PLAYER_ID:\n            let Plrs = state.gamePlayers\n            if (isMeJoined(Plrs)) {\n                Plrs[action.playerID].isJoined = false\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: Plrs,\n                    isMeJoined: isMeJoined(Plrs)\n                }\n            } else {\n                Plrs[action.playerID].isJoined = true\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: Plrs,\n                    isMeJoined: isMeJoined(Plrs)\n                }\n            }\n\n        case gameConstants.REMOVE_CURRENT_PLAYER_ID:\n            let plDT = state.gamePlayers\n            if (isMeJoined(plDT)) {\n                return state\n            } else {\n                plDT[action.playerID].isJoined = false\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: plDT,\n                    isMeJoined: isMeJoined(plDT)\n                }\n            }\n\n        case gameConstants.SET_GAME_PLAYER:\n            return {\n                ...state,\n                gamePlayers: action.playerData,\n            }\n\n        case gameConstants.SET_TAB_TO_STORE:\n            return {\n                ...state,\n                currentMainTab: action.tabData.tabName,\n            }\n\n        case gameConstants.SET_NOTIFICATION_TO_STORE:\n            return {\n                ...state,\n                notificationsFromStore: action.notificationData,\n            }\n\n        default:\n            return state;\n    }\n}\nexport default gameReducer","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport userReducer from '../store/reducers/user.reducer'\nimport gameReducer from '../store/reducers/game.reducer'\n\nconst rootReducer = combineReducers({\n    userReducer,\n    gameReducer\n})\nconst configureStore = () => {\n    return createStore(rootReducer, applyMiddleware(thunk));\n}\nexport default configureStore;","import React from 'react';\nimport { Provider } from \"react-redux\";\n\n//Styling\nimport '../App.css';\nimport '../assets/css/bootstrap.min.css'\nimport '../assets/css/style.css'\n\nimport Login from '../adminPanel/Login'\nimport AdminContainer from './AdminContainer'\n\nimport configureStore from '../../src/store/configureStore'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\n\nconst store = configureStore()\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                {/* <Rote exact pattern='/game' path=\"/game\" component={GameContainer} /> */}\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => {\n                        return (\n\n                            <Redirect to=\"/login\" />\n                        )\n                    }}\n                />\n                {/* <Route exact pattern='/' path=\"/login\" component={Login} /> */}\n                <Route exact pattern='/login' path=\"/login\" component={Login} />\n                <Route exact pattern='/admin' path=\"/admin\" component={AdminContainer} />\n            </Router>\n        </Provider>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/index';\nimport * as serviceWorker from './serviceWorker';\nimport { registerServiceWorker } from './serviceWorker'\n\n// registerServiceWorker()\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// serviceWorker.unregister();"],"sourceRoot":""}