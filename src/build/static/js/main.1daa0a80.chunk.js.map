{"version":3,"sources":["store/constants/user.constants.js","store/constants/game.constant.js","store/actions/user.action.js","store/actions/game.action.js","adminPanel/Dashboard.js","adminPanel/Settings.js","adminPanel/Users.js","adminPanel/Countries.js","adminPanel/States.js","adminPanel/Vendor.js","adminPanel/Device.js","adminPanel/Roles.js","adminPanel/RolesEntity.js","adminPanel/Organization.js","adminPanel/CategoriesType.js","adminPanel/Config.js","adminPanel/DeviceLog.js","adminPanel/JobLog.js","adminPanel/JobMaster.js","adminPanel/OrgDevices.js","adminPanel/Reports.js","adminPanel/RoleDetails.js","adminPanel/UserRolesMapping.js","components/Header.js","components/SideBar.js","components/Footer.js","components/AdminContent.js","adminPanel/Login.js","container/AdminContainer.js","store/reducers/initialDefaultState.js","store/reducers/user.reducer.js","store/reducers/game.reducer.js","store/configureStore.js","container/index.js","index.js"],"names":["userConstants","USERLOGIN_REQUEST","USERLOGIN_SUCCESS","USERLOGIN_FAILURE","STORE_CURRENT_USER","STORE_CURRENT_USER_SETTINGS","GET_CURRENT_USER_FROM_STORE","UPDATE_TAB_DATA","gameConstants","updateTabNavigation","tabSettings","type","createNewGame","gameData","Dashboard","onClickTab","tabName","props","TabName","tabNames","this","className","style","paddingTop","map","val","indx","color","onClick","bind","Component","connect","state","userReducer","dispatch","data","Settings","onTextChange","e","setState","target","id","value","showAlert","msg","confirmAlert","title","message","buttons","label","closeOnCllickOutside","closeOnEscape","gameName","username","password","newPassword","confirmPassword","isLoading","apiBase","process","request","post","send","r","response","body","success","active","spinner","htmlFor","onChange","disabled","updateAdminPassword","gameList","gameReducer","bindActionCreators","Users","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onBtStartEditing","key","char","pinned","setFocusedCell","startEditingCell","rowIndex","colKey","rowPinned","keyPress","charPress","clearState","selectedRow","isPopupOpen","organisationId","isDeleted","handleChange","selectedRoleCard","console","log","handleSequenceNumber","selectedSequence","onEditorStateChange","editorState","description","draftToMarkdown","convertToRaw","getCurrentContent","onUserRoleChange","newValue","actionMeta","action","selectedUserRole","organisation","onSalutationChange","selectedSalutation","onSelectionChanged","selectedRows","getSelectedRows","length","roleNameList","modules","AllModules","columnDefs","field","headerName","maxWidth","cellStyle","defaultColDef","flex","minWidth","sortable","resizable","autoHeight","getRowHeight","Math","floor","rowSelection","paginationPageSize","rowData","userRoleList","recentlyCreatedOrgUserId","actionType","confirm_password","usersFirstName","usersLastName","email","role","age","phone","website","addressId","salutation","SalutationList","onCreateUser","onAddEditUser","onDeleteUser","onEditUserName","loadUsers","get","set","localStorage","getItem","ResponsePacket","alert","random","name","closeOnClickOutside","patch","deleteUser","del","event","gameBoard","URL","createObjectURL","files","width","display","height","enableCellTextSelection","pagination","rowDeselection","isClearable","onInputChange","handleInputChange","options","padding","playerList","Countries","countryList","valueGetter","param","countryStatus","countryName","phoneCode","flag","onCreateCountry","onAddEditCountry","onDeleteCountry","onEditCountry","loadContries","deleteCountry","marginTop","States","onCountryChange","selectedCountry","countryId","stateList","stateStatus","stateName","onCreateState","onAddEditState","onDeleteState","onEditState","loadStates","find","x","deleteState","getOptionLabel","option","getOptionValue","Vendors","clearVendor","onEditorVendorChange","editorVendor","vendorList","vendorStatus","vendorName","onCreateVendor","onAddEditVendor","onDeleteVendor","onEditVendor","loadVendors","vendorCode","vendorDescription","vendorWeb","deleteVendor","vendor","Devices","onVendorChange","selectedVendor","vendorId","deviceStatus","deviceType","deviceDescription","deviceModel","onCreateDevice","onAddEditDevice","onDeleteDevice","onEditDevice","loadDevices","deleteDevice","Roles","clearRole","onEditorRoleChange","editorRole","roleName","roleStatus","roleOrgId","onCreateRole","onAddEditRole","onDeleteRole","onEditRole","loadRoles","roleDescription","deleteRole","roleList","RoleEntity","clearEntity","onEditorEntityChange","editorEntity","entityList","userEntityList","selectedUserEntity","entityName","entityStatus","onCreateEntity","onAddEditEntity","onDeleteEntity","onEditEntity","loadRoleEntity","entityDescription","deleteEntity","entity","Organization","clearOrganization","onEditorOrganizationChange","editorOrganization","userOrganizationList","selectedUserOrganization","orgName","orgCode","orgDescription","orgStatus","orgType","entityExport","orgEmail","onCreateOrganization","onAddEditOrganization","onDeleteOrganization","onEditOrganization","loadOrganizations","orgEmai","deleteOrganization","CategoriesType","clearCategoriesType","onEditorCategoriesTypeChange","editorCategoriesType","typeStatus","typeName","typeValue","typeDescription","typeOrder","typeDefault","onCreateCategoriesType","onAddEditCategoriesType","onDeleteCategoriesType","onEditCategoriesType","loadCategoriesType","deleteCategoriesType","Config","clearConfig","onEditorConfigChange","editorConfig","onChangeOrg","selectedOrg","orgId","configStatus","orgList","configName","configValue","onCreateConfig","onAddEditConfig","onDeleteConfig","onEditConfig","loadConfig","loadOrganization","deleteConfig","DeviceLog","clearDeviceLog","onEditorDeviceLogChange","editorDeviceLog","onChangeOrgDevice","selectedOrgDevice","orgDeviceId","deviceId","logDateTime","logMessage","logMessageType","logType","orgDeviceList","onCreateDeviceLog","onAddEditDeviceLog","onDeleteDeviceLog","onEditDeviceLog","loadDeviceLog","loadOrgDevices","deviceCode","deleteDeviceLog","JobLog","clearJobLog","onEditorJobLogChange","editorJobLog","onChangeJobMaster","selectedJobId","jobId","jobLogDateTime","jobLogMessage","jobMasterList","onCreateJobLog","onAddEditJobLog","onDeleteJobLog","onEditJobLog","loadJobLog","loadJobMaster","jobName","deleteJobLog","JobMaster","clearJobMaster","onEditorJobMasterChange","editorJobMaster","jobSchedule","jobType","jobConfig","onCreateJobMaster","onAddEditJobMaster","onDeleteJobMaster","onEditJobMaster","deleteJobMaster","OrgDevices","clearOrgDevice","onEditorOrgDeviceChange","editorOrgDevice","onChangeDevice","selectedDeviceId","deviceLocation","deviceIP","deviceCredentials","deviceConnectionType","deviceList","onCreateOrgDevice","onAddEditOrgDevice","onDeleteOrgDevice","onEditOrgDevice","deleteOrgDevice","orgDevice","Reports","clearReport","handleChangeUsers","selectedUser","userId","onEditorReportChange","editorReport","reportName","reportConfig","onCreateReport","onAddEditReport","onDeleteReport","onEditReport","loadReports","userList","deleteReport","report","RoleDetails","clearRoleDetail","onChangeRoleEntity","selectedRoleEntity","roleEntityId","onEditorRoleDetailChange","editorRoleDetail","roleDetailList","entityRead","entityAdd","entityUpdate","entityPrint","entityDelete","roleEntityList","onCreateRoleDetail","onAddEditRoleDetail","onDeleteRoleDetail","onEditRoleDetail","loadRoleDetails","deleteRoleDetail","roleDetail","UserRolesMapping","clearUserRolesMapping","handleChangeRoles","selectedRole","roleId","handleChangeOrg","onEditorUserRolesMappingChange","editorUserRolesMapping","UserRolesMappingList","onCreateUserRolesMapping","onAddEditUserRolesMapping","onDeleteUserRolesMapping","onEditUserRolesMapping","loadUserRolesMapping","loadUserRoles","deleteUserRolesMapping","Header","logout","setItem","window","location","reload","currentUserFromStore","src","alt","href","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","currentUser","gameDataFromStore","SideBar","data-widget","data-accordion","Footer","AdminContent","renderPage","Vendor","Device","RolesEntity","Login","loginWithTeam","token","history","push","error","placeholder","onLoginClick","AdminContainer","JSON","parse","initialDefaultState","Response","AppUserID","VendorID","UserTypeID","Email","UserType","Name","ProfileImage","CustomerID","OutletID","OutletName","DeviceToken","VehicleRegNumber","IsFirstTime","IsActivated","Status","Message","currentUserSetings","SettingID","Currency","DeliveryCharges","IsGST","GSTPercentage","IsLanguage2","Language2","initialState","currentUserSettings","teamList","gamePlayers","Players","isMeJoined","gameMoves","Moves","gameChats","Chats","numberOfPlayers","playerNames","gameSecret","isPlayerLoggedIn","currentUserPlayerID","currentUserCredentials","currentGameID","currentGameName","currentGameSetupData","currentMainTab","defaultRoleCards","DefaultRoleCards","defaultRoleNames","DefaultRoleNames","notificationsFromStore","players","result","i","isJoined","isLogin","credentials","OldArr","Plrs","playerID","plDT","playerData","tabData","notificationData","rootReducer","combineReducers","configureStore","createStore","applyMiddleware","thunk","store","App","exact","path","render","to","pattern","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1daa0a80.chunk.js","sourcesContent":["export const userConstants = {\n\n    USERLOGIN_REQUEST: 'USERLOGIN_REQUEST',\n    USERLOGIN_SUCCESS: 'USERLOGIN_SUCCESS',\n    USERLOGIN_FAILURE: 'USERLOGIN_FAILURE',\n\n    STORE_CURRENT_USER: 'STORE_CURRENT_USER',\n    STORE_CURRENT_USER_SETTINGS: 'STORE_CURRENT_USER_SETTINGS',\n\n    GET_CURRENT_USER_FROM_STORE: 'GET_CURRENT_USER_FROM_STORE',\n\n    UPDATE_TAB_DATA: 'UPDATE_TAB_DATA',\n\n}\n","export const gameConstants = {\n    PLAYER_LOGIN: 'PLAYER_LOGIN',\n\n    STORE_CURRENT_GAME_DETAILS: 'STORE_CURRENT_GAME_DETAILS',\n    STORE_CURRENT_PLAYER_CREDENTIALS: 'STORE_CURRENT_PLAYER_CREDENTIALS',\n\n    CREATE_NEW_GAME: 'CREATE_NEW_GAME',\n\n    UPDATE_CURRENT_PLAYER_ID: 'UPDATE_CURRENT_PLAYER_ID',\n\n    REMOVE_CURRENT_PLAYER_ID: 'REMOVE_CURRENT_PLAYER_ID',\n\n    SET_TAB_TO_STORE: 'SET_TAB_TO_STORE',\n\n    SET_GAME_PLAYER: 'SET_GAME_PLAYER',\n\n    SET_NOTIFICATION_TO_STORE: 'SET_NOTIFICATION_TO_STORE'\n}\n","import { userConstants } from '../constants'\nimport { userService } from '../services'\n\n// export function UserLogin(tdata) {\n//     return dispatch => {\n//         // dispatch(loaderActions.showLoader());\n//         dispatch(request())\n//         userService.UserLogin(tdata)\n//             .then(\n//                 data => {                 \n//                     dispatch(success(data))\n//                 },\n//                 error => {\n//                     dispatch(failure(error))\n//                 }\n//             )\n//     }\n//     function request() { return { type: userConstants.USERLOGIN_REQUEST } }\n//     function success(data) { return { type: userConstants.USERLOGIN_SUCCESS, data } }\n//     function failure(error) { return { type: userConstants.USERLOGIN_FAILURE, error } }\n// }\n\nexport const currentUser = (user) => {\n    return {\n        type: userConstants.CURRENT_USER,\n        user: user,\n    }\n}\n\nexport const storeCurrentUser = (currentUser) => {\n    return {\n        type: userConstants.STORE_CURRENT_USER,\n        currentUser: currentUser,\n    }\n}\n\nexport const storeCurrentUserSettings = (currentUserSettings) => {\n    return {\n        type: userConstants.STORE_CURRENT_USER_SETTINGS,\n        currentUserSettings: currentUserSettings,\n    }\n}\n\n\n\n\nexport const getCurrentUserFromStore = (currentUser) => {\n    return {\n        type: userConstants.GET_CURRENT_USER_FROM_STORE,\n        currentUser: currentUser,\n    }\n}\n\nexport const updateTabNavigation = (tabSettings) => {\n    return {\n        type: userConstants.UPDATE_TAB_DATA,\n        tabSettings: tabSettings,\n    }\n}\n\n","import { gameConstants } from '../constants'\n\n\nexport const playerLogin = (islogin) => {\n    return {\n        type: gameConstants.PLAYER_LOGIN,\n        isLogin: islogin,\n    }\n}\n\n\nexport const createNewGame = (gameData) => {\n    return {\n        type: gameConstants.CREATE_NEW_GAME,\n        gameData: gameData,\n    }\n}\n\nexport const updateCurrentPlayerID = (playerid) => {\n    return {\n        type: gameConstants.UPDATE_CURRENT_PLAYER_ID,\n        playerID: playerid,\n    }\n}\n\nexport const removeCurrentPlayerID = (playerid) => {\n    return {\n        type: gameConstants.REMOVE_CURRENT_PLAYER_ID,\n        playerID: playerid,\n    }\n}\n\nexport const storeCurrentGameDetails = (gameData) => {\n    return {\n        type: gameConstants.STORE_CURRENT_GAME_DETAILS,\n        gameData: gameData,\n    }\n}\n\nexport const storeCurrentPlayerCredentials = (credentials) => {\n    return {\n        type: gameConstants.STORE_CURRENT_PLAYER_CREDENTIALS,\n        credentials: credentials,\n    }\n}\n\nexport const setTabToStore = (data) => {\n    return {\n        type: gameConstants.SET_TAB_TO_STORE,\n        tabData: data,\n    }\n}\n\nexport const setGamePlayerToStore = (data) => {\n    return {\n        type: gameConstants.SET_GAME_PLAYER,\n        playerData: data,\n    }\n}\n\nexport const setNotificationToStore = (data) => {\n    return {\n        type: gameConstants.SET_NOTIFICATION_TO_STORE,\n        notificationData: data,\n    }\n}\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\n\nclass Dashboard extends Component {\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabNames } = this.props\n        return (\n            <div className=\"card\" style={{ paddingTop: '20px' }}>\n                <section className=\"container-fluid \">\n                    <div className=\"row\">\n                        {\n                            tabNames.map((val, indx) => {\n                                return (\n                                    <div className=\"col-lg-2 col-6\">\n                                        <div className=\"small-box bg-info\">\n                                            <div className=\"inner\">\n                                                <h3 style={{ color: 'transparent' }}>-</h3>\n                                                <h5>{tabNames[indx]}</h5>\n                                            </div>\n                                            <div className=\"icon\">\n                                                <i className=\"ion ion-bag\"></i>\n                                            </div>\n                                            <a onClick={this.onClickTab.bind(this, tabNames[indx])} className=\"small-box-footer\">More info <i className=\"fas fa-arrow-circle-right\"></i></a>\n                                        </div>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { createNewGame } from '../store/actions'\nimport { bindActionCreators } from 'redux';\nimport request from 'superagent';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameName: 'NCM',\n            username: 'admin',\n            password: '',\n            newPassword: '',\n            confirmPassword: '',\n\n            isLoading: false\n        }\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    async updateAdminPassword() {\n\n        if (this.state.newPassword != this.state.confirmPassword) {\n            this.showAlert(\"New password and confirm password do not match!!\")\n            return\n        }\n        this.setState({\n            isLoading: true\n        })\n        const r = await request.post(`${this.apiBase}/updateAdmin`)\n            .send({\n                username: this.state.username,\n                password: this.state.password,\n                newPassword: this.state.newPassword\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                password: '',\n                newPassword: '',\n                confirmPassword: ''\n            }, () => {\n                this.showAlert(response.message)\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                this.showAlert(response.message)\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    showAlert = (msg) => {\n        confirmAlert({\n            title: 'Login',\n            message: msg,\n            buttons: [\n                {\n                    label: 'Ok',\n                    onClick: () => {\n                        // this.props.undo()\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n\n    render() {\n        return (\n            <LoadingOverlay active={this.state.isLoading} spinner >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body py-5\">\n                                    <div>\n                                        {/* <div className=\"text-center\">\n                                        <img className=\"profile-user-img img-fluid img-circle\"\n                                            src=\"../../dist/img/user4-128x128.jpg\"\n                                            alt=\"User profile picture\" />\n                                    </div> */}\n                                        <h1 className=\"profile-username text-center\">Change Admin Password</h1>\n                                        <br />\n                                        {/* <p className=\"text-muted text-center\">Admin</p> */}\n                                    </div>\n                                    <div className=\"row justify-content-center\" >\n                                        <div className=\"col-md-6\" >\n                                            {/* <div className=\"form-group\">\n                                            <label htmlFor=\"Username\">Username</label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"username\" value={this.state.username} className=\"form-control\" />\n                                        </div> */}\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"emailAddress\">Current Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"password\" value={this.state.password} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"emailAddress\">New Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"newPassword\" value={this.state.newPassword} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"emailAddress\">Confirm New Password</label>\n                                                <input type=\"password\" onChange={this.onTextChange} id=\"confirmPassword\" value={this.state.confirmPassword} className=\"form-control\" />\n                                            </div>\n                                            <div className=\"form-group\" >\n                                                <button disabled={true} type=\"button\" className=\"btn btn-success float-right\" onClick={this.updateAdminPassword.bind(this)} >Submit</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return { gameList: state.gameReducer.gameList }\n}\n\nconst mapDispatchToProps = dispatch => {\n    // createNewGame: (data) => { dispatch(createNewGame(data)) },\n    return bindActionCreators({ createNewGame: createNewGame }, dispatch);\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Settings)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Users extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            roleNameList: [],\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'id',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'username',\n                    headerName: 'Username',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'usersFirstName',\n                    headerName: 'FirstName',\n                    maxWidth: 150\n                },\n                {\n                    field: 'usersLastName',\n                    headerName: 'LastName',\n                    maxWidth: 150,\n                },\n                {\n                    field: 'role',\n                    headerName: 'Role',\n                    cellStyle: { 'white-space': 'normal' },\n                    maxWidth: 150\n                },\n                {\n                    field: 'email',\n                    headerName: 'Email Address',\n                    cellStyle: { 'white-space': 'normal' }\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            organisation: '',\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            username: \"\",\n            password: \"\",\n            confirm_password: \"\",\n            usersFirstName: \"\",\n            usersLastName: \"\",\n            email: \"\",\n            role: \"\",\n            age: \"\",\n            phone: \"\",\n            website: \"\",\n            addressId: \"\",\n            salutation: \"\",\n            selectedSalutation: null,\n            SalutationList: [{ label: 'Mr.', value: 'Mr.' }, { label: 'Mrs.', value: 'Mrs.' }]\n        }\n        this.onCreateUser = this.onCreateUser.bind(this)\n        this.onAddEditUser = this.onAddEditUser.bind(this)\n        this.onDeleteUser = this.onDeleteUser.bind(this)\n        this.onEditUserName = this.onEditUserName.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadUsers()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    roleNameList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.roleNameList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateUser() {\n        const { selectedUserRole, selectedSequence,\n            username,\n            password,\n            confirm_password,\n            usersFirstName,\n            usersLastName,\n            email,\n            role,\n            age,\n            phone,\n            website,\n            addressId,\n            salutation,\n            selectedSalutation\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'users')\n            .send({\n                username: usersFirstName + Math.floor(Math.random() * 23434),\n                password: password,\n                confirm_password: password,\n                usersFirstName: usersFirstName,\n                usersLastName: usersLastName,\n                email: email,\n                role: role,\n                age: 20,\n                phone: phone,\n                website: website,\n                addressId: addressId,\n                salutation: selectedSalutation.value,\n                isDeleted: false\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                name: \"\",\n                organisationId: \"\",\n                description: \"\",\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditUserName() {\n        const {\n            selectedUserRole,\n            selectedSequence,\n            selectedRow,\n            id,\n            usersFirstName,\n            usersLastName,\n            email,\n            phone,\n            website,\n            salutation,\n            addressId,\n            password,\n            username,\n            role,\n            confirm_password,\n            age,\n            selectedSalutation\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'users/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                password: 'test@123',\n                confirm_password: 'test@123',\n                usersFirstName,\n                usersLastName,\n                email,\n                role,\n                age,\n                phone,\n                website,\n                addressId,\n                salutation: selectedSalutation.value,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'User',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'User',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditUser(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update User',\n                    id: selectedRow.id,\n                    usersFirstName: selectedRow.usersFirstName,\n                    usersLastName: selectedRow.usersLastName,\n                    email: selectedRow.email,\n                    phone: selectedRow.phone,\n                    website: selectedRow.website,\n                    selectedSalutation: { label: selectedRow.salutation, value: selectedRow.salutation },\n                    addressId: selectedRow.addressId,\n                    username: selectedRow.username,\n                    role: selectedRow.role,\n                    age: selectedRow.age\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    id: '',\n                    selectedUserRole: null,\n                    selectedSequence: null,\n                    isDeleted: false,\n                    actionType: 'Add User',\n                    usersFirstName: \"\",\n                    usersLastName: \"\",\n                    email: \"\",\n                    phone: \"\",\n                    website: \"\",\n                    selectedSalutation: null,\n                    addressId: \"\",\n                    password: \"\",\n                    username: \"\",\n                    role: \"Admin\",\n                    confirm_password: \"\",\n                    age: 21\n                })\n            }\n        }\n    }\n\n    async onDeleteUser() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete RoleName',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.usersFirstName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteUser()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteUser() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'users/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                name: \"\",\n                organisationId: \"\",\n                description: \"\",\n                isLoading: false,\n                selectedRow: null\n            }, () => {\n                this.loadUsers()\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Users',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onUserRoleChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedUserRole: newValue,\n                organisation: newValue.label,\n            })\n        }\n    }\n\n    onSalutationChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedSalutation: newValue,\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { roleNameList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteUser}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditUser.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditUser.bind(this, 'add')}\n                                         >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>                                  \n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"Salutation\">Salutation</label>\n                                        <CreatableSelect\n                                            isClearable\n                                            value={this.state.selectedSalutation}\n                                            onChange={this.onSalutationChange}\n                                            onInputChange={this.handleInputChange}\n                                            options={this.state.SalutationList}\n                                        />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"UserRole\">User Role</label>\n                                        <CreatableSelect\n                                            isClearable\n                                            value={this.state.selectedUserRole}\n                                            onChange={this.onUserRoleChange}\n                                            onInputChange={this.handleInputChange}\n                                            options={this.state.userRoleList}\n                                        />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"usersFirstName\">First Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"usersFirstName\" value={this.state.usersFirstName} className=\"form-control\" />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"usersLastName\">Last Name </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"usersLastName\" value={this.state.usersLastName} className=\"form-control\" />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">Email Address </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"email\" value={this.state.email} className=\"form-control\" />\n                                    </div>\n                                    {\n                                        this.state.actionType == 'Add User' &&\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"password\">Password </label>\n                                            <input type=\"password\" onChange={this.onTextChange} id=\"password\" value={this.state.password} className=\"form-control\" />\n                                        </div>\n                                    }\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"phone\">Phone </label>\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"phone\" value={this.state.phone} className=\"form-control\" />\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearState()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update User' ? this.onEditUserName : this.onCreateUser}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    roleNameList: state.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Users)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Countries extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            countryList: [],\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Country Id',\n                },\n                {\n                    field: 'countryName',\n                    headerName: 'Country Name',\n                },\n                {\n                    field: 'countryStatus',\n                    headerName: 'Country Status',\n                    valueGetter: function (param) {\n                        return param.data.countryStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'phoneCode',\n                    headerName: 'Phone Code',\n\n                },\n                {\n                    field: 'flag',\n                    headerName: 'Flag',\n                }\n\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            countryName: \"\",\n            countryStatus: \"\",\n            phoneCode: \"\",\n            flag: \"\",\n\n        }\n        this.onCreateCountry = this.onCreateCountry.bind(this)\n        this.onAddEditCountry = this.onAddEditCountry.bind(this)\n        this.onDeleteCountry = this.onDeleteCountry.bind(this)\n        this.onEditCountry = this.onEditCountry.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadContries()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadContries() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'countries')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    countryList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.countryList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateCountry() {\n        const {\n            countryName,\n            countryStatus,\n            phoneCode,\n            flag\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'countries')\n            .send({\n                countryName,\n                countryStatus,\n                phoneCode,\n                flag\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                countryName: '',\n                countryStatus: 0,\n                phoneCode: '',\n                flag: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditCountry() {\n        const {\n            selectedRow,\n            id,\n            countryName,\n            countryStatus,\n            phoneCode,\n            flag\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'countries/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                countryName,\n                countryStatus,\n                phoneCode,\n                flag\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Countries',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditCountry(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Country',\n                    id: selectedRow.id,\n                    countryName: selectedRow.countryName,\n                    countryStatus: selectedRow.countryStatus,\n                    phoneCode: selectedRow.phoneCode,\n                    flag: selectedRow.flag\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Country',\n                    id: null,\n                    countryName: '',\n                    countryStatus: '',\n                    phoneCode: '',\n                    flag: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteCountry() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Country',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.countryName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteCountry()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteCountry() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'countries/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                countryName: '',\n                countryStatus: '',\n                phoneCode: '',\n                flag: '',\n                selectedRow: null\n            }, () => {\n                this.loadContries()\n                confirmAlert({\n                    title: 'Country',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Country',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { countryList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                  <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteCountry}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditCountry.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditCountry.bind(this, 'add')}\n                                         >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"countryName\">Country Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"countryName\" value={this.state.countryName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"countryStatus\">Country Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"countryStatus\" value={this.state.countryStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"phoneCode\">Phone Code </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"phoneCode\" value={this.state.phoneCode} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"flag\">Flag </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"flag\" value={this.state.flag} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearState()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Country' ? this.onEditCountry : this.onCreateCountry}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n                  \n                 \n                 \n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    countryList: state.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Countries)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass States extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            stateList: [],\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Id',\n                },\n                {\n                    field: 'countryName',\n                    headerName: 'Country',\n                },\n                {\n                    field: 'stateName',\n                    headerName: 'State Name',\n                },\n                {\n                    field: 'stateStatus',\n                    headerName: 'State Status',\n                    valueGetter: function (param) {\n                        return param.data.stateStatus == 0 ? 'InActive' : 'Active'\n                    },\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            stateName: \"\",\n            stateStatus: \"\",\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateState = this.onCreateState.bind(this)\n        this.onAddEditState = this.onAddEditState.bind(this)\n        this.onDeleteState = this.onDeleteState.bind(this)\n        this.onEditState = this.onEditState.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadStates()\n        this.loadContries()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadStates() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'states')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    stateList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.stateList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadContries() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'countries')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    countryList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateState() {\n        const {\n            stateName,\n            stateStatus,\n            countryId\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'states')\n            .send({\n                stateName,\n                stateStatus,\n                countryId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                stateName: '',\n                stateStatus: 0,\n                countryId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditState() {\n        const {\n            selectedRow,\n            id,\n            stateName,\n            stateStatus,\n            countryId,\n            selectedCountry\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'states/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                stateName,\n                stateStatus,\n                countryId: selectedCountry.id\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'States',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditState(type) {\n        const { selectedRow, countryList } = this.state\n\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update State',\n                    id: selectedRow.id,\n                    stateName: selectedRow.stateName,\n                    stateStatus: selectedRow.stateStatus,\n                    countryId: selectedRow.countryId,\n                    selectedCountry: { id: selectedRow.countryId, countryName: countryList.find(x => x.id === selectedRow.countryId).countryName }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add State',\n                    id: null,\n                    stateName: '',\n                    stateStatus: '',\n                    countryId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteState() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete State',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.stateName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteState()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteState() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'states/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                stateName: '',\n                stateStatus: '',\n                countryId: null,\n                selectedRow: null\n            }, () => {\n                this.loadStates()\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n                countryId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { stateList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteState}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditState.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditState.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"Country\">Country</label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"country\"}\n                                                value={this.state.selectedCountry}\n                                                onChange={this.onCountryChange}\n                                                options={this.state.countryList}\n                                                getOptionLabel={(option) => option.countryName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"stateName\">State Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"stateName\" value={this.state.stateName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"stateStatus\">State Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"stateStatus\" value={this.state.stateStatus} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearState()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update State' ? this.onEditState : this.onCreateState}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    stateList: state.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(States)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Vendors extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Vendor Id',\n                },\n                {\n                    field: 'vendorCode',\n                    headerName: 'Vendor Code',\n                },\n                {\n                    field: 'vendorName',\n                    headerName: 'Vendor Name',\n                },\n                {\n                    field: 'vendorStatus',\n                    headerName: 'Vendor Status',\n                    valueGetter: function (param) {\n                        return param.data.vendorStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'vendorWeb',\n                    headerName: 'Vendor Web',\n                },\n                {\n                    field: 'vendorDescription',\n                    headerName: 'Vendor Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorVendor: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            vendorName: \"\",\n            vendorStatus: \"\",\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateVendor = this.onCreateVendor.bind(this)\n        this.onAddEditVendor = this.onAddEditVendor.bind(this)\n        this.onDeleteVendor = this.onDeleteVendor.bind(this)\n        this.onEditVendor = this.onEditVendor.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadVendors()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadVendors() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'vendors')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    vendorList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.vendorList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateVendor() {\n        const {\n            vendorCode,\n            vendorName,\n            vendorDescription,\n            vendorWeb,\n            vendorStatus\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'vendors')\n            .send({\n                vendorCode,\n                vendorName,\n                vendorDescription,\n                vendorWeb,\n                vendorStatus\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                vendorCode: '',\n                vendorName: '',\n                vendorDescription: '',\n                vendorWeb: '',\n                vendorStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditVendor() {\n        const {\n            selectedRow,\n            id,\n            vendorCode,\n            vendorName,\n            vendorDescription,\n            vendorWeb,\n            vendorStatus\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'vendors/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                vendorCode,\n                vendorName,\n                vendorDescription,\n                vendorWeb,\n                vendorStatus\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendors',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearVendor = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditVendor(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Vendor',\n                    id: selectedRow.id,\n                    vendorCode: selectedRow.vendorCode,\n                    vendorName: selectedRow.vendorName,\n                    vendorDescription: selectedRow.vendorDescription,\n                    vendorWeb: selectedRow.vendorDescription,\n                    vendorStatus: selectedRow.vendorDescription\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Vendor',\n                    id: null,\n                    vendorCode: '',\n                    vendorName: '',\n                    vendorDescription: '',\n                    vendorWeb: '',\n                    vendorStatus: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteVendor() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Vendor',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.vendorName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteVendor()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteVendor() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'vendors/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                vendorName: '',\n                vendorStatus: '',\n                countryId: null,\n                selectedRow: null\n            }, () => {\n                this.loadVendors()\n                confirmAlert({\n                    title: 'Vendor',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Vendor',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorVendorChange = (editorVendor) => {\n        this.setState({\n            editorVendor,\n            description: editorVendor && draftToMarkdown(convertToRaw(editorVendor.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteVendor}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditVendor.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditVendor.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearVendor()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"vendorCode\">Vendor Code </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"vendorCode\" value={this.state.vendorCode} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"vendorName\">Vendor Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"vendorName\" value={this.state.vendorName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"vendorWeb\">Vendor Web </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"vendorWeb\" value={this.state.vendorWeb} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"vendorStatus\">Vendor Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"vendorStatus\" value={this.state.vendorStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"vendorDescription\">Vendor Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"vendorDescription\" value={this.state.vendorDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearVendor()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Vendor' ? this.onEditVendor : this.onCreateVendor}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapVendorToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapVendorToProps,\n    mapDispatchToProps\n)(Vendors)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Devices extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedRoleCard: null,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Device Id',\n                },\n                {\n                    field: 'vendorName',\n                    headerName: 'Vendor',\n                },\n                {\n                    field: 'deviceType',\n                    headerName: 'Device Type',\n                },\n                {\n                    field: 'deviceModel',\n                    headerName: 'Device Model',\n                },\n                {\n                    field: 'deviceStatus',\n                    headerName: 'Device Status',\n                    valueGetter: function (param) {\n                        return param.data.deviceStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'deviceDescription',\n                    headerName: 'Device Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorState: null,\n            isPopupOpen: false,\n            actionType: null,\n\n            deviceType: \"\",\n            vendorId: null,\n            deviceDescription: \"\",\n            deviceModel: \"\",\n            deviceStatus: \"\",\n\n            selectedVendor: null,\n            vendorList: []\n\n        }\n        this.onCreateDevice = this.onCreateDevice.bind(this)\n        this.onAddEditDevice = this.onAddEditDevice.bind(this)\n        this.onDeleteDevice = this.onDeleteDevice.bind(this)\n        this.onEditDevice = this.onEditDevice.bind(this)\n\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadDevices()\n        this.loadVendors()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadVendors() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'vendors')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    vendorList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n\n    }\n\n    async onCreateDevice() {\n        const {\n            deviceType,\n            vendorId,\n            deviceDescription,\n            deviceModel,\n            deviceStatus,\n            selectedVendor\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'devices')\n            .send({\n                deviceType,\n                deviceDescription,\n                deviceModel,\n                deviceStatus,\n                vendorId: selectedVendor.value\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                deviceType: '',\n                deviceDescription: '',\n                deviceModel: '',\n                deviceStatus: '',\n                vendorId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditDevice() {\n        const {\n            selectedRow,\n            id,\n            deviceType,\n            deviceDescription,\n            deviceModel,\n            deviceStatus,\n            vendorId,\n            selectedVendor\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'devices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                deviceType,\n                deviceDescription,\n                deviceModel,\n                deviceStatus,\n                vendorId: selectedVendor.value\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Devices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearState = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditDevice(type) {\n        const { selectedRow, vendorList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Device',\n                    id: selectedRow.id,\n                    deviceType: selectedRow.deviceType,\n                    deviceDescription: selectedRow.deviceDescription,\n                    deviceModel: selectedRow.deviceModel,\n                    deviceStatus: selectedRow.deviceStatus,\n                    vendorId: selectedRow.vendorId,\n                    selectedVendor: { id: selectedRow.vendorId, vendorName: vendorList.find(x => x.id === selectedRow.vendorId).vendorName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Device',\n                    id: null,\n                    deviceType: '',\n                    deviceDescription: '',\n                    deviceModel: '',\n                    deviceStatus: '',\n                    vendorId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteDevice() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Device',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.deviceType + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteDevice()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteDevice() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'devices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                deviceType: '',\n                deviceDescription: '',\n                deviceModel: '',\n                deviceStatus: '',\n                vendorId: null,\n                selectedRow: null\n            }, () => {\n                this.loadDevices()\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'State',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChange = selectedRoleCard => {\n        this.setState(\n            { selectedRoleCard },\n            () => console.log(`Option selected:`, this.state.selectedRoleCard)\n        );\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            description: editorState && draftToMarkdown(convertToRaw(editorState.getCurrentContent())),\n        })\n    }\n\n    onVendorChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedVendor: newValue,\n                vendorId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteDevice}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditDevice.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditDevice.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearState()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"Vendor\">Vendor</label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"country\"}\n                                                value={this.state.selectedVendor}\n                                                onChange={this.onVendorChange}\n                                                options={vendorList}\n                                                getOptionLabel={(option) => option.vendorName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceType\">Device Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceType\" value={this.state.deviceType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceModel\">Device Model </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceModel\" value={this.state.deviceModel} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceStatus\">Device Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceStatus\" value={this.state.deviceStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceDescription\">Device Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"deviceDescription\" value={this.state.deviceDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearState()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Device' ? this.onEditDevice : this.onCreateDevice}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Devices)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Roles extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Role Id',\n                },\n                {\n                    field: 'roleName',\n                    headerName: 'Role Name',\n                },\n                {\n                    field: 'roleDescription',\n                    headerName: 'Role Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorRole: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            roleName: \"\",\n            roleStatus: \"\",\n            roleOrgId: 1,\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateRole = this.onCreateRole.bind(this)\n        this.onAddEditRole = this.onAddEditRole.bind(this)\n        this.onDeleteRole = this.onDeleteRole.bind(this)\n        this.onEditRole = this.onEditRole.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadRoles()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadRoles() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roles')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateRole() {\n        const {\n            roleName,\n            roleDescription,\n            roleOrgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roles')\n            .send({\n                roleName,\n                roleDescription,\n                roleOrgId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                roleName: '',\n                roleDescription: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditRole() {\n        const {\n            selectedRow,\n            id,\n            roleName,\n            roleOrgId,\n            roleDescription,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roles/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                roleName,\n                roleDescription,\n                roleOrgId\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Roles',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearRole = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditRole(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Role',\n                    id: selectedRow.id,\n                    roleName: selectedRow.roleName,\n                    roleDescription: selectedRow.roleDescription,\n                    roleOrgId: selectedRow.roleOrgId\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Role',\n                    id: null,\n                    roleName: '',\n                    roleDescription: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteRole() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Role',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.roleName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteRole()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteRole() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'roles/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                roleName: '',\n                roleDescription: '',\n                selectedRow: null\n            }, () => {\n                this.loadRoles()\n                confirmAlert({\n                    title: 'Role',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Role',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorRoleChange = (editorRole) => {\n        this.setState({\n            editorRole,\n            description: editorRole && draftToMarkdown(convertToRaw(editorRole.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteRole}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditRole.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditRole.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearRole()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"roleName\">Role Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"roleName\" value={this.state.roleName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"roleDescription\">Role Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"roleDescription\" value={this.state.roleDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearRole()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Role' ? this.onEditRole : this.onCreateRole}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapRoleToProps = role => ({\n    tabSettings: role.userReducer.tabSettings,\n    roleList: role.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapRoleToProps,\n    mapDispatchToProps\n)(Roles)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass RoleEntity extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            entityList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Entity Id',\n                },\n                {\n                    field: 'entityName',\n                    headerName: 'Entity Name',\n                },\n                {\n                    field: 'entityDescription',\n                    headerName: 'Entity Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorEntity: null,\n            userEntityList: [],\n            selectedUserEntity: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            entityName: \"\",\n            entityStatus: \"\",\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateEntity = this.onCreateEntity.bind(this)\n        this.onAddEditEntity = this.onAddEditEntity.bind(this)\n        this.onDeleteEntity = this.onDeleteEntity.bind(this)\n        this.onEditEntity = this.onEditEntity.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadRoleEntity()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadRoleEntity() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roleentities')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    entityList: response.ResponsePacket,\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                }, () => {\n                    console.log(this.state.entityList)\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateEntity() {\n        const {\n            entityName,\n            entityDescription,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roleentities')\n            .send({\n                entityName,\n                entityDescription,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                entityName: '',\n                entityDescription: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditEntity() {\n        const {\n            selectedRow,\n            id,\n            entityName,\n            entityDescription,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roleentities/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                entityName,\n                entityDescription\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearEntity = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditEntity(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Entity',\n                    id: selectedRow.id,\n                    entityName: selectedRow.entityName,\n                    entityDescription: selectedRow.entityDescription\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Entity',\n                    id: null,\n                    entityName: '',\n                    entityDescription: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteEntity() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Entity',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.entityName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteEntity()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteEntity() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'roleentities/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                entityName: '',\n                entityDescription: '',\n                selectedRow: null\n            }, () => {\n                this.loadRoleEntity()\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Entity',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorEntityChange = (editorEntity) => {\n        this.setState({\n            editorEntity,\n            description: editorEntity && draftToMarkdown(convertToRaw(editorEntity.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { entityList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteEntity}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditEntity.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditEntity.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearEntity()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"EntityNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityName\">Entity Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityName\" value={this.state.entityName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityDescription\">Entity Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"entityDescription\" value={this.state.entityDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearEntity()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Entity' ? this.onEditEntity : this.onCreateEntity}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapEntityToProps = entity => ({\n    tabSettings: entity.userReducer.tabSettings,\n    entityList: entity.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapEntityToProps,\n    mapDispatchToProps\n)(RoleEntity)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Organization extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            roleList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Organization Id',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Name',\n                },\n                {\n                    field: 'orgCode',\n                    headerName: 'Organization Code',\n                },\n                {\n                    field: 'orgEmail',\n                    headerName: 'Email',\n                },\n                {\n                    field: 'orgStatus',\n                    headerName: 'Status',\n                },\n                {\n                    field: 'orgType',\n                    headerName: 'Organization Type',\n                },\n                {\n                    field: 'entityExport',\n                    headerName: 'Entity Export',\n                },\n                {\n                    field: 'orgDescription',\n                    headerName: 'Description',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorOrganization: null,\n            userOrganizationList: [],\n            selectedUserOrganization: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            orgName: '',\n            orgCode: '',\n            orgDescription: '',\n            orgStatus: null,\n            orgType: '',\n            entityExport: '',\n            orgEmail: ''\n\n        }\n        this.onCreateOrganization = this.onCreateOrganization.bind(this)\n        this.onAddEditOrganization = this.onAddEditOrganization.bind(this)\n        this.onDeleteOrganization = this.onDeleteOrganization.bind(this)\n        this.onEditOrganization = this.onEditOrganization.bind(this)\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadOrganizations()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadOrganizations() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateOrganization() {\n        const {\n            orgName,\n            orgCode,\n            orgDescription,\n            orgStatus,\n            orgType,\n            entityExport,\n            orgEmail\n        } = this.state\n\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'organizations')\n            .send({\n                orgName,\n                orgCode,\n                orgDescription,\n                orgStatus,\n                orgType,\n                entityExport,\n                orgEmail\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                orgName: '',\n                orgCode: '',\n                orgDescription: '',\n                orgStatus: null,\n                orgType: '',\n                entityExport: '',\n                orgEmail: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditOrganization() {\n        const {\n            selectedRow,\n            id,\n            orgName,\n            orgCode,\n            orgDescription,\n            orgStatus,\n            orgType,\n            entityExport,\n            orgEmail\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'organizations/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                orgName,\n                orgCode,\n                orgDescription,\n                orgStatus,\n                orgType,\n                entityExport,\n                orgEmail\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organizations',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearOrganization = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditOrganization(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Organization',\n                    id: selectedRow.id,\n                    orgName: selectedRow.orgName,\n                    orgCode: selectedRow.orgCode,\n                    orgDescription: selectedRow.orgDescription,\n                    orgStatus: selectedRow.orgStatus,\n                    orgType: selectedRow.orgType,\n                    entityExport: selectedRow.entityExport,\n                    orgEmai: selectedRow.orgEmail\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Organization',\n                    id: null,\n                    orgName: '',\n                    orgCode: '',\n                    orgDescription: '',\n                    orgStatus: null,\n                    orgType: '',\n                    entityExport: '',\n                    orgEmail: ''\n                })\n            }\n        }\n    }\n\n    async onDeleteOrganization() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Organization',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.orgName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteOrganization()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteOrganization() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'organizations/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                orgName: '',\n                orgCode: '',\n                orgDescription: '',\n                orgStatus: null,\n                orgType: '',\n                entityExport: '',\n                orgEmail: '',\n                selectedRow: null\n            }, () => {\n                this.loadOrganizations()\n                confirmAlert({\n                    title: 'Organization',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Organization',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorOrganizationChange = (editorOrganization) => {\n        this.setState({\n            editorOrganization,\n            description: editorOrganization && draftToMarkdown(convertToRaw(editorOrganization.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { roleList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteOrganization}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditOrganization.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditOrganization.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearOrganization()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"OrganizationNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgName\">Organization Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"orgName\" value={this.state.orgName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgCode\">Organization Code </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"orgCode\" value={this.state.orgCode} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgStatus\">Organization Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"orgStatus\" value={this.state.orgStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgType\">Organization Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"orgType\" value={this.state.orgType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityExport\">Entity Export </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityExport\" value={this.state.entityExport} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgEmail\">Organization Email </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"orgEmail\" value={this.state.orgEmail} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgDescription\">Organization Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"orgDescription\" value={this.state.orgDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearOrganization()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Organization' ? this.onEditOrganization : this.onCreateOrganization}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapOrganizationToProps = role => ({\n    tabSettings: role.userReducer.tabSettings,\n    roleList: role.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapOrganizationToProps,\n    mapDispatchToProps\n)(Organization)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass CategoriesType extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Type Id',\n                },\n                {\n                    field: 'typeValue',\n                    headerName: 'Type Value',\n                },\n                {\n                    field: 'typeDescription',\n                    headerName: 'Description',\n                },\n                {\n                    field: 'typeStatus',\n                    headerName: 'CategoriesType Status',\n                    valueGetter: function (param) {\n                        return param.data.typeStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'typeOrder',\n                    headerName: 'Type Order',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorCategoriesType: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            typeName: '',\n            typeValue: '',\n            typeDescription: '',\n            typeOrder: '',\n            typeDefault: '',\n            typeStatus: '',\n            countryId: null,\n            selectedCountry: null,\n            countryList: []\n\n        }\n        this.onCreateCategoriesType = this.onCreateCategoriesType.bind(this)\n        this.onAddEditCategoriesType = this.onAddEditCategoriesType.bind(this)\n        this.onDeleteCategoriesType = this.onDeleteCategoriesType.bind(this)\n        this.onEditCategoriesType = this.onEditCategoriesType.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadCategoriesType()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadCategoriesType() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'categoriestype')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateCategoriesType() {\n        const {\n            typeName,\n            typeValue,\n            typeDescription,\n            typeOrder,\n            typeDefault,\n            typeStatus\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'categoriestype')\n            .send({\n                typeName,\n                typeValue,\n                typeDescription,\n                typeOrder,\n                typeDefault,\n                typeStatus\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                typeName: '',\n                typeValue: '',\n                typeDescription: '',\n                typeOrder: '',\n                typeDefault: '',\n                typeStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditCategoriesType() {\n        const {\n            selectedRow,\n            id,\n            typeName,\n            typeValue,\n            typeDescription,\n            typeOrder,\n            typeDefault,\n            typeStatus\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'categoriestype/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                typeName,\n                typeValue,\n                typeDescription,\n                typeOrder,\n                typeDefault,\n                typeStatus\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearCategoriesType = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditCategoriesType(type) {\n        const { selectedRow } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update CategoriesType',\n                    id: selectedRow.id,\n                    typeName: selectedRow.typeName,\n                    typeValue: selectedRow.typeValue,\n                    typeDescription: selectedRow.typeDescription,\n                    typeOrder: selectedRow.typeOrder,\n                    typeDefault: selectedRow.typeDefault,\n                    typeStatus: selectedRow.typeStatus\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add CategoriesType',\n                    id: null,\n                    typeName: '',\n                    typeValue: '',\n                    typeDescription: '',\n                    typeOrder: '',\n                    typeDefault: '',\n                    typeStatus: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteCategoriesType() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete CategoriesType',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.vendorName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteCategoriesType()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteCategoriesType() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'categoriestype/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                typeName: '',\n                typeValue: '',\n                typeDescription: '',\n                typeOrder: '',\n                typeDefault: '',\n                typeStatus: '',\n                selectedRow: null\n            }, () => {\n                this.loadCategoriesType()\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'CategoriesType',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorCategoriesTypeChange = (editorCategoriesType) => {\n        this.setState({\n            editorCategoriesType,\n            description: editorCategoriesType && draftToMarkdown(convertToRaw(editorCategoriesType.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteCategoriesType}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditCategoriesType.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditCategoriesType.bind(this, 'add')}\n                                         >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearCategoriesType()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeName\">Type Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"typeName\" value={this.state.typeName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeValue\">Type Value </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"typeValue\" value={this.state.typeValue} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeOrder\">Type Order </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"typeOrder\" value={this.state.typeOrder} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeDefault\">Type Default </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"typeDefault\" value={this.state.typeDefault} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeStatus\">Type Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"typeStatus\" value={this.state.typeStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"typeDescription\">Type Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"typeDescription\" value={this.state.typeDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 5px 5px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearCategoriesType()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update CategoriesType' ? this.onEditCategoriesType : this.onCreateCategoriesType}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapCategoriesTypeToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapCategoriesTypeToProps,\n    mapDispatchToProps\n)(CategoriesType)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Config extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Config Id',\n                },\n                {\n                    field: 'configName',\n                    headerName: 'Config Name',\n                },\n                {\n                    field: 'configValue',\n                    headerName: 'Config Value',\n                },\n                {\n                    field: 'configStatus',\n                    headerName: 'Config Status',\n                    valueGetter: function (param) {\n                        return param.data.configStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorConfig: null,\n            orgList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            configName: '',\n            configValue: '',\n            configStatus: '',\n            orgId: null,\n            selectedOrg: null,\n\n        }\n        this.onCreateConfig = this.onCreateConfig.bind(this)\n        this.onAddEditConfig = this.onAddEditConfig.bind(this)\n        this.onDeleteConfig = this.onDeleteConfig.bind(this)\n        this.onEditConfig = this.onEditConfig.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadConfig()\n        this.loadOrganization()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadConfig() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'configs')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateConfig() {\n        const {\n            configName,\n            configValue,\n            configStatus,\n            orgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'configs')\n            .send({\n                configName,\n                configValue,\n                configStatus,\n                orgId\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                configName: '',\n                configValue: '',\n                configStatus: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditConfig() {\n        const {\n            selectedRow,\n            id,\n            configName,\n            configValue,\n            configStatus,\n            orgId\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'configs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                configName,\n                configValue,\n                configStatus,\n                orgId\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearConfig = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditConfig(type) {\n        const { selectedRow, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Config',\n                    id: selectedRow.id,\n                    configName: selectedRow.configName,\n                    configValue: selectedRow.configValue,\n                    configStatus: selectedRow.configStatus,\n                    orgId: selectedRow.orgId,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Config',\n                    id: null,\n                    configName: '',\n                    configValue: '',\n                    configStatus: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteConfig() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Config',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.configName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteConfig()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteConfig() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'configs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                configName: '',\n                configValue: '',\n                configStatus: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadConfig()\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Config',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorConfigChange = (editorConfig) => {\n        this.setState({\n            editorConfig,\n            description: editorConfig && draftToMarkdown(convertToRaw(editorConfig.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteConfig}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditConfig.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditConfig.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearConfig()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"configName\">ConfigName </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"configName\" value={this.state.configName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"configValue\">Config Value </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"configValue\" value={this.state.configValue} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"configStatus\">Config Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"configStatus\" value={this.state.configStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgId\">Org Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"org\"}\n                                                value={this.state.selectedOrg}\n                                                onChange={this.onChangeOrg}\n                                                options={this.state.orgList}\n                                                getOptionLabel={(option) => option.orgName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearConfig()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Config' ? this.onEditConfig : this.onCreateConfig}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapConfigToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapConfigToProps,\n    mapDispatchToProps\n)(Config)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass DeviceLog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Log Id',\n                },\n                {\n                    field: 'logDateTime',\n                    headerName: 'Log DateTime',\n                },\n                {\n                    field: 'logMessage',\n                    headerName: 'Log Message',\n                },\n                {\n                    field: 'logMessageType',\n                    headerName: 'Log Message Type',\n                },\n                {\n                    field: 'logType',\n                    headerName: 'log Type',\n                },\n                {\n                    field: 'orgDeviceId',\n                    headerName: 'Org DeviceId',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Org Id',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorDeviceLog: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            logDateTime: '',\n            logMessage: '',\n            logMessageType: '',\n            logType: '',\n            orgDeviceId: '',\n            orgId: null,\n            selectedOrg: null,\n\n            orgList: [],\n            orgDeviceList: []\n        }\n        this.onCreateDeviceLog = this.onCreateDeviceLog.bind(this)\n        this.onAddEditDeviceLog = this.onAddEditDeviceLog.bind(this)\n        this.onDeleteDeviceLog = this.onDeleteDeviceLog.bind(this)\n        this.onEditDeviceLog = this.onEditDeviceLog.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadDeviceLog()\n        this.loadOrganization()\n        this.loadOrgDevices()\n\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadDeviceLog() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devicelogs')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrgDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'orgdevices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgDeviceList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateDeviceLog() {\n        const {\n            logDateTime,\n            logMessage,\n            logMessageType,\n            logType,\n            orgDeviceId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'devicelogs')\n            .send({\n                logDateTime,\n                logMessage,\n                logMessageType,\n                logType,\n                orgDeviceId,\n                orgId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                logDateTime: '',\n                logMessage: '',\n                logMessageType: '',\n                logType: '',\n                orgDeviceId: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditDeviceLog() {\n        const {\n            selectedRow,\n            id,\n            logDateTime,\n            logMessage,\n            logMessageType,\n            logType,\n            orgDeviceId,\n            orgId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'devicelogs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                logDateTime,\n                logMessage,\n                logMessageType,\n                logType,\n                orgDeviceId,\n                orgId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearDeviceLog = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditDeviceLog(type) {\n        const { selectedRow, orgList, orgDeviceList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update DeviceLog',\n                    id: selectedRow.id,\n                    logDateTime: selectedRow.logDateTime,\n                    logMessage: selectedRow.logMessage,\n                    logMessageType: selectedRow.logMessageType,\n                    logType: selectedRow.logType,\n                    orgDeviceId: selectedRow.orgDeviceId,\n                    orgId: selectedRow.orgId,\n\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName },\n                    selectedOrgDevice: { id: selectedRow.orgDeviceId, deviceCode: orgDeviceList.find(x => x.id === selectedRow.orgDeviceId).deviceCode }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add DeviceLog',\n                    id: null,\n                    logDateTime: '',\n                    logMessage: '',\n                    logMessageType: '',\n                    logType: '',\n                    orgDeviceId: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteDeviceLog() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete DeviceLog',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.logDateTime + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteDeviceLog()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteDeviceLog() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'devicelogs/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                logDateTime: '',\n                logMessage: '',\n                logMessageType: '',\n                logType: '',\n                orgDeviceId: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadDeviceLog()\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'DeviceLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorDeviceLogChange = (editorDeviceLog) => {\n        this.setState({\n            editorDeviceLog,\n            description: editorDeviceLog && draftToMarkdown(convertToRaw(editorDeviceLog.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onChangeOrgDevice = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrgDevice: newValue,\n                orgDeviceId: newValue.deviceId\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteDeviceLog}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditDeviceLog.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditDeviceLog.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearDeviceLog()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"logDateTime\">Log DateTime </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"logDateTime\" value={this.state.logDateTime} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"logMessageType\">Log MessageType </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"logMessageType\" value={this.state.logMessageType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"logType\">Log Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"logType\" value={this.state.logType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgDeviceId\">Org Device Id </label>\n                                            <Select\n                                                id={\"orgDevice\"}\n                                                value={this.state.selectedOrgDevice}\n                                                onChange={this.onChangeOrgDevice}\n                                                options={this.state.orgDeviceList}\n                                                getOptionLabel={(option) => option.deviceCode}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"orgDeviceId\" value={this.state.orgDeviceId} className=\"form-control\" /> */}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgId\">Org Id </label>\n                                            <Select\n                                                id={\"org\"}\n                                                value={this.state.selectedOrg}\n                                                onChange={this.onChangeOrg}\n                                                options={this.state.orgList}\n                                                getOptionLabel={(option) => option.orgName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"orgId\" value={this.state.orgId} className=\"form-control\" /> */}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"logMessage\">Log Message </label>\n                                            <textarea onChange={this.onTextChange} id=\"logMessage\" value={this.state.logMessage} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearDeviceLog()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update DeviceLog' ? this.onEditDeviceLog : this.onCreateDeviceLog}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay >\n        )\n    }\n}\n\nconst mapDeviceLogToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapDeviceLogToProps,\n    mapDispatchToProps\n)(DeviceLog)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass JobLog extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'JobLog Id',\n                },\n                {\n                    field: 'jobLogDateTime',\n                    headerName: 'JobLog DateTime',\n                },\n                {\n                    field: 'jobLogMessage',\n                    headerName: 'JobLog Message',\n                },\n                {\n                    field: 'jobName',\n                    headerName: 'Job',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorJobLog: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            jobLogDateTime: '',\n            jobLogMessage: '',\n            jobId: null,\n            jobMasterList: [],\n\n            countryList: [],\n            selectedJobId: null,\n        }\n        this.onCreateJobLog = this.onCreateJobLog.bind(this)\n        this.onAddEditJobLog = this.onAddEditJobLog.bind(this)\n        this.onDeleteJobLog = this.onDeleteJobLog.bind(this)\n        this.onEditJobLog = this.onEditJobLog.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadJobLog()\n        this.loadJobMaster()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadJobLog() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'joblog')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                \n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadJobMaster() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'jobmaster')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    jobMasterList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateJobLog() {\n        const {\n            jobLogDateTime,\n            jobLogMessage,\n            jobId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'joblog')\n            .send({\n                jobLogDateTime,\n                jobLogMessage,\n                jobId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                jobLogDateTime: '',\n                jobLogMessage: '',\n                jobId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditJobLog() {\n        const {\n            selectedRow,\n            id,\n            jobLogDateTime,\n            jobLogMessage,\n            jobId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'joblog/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                jobLogDateTime,\n                jobLogMessage,\n                jobId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearJobLog = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditJobLog(type) {\n        const { selectedRow, jobMasterList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                \n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update JobLog',\n                    id: selectedRow.id,\n                    jobLogDateTime: selectedRow.jobLogDateTime,\n                    jobLogMessage: selectedRow.jobLogMessage,\n                    jobId: selectedRow.jobId,\n                    selectedJobId: { id: selectedRow.jobId, jobName: jobMasterList.find(x => x.id === selectedRow.jobId).jobName }\n\n                }, ()=>{\n                    console.log(this.state.selectedJobId)\n                    \n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add JobLog',\n                    id: null,\n                    jobLogDateTime: '',\n                    jobLogMessage: '',\n                    jobId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteJobLog() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete JobLog',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.jobLogDateTime + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteJobLog()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteJobLog() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'joblog/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                jobLogDateTime: '',\n                jobLogMessage: '',\n                jobId: null,\n                selectedRow: null\n            }, () => {\n                this.loadJobLog()\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobLog',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onEditorJobLogChange = (editorJobLog) => {\n        this.setState({\n            editorJobLog,\n            description: editorJobLog && draftToMarkdown(convertToRaw(editorJobLog.getCurrentContent())),\n        })\n    }\n\n    onChangeJobMaster = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedJobId: newValue,\n                jobId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { jobMasterList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                  <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteJobLog}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditJobLog.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditJobLog.bind(this, 'add')}\n                                         >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearJobLog()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobLogDateTime\">jobLogDateTime </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"jobLogDateTime\" value={this.state.jobLogDateTime} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobId\">Job Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"jobId\"}\n                                                value={this.state.selectedJobId}\n                                                onChange={this.onChangeJobMaster}\n                                                options={jobMasterList}\n                                                getOptionLabel={(option) => option.jobName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"jobId\" value={this.state.jobId} className=\"form-control\" /> */}\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobLogMessage\">JobLog Message </label>\n                                            <textarea onChange={this.onTextChange} id=\"jobLogMessage\" value={this.state.jobLogMessage} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearJobLog()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update JobLog' ? this.onEditJobLog : this.onCreateJobLog}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                 </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapJobLogToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapJobLogToProps,\n    mapDispatchToProps\n)(JobLog)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass JobMaster extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            vendorList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Job Master Id',\n                },\n                {\n                    field: 'jobName',\n                    headerName: 'Job Name',\n                },\n                {\n                    field: 'jobSchedule',\n                    headerName: 'Job Schedule',\n                },\n                {\n                    field: 'jobType',\n                    headerName: 'Job Type',\n                },\n                {\n                    field: 'jobConfig',\n                    headerName: 'Job Config',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorJobMaster: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            jobName: '',\n            jobSchedule: '',\n            jobType: '',\n            jobConfig: '',\n            orgId: null,\n            selectedOrg: null,\n            orgList: []\n\n        }\n        this.onCreateJobMaster = this.onCreateJobMaster.bind(this)\n        this.onAddEditJobMaster = this.onAddEditJobMaster.bind(this)\n        this.onDeleteJobMaster = this.onDeleteJobMaster.bind(this)\n        this.onEditJobMaster = this.onEditJobMaster.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadJobMaster()\n        this.loadOrganization()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadJobMaster() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'jobmaster')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n\n    async onCreateJobMaster() {\n        const {\n            jobName,\n            jobSchedule,\n            jobType,\n            jobConfig,\n            orgId,\n\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'jobmaster')\n            .send({\n                jobName,\n                jobSchedule,\n                jobType,\n                jobConfig,\n                orgId,\n\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                jobName: '',\n                jobSchedule: '',\n                jobType: '',\n                jobConfig: '',\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditJobMaster() {\n        const {\n            selectedRow,\n            id,\n            jobName,\n            jobSchedule,\n            jobType,\n            jobConfig,\n            orgId,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'jobmaster/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                jobName,\n                jobSchedule,\n                jobType,\n                jobConfig,\n                orgId,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearJobMaster = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditJobMaster(type) {\n        const { selectedRow, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update JobMaster',\n                    id: selectedRow.id,\n                    jobName: selectedRow.jobName,\n                    jobSchedule: selectedRow.jobSchedule,\n                    jobType: selectedRow.jobType,\n                    jobConfig: selectedRow.jobConfig,\n                    orgId: selectedRow.orgId,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add JobMaster',\n                    id: null,\n                    jobName: '',\n                    jobSchedule: '',\n                    jobType: '',\n                    jobConfig: '',\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteJobMaster() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete JobMaster',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.jobName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteJobMaster()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteJobMaster() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'jobmaster/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                jobName: '',\n                jobSchedule: '',\n                jobType: '',\n                jobConfig: '',\n                orgId: null,\n                selectedRow: null\n            }, () => {\n                this.loadJobMaster()\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'JobMaster',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorJobMasterChange = (editorJobMaster) => {\n        this.setState({\n            editorJobMaster,\n            description: editorJobMaster && draftToMarkdown(convertToRaw(editorJobMaster.getCurrentContent())),\n        })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { vendorList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteJobMaster}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditJobMaster.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditJobMaster.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearJobMaster()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobName\">Job Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"jobName\" value={this.state.jobName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobSchedule\">Job Schedule </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"jobSchedule\" value={this.state.jobSchedule} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobType\">Job Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"jobType\" value={this.state.jobType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"jobConfig\">Job Config </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"jobConfig\" value={this.state.jobConfig} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgId\">Org Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"org\"}\n                                                value={this.state.selectedOrg}\n                                                onChange={this.onChangeOrg}\n                                                options={this.state.orgList}\n                                                getOptionLabel={(option) => option.orgName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                            {/* <textarea onChange={this.onTextChange} id=\"orgId\" value={this.state.orgId} className=\"form-control\" /> */}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearJobMaster()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update JobMaster' ? this.onEditJobMaster : this.onCreateJobMaster}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapJobMasterToProps = vendor => ({\n    tabSettings: vendor.userReducer.tabSettings,\n    vendorList: vendor.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapJobMasterToProps,\n    mapDispatchToProps\n)(JobMaster)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass OrgDevices extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            orgDeviceList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Device Id',\n                },\n                {\n                    field: 'deviceType',\n                    headerName: 'Device Type',\n                },\n                {\n                    field: 'model',\n                    headerName: 'Device Model',\n                },\n                {\n                    field: 'deviceStatus',\n                    headerName: 'Device Status',\n                    valueGetter: function (param) {\n                        return param.data.deviceStatus == 0 ? 'InActive' : 'Active'\n                    },\n                },\n                {\n                    field: 'deviceDescription',\n                    headerName: 'Description',\n                },\n                {\n                    field: 'deviceModel',\n                    headerName: 'Model',\n                },\n                {\n                    field: 'deviceCode',\n                    headerName: 'Code',\n                },\n                {\n                    field: 'deviceLocation',\n                    headerName: 'Location',\n                },\n                {\n                    field: 'deviceIP',\n                    headerName: 'IP',\n                },\n                {\n                    field: 'deviceCredentials',\n                    headerName: 'Credentials',\n                },\n                {\n                    field: 'deviceConnectionType',\n                    headerName: 'Connection Type',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorOrgDevice: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            deviceType: '',\n            deviceId: null,\n            deviceDescription: '',\n            deviceModel: '',\n            deviceCode: '',\n            deviceLocation: '',\n            deviceIP: '',\n            deviceCredentials: '',\n            deviceConnectionType: '',\n            deviceStatus: '',\n            selectedCountry: null,\n            countryList: [],\n\n            deviceList: []\n\n        }\n        this.onCreateOrgDevice = this.onCreateOrgDevice.bind(this)\n        this.onAddEditOrgDevice = this.onAddEditOrgDevice.bind(this)\n        this.onDeleteOrgDevice = this.onDeleteOrgDevice.bind(this)\n        this.onEditOrgDevice = this.onEditOrgDevice.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadOrgDevices()\n        this.loadDevices()\n\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadOrgDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'orgDevices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadDevices() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'devices')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    deviceList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateOrgDevice() {\n        const {\n            deviceType,\n            deviceId,\n            deviceDescription,\n            deviceModel,\n            deviceCode,\n            deviceLocation,\n            deviceIP,\n            deviceCredentials,\n            deviceConnectionType,\n            deviceStatus,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'orgDevices')\n            .send({\n                deviceType,\n                deviceId,\n                deviceDescription,\n                deviceModel,\n                deviceCode,\n                deviceLocation,\n                deviceIP,\n                deviceCredentials,\n                deviceConnectionType,\n                deviceStatus,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                deviceType: '',\n                deviceId: null,\n                deviceDescription: '',\n                deviceModel: '',\n                deviceCode: '',\n                deviceLocation: '',\n                deviceIP: '',\n                deviceCredentials: '',\n                deviceConnectionType: '',\n                deviceStatus: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditOrgDevice() {\n        const {\n            selectedRow,\n            id,\n            deviceType,\n            deviceId,\n            deviceDescription,\n            deviceModel,\n            deviceCode,\n            deviceLocation,\n            deviceIP,\n            deviceCredentials,\n            deviceConnectionType,\n            deviceStatus,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'orgDevices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                deviceType,\n                deviceId,\n                deviceDescription,\n                deviceModel,\n                deviceCode,\n                deviceLocation,\n                deviceIP,\n                deviceCredentials,\n                deviceConnectionType,\n                deviceStatus,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevices',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearOrgDevice = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditOrgDevice(type) {\n        const { selectedRow, deviceList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update OrgDevice',\n                    id: selectedRow.id,\n                    deviceType: selectedRow.deviceType,\n                    deviceId: selectedRow.deviceId,\n                    deviceDescription: selectedRow.deviceDescription,\n                    deviceModel: selectedRow.deviceModel,\n                    deviceCode: selectedRow.deviceCode,\n                    deviceLocation: selectedRow.deviceLocation,\n                    deviceIP: selectedRow.deviceIP,\n                    deviceCredentials: selectedRow.deviceCredentials,\n                    deviceConnectionType: selectedRow.deviceConnectionType,\n                    deviceStatus: selectedRow.deviceStatus,\n                    selectedDeviceId: { id: selectedRow.deviceId, deviceModel: deviceList.find(x => x.id === selectedRow.deviceId).deviceModel }\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add OrgDevice',\n                    id: null,\n                    deviceType: '',\n                    deviceId: null,\n                    deviceDescription: '',\n                    deviceModel: '',\n                    deviceCode: '',\n                    deviceLocation: '',\n                    deviceIP: '',\n                    deviceCredentials: '',\n                    deviceConnectionType: '',\n                    deviceStatus: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteOrgDevice() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete OrgDevice',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.deviceCode + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteOrgDevice()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteOrgDevice() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'orgdevices/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                deviceType: '',\n                deviceId: null,\n                deviceDescription: '',\n                deviceModel: '',\n                deviceCode: '',\n                deviceLocation: '',\n                deviceIP: '',\n                deviceCredentials: '',\n                deviceConnectionType: '',\n                deviceStatus: '',\n                selectedRow: null\n            }, () => {\n                this.loadOrgDevices()\n                confirmAlert({\n                    title: 'OrgDevice',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'OrgDevice',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleSequenceNumber = selectedSequence => {\n        this.setState(\n            { selectedSequence },\n            () => console.log(`Option selected:`, this.state.selectedSequence)\n        );\n    }\n\n    onEditorOrgDeviceChange = (editorOrgDevice) => {\n        this.setState({\n            editorOrgDevice,\n            description: editorOrgDevice && draftToMarkdown(convertToRaw(editorOrgDevice.getCurrentContent())),\n        })\n    }\n\n    onChangeDevice = (newValue, actionMeta) => {\n\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedDeviceId: newValue,\n                deviceId: newValue.id\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { orgDeviceList, deviceList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteOrgDevice}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditOrgDevice.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditOrgDevice.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearOrgDevice()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceType\">Device Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceType\" value={this.state.deviceType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceId\">Device Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"deviceId\"}\n                                                value={this.state.selectedDeviceId}\n                                                onChange={this.onChangeDevice}\n                                                options={deviceList}\n                                                getOptionLabel={(option) => option.deviceModel}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceModel\">Device Model </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceModel\" value={this.state.deviceModel} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceCode\">Device Code </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceCode\" value={this.state.deviceCode} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceLocation\">Device Location </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceLocation\" value={this.state.deviceLocation} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceIP\">Device IP </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceIP\" value={this.state.deviceIP} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceCredentials\">Device Credentials </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceCredentials\" value={this.state.deviceCredentials} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceConnectionType\">Connection Type </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceConnectionType\" value={this.state.deviceConnectionType} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceStatus\">Device Status </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"deviceStatus\" value={this.state.deviceStatus} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"deviceDescription\">Device Description </label>\n                                            <textarea onChange={this.onTextChange} id=\"deviceDescription\" value={this.state.deviceDescription} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearOrgDevice()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update OrgDevice' ? this.onEditOrgDevice : this.onCreateOrgDevice}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapOrgDeviceToProps = orgDevice => ({\n    tabSettings: orgDevice.userReducer.tabSettings\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapOrgDeviceToProps,\n    mapDispatchToProps\n)(OrgDevices)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass Reports extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'Report Id',\n                },\n                {\n                    field: 'reportName',\n                    headerName: 'Report Name',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                },\n                {\n                    field: 'userId',\n                    headerName: 'User Id',\n                },\n                {\n                    field: 'reportConfig',\n                    headerName: 'Report Config',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorReport: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            reportName: '',\n            orgId: null,\n            userId: null,\n            reportConfig: '',\n            selectedCountry: null,\n            countryList: [],\n            selectedOrg: null,\n\n        }\n        this.onCreateReport = this.onCreateReport.bind(this)\n        this.onAddEditReport = this.onAddEditReport.bind(this)\n        this.onDeleteReport = this.onDeleteReport.bind(this)\n        this.onEditReport = this.onEditReport.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadReports()\n        this.loadOrganization()\n        this.loadUsers()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadReports() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'reports')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganization() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateReport() {\n        const {\n            reportName,\n            orgId,\n            userId,\n            reportConfig,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'reports')\n            .send({\n                reportName,\n                orgId,\n                userId,\n                reportConfig,\n\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                reportName: '',\n                orgId: null,\n                userId: null,\n                reportConfig: '',\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditReport() {\n        const {\n            selectedRow,\n            id,\n            reportName,\n            orgId,\n            userId,\n            reportConfig,\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'reports/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                reportName,\n                orgId,\n                userId,\n                reportConfig,\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Reports',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearReport = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditReport(type) {\n        const { selectedRow, orgList, userList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update Report',\n                    id: selectedRow.id,\n                    reportName: selectedRow.reportName,\n                    orgId: selectedRow.orgId,\n                    userId: selectedRow.userId,\n                    reportConfig: selectedRow.reportConfig,\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName },\n                    selectedUser: { id: selectedRow.userId, usersFirstName: userList.find(x => x.id === selectedRow.userId).usersFirstName },\n\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add Report',\n                    id: null,\n                    reportName: '',\n                    orgId: null,\n                    userId: null,\n                    reportConfig: '',\n                })\n            }\n        }\n    }\n\n    async onDeleteReport() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete Report',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.reportName + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteReport()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteReport() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'reports/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                reportName: '',\n                orgId: null,\n                userId: null,\n                reportConfig: '',\n                selectedRow: null\n            }, () => {\n                this.loadReports()\n                confirmAlert({\n                    title: 'Report',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'Report',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onChangeOrg = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedOrg: newValue,\n                orgId: newValue.id\n            })\n        }\n    }\n\n    handleChangeUsers = selectedUser => {\n\n        this.setState({\n            selectedUser,\n            userId: selectedUser.id\n        })\n    }\n\n\n\n    onEditorReportChange = (editorReport) => {\n        this.setState({\n            editorReport,\n            description: editorReport && draftToMarkdown(convertToRaw(editorReport.getCurrentContent())),\n        })\n    }\n\n    onCountryChange = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedCountry: newValue,\n            })\n        }\n    }\n\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteReport}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditReport.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditReport.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearReport()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"reportName\">Report Name </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"reportName\" value={this.state.reportName} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgId\">Org Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"org\"}\n                                                value={this.state.selectedOrg}\n                                                onChange={this.onChangeOrg}\n                                                options={this.state.orgList}\n                                                getOptionLabel={(option) => option.orgName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"userId\">User Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"user\"}\n                                                value={this.state.selectedUser}\n                                                onChange={this.handleChangeUsers}\n                                                options={this.state.userList}\n                                                getOptionLabel={(option) => option.usersFirstName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"reportConfig\">Report Config </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"reportConfig\" value={this.state.reportConfig} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearReport()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update Report' ? this.onEditReport : this.onCreateReport}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapReportToProps = report => ({\n    tabSettings: report.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapReportToProps,\n    mapDispatchToProps\n)(Reports)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\nimport CreatableSelect from 'react-select/creatable';\n\nclass RoleDetails extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            roleDetailList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'RoleDetail Id',\n                },\n                {\n                    field: 'entityName',\n                    headerName: 'Entity Name',\n                },\n                {\n                    field: 'entityRead',\n                    headerName: 'Entity Read',\n                },\n                {\n                    field: 'entityAdd',\n                    headerName: 'Entity Add',\n                },\n                {\n                    field: 'entityUpdate',\n                    headerName: 'Entity Update',\n                },\n                {\n                    field: 'entityPrint',\n                    headerName: 'Entity Print',\n                },\n                {\n                    field: 'entityExport',\n                    headerName: 'Entity Export',\n                },\n                {\n                    field: 'entityDelete',\n                    headerName: 'Entity Delete',\n                },\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            rowData: [],\n            editorRoleDetail: null,\n            userRoleList: [],\n            selectedUserRole: null,\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n\n            roleEntityId: null,\n            entityRead: '',\n            entityAdd: '',\n            entityUpdate: '',\n            entityPrint: '',\n            entityExport: '',\n            entityDelete: '',\n            selectedRoleEntity: null,\n            roleEntityList: []\n\n        }\n        this.onCreateRoleDetail = this.onCreateRoleDetail.bind(this)\n        this.onAddEditRoleDetail = this.onAddEditRoleDetail.bind(this)\n        this.onDeleteRoleDetail = this.onDeleteRoleDetail.bind(this)\n        this.onEditRoleDetail = this.onEditRoleDetail.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadRoleDetails()\n        this.loadRoleEntity()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadRoleDetails() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roledetails')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadRoleEntity() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roleentities')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    roleEntityList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateRoleDetail() {\n        const {\n            roleEntityId,\n            entityRead,\n            entityAdd,\n            entityUpdate,\n            entityPrint,\n            entityExport,\n            entityDelete,\n\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'roledetails')\n            .send({\n                roleEntityId,\n                entityRead,\n                entityAdd,\n                entityUpdate,\n                entityPrint,\n                entityExport,\n                entityDelete,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                roleEntityId: null,\n                entityRead: '',\n                entityAdd: '',\n                entityUpdate: '',\n                entityPrint: '',\n                entityExport: '',\n                entityDelete: '',\n\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadRoleDetails()\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditRoleDetail() {\n        const {\n            selectedRow,\n            id,\n            roleEntityId,\n            entityRead,\n            entityAdd,\n            entityUpdate,\n            entityPrint,\n            entityExport,\n            entityDelete,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'roledetails/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                roleEntityId,\n                entityRead,\n                entityAdd,\n                entityUpdate,\n                entityPrint,\n                entityExport,\n                entityDelete,\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadRoleDetails()\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'RoleDetails',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearRoleDetail = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditRoleDetail(type) {\n        const { selectedRow, roleEntityList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update RoleDetail',\n                    id: selectedRow.id,\n                    roleEntityId: selectedRow.roleEntityId,\n                    entityRead: selectedRow.entityRead,\n                    entityAdd: selectedRow.entityAdd,\n                    entityUpdate: selectedRow.entityUpdate,\n                    entityPrint: selectedRow.entityPrint,\n                    entityExport: selectedRow.entityExport,\n                    entityDelete: selectedRow.entityDelete,\n                    selectedRoleEntity: { id: selectedRow.roleEntityId, entityName: roleEntityList.find(x => x.id === selectedRow.roleEntityId).entityName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add RoleDetail',\n                    id: null,\n                    roleEntityId: null,\n                    entityRead: '',\n                    entityAdd: '',\n                    entityUpdate: '',\n                    entityPrint: '',\n                    entityExport: '',\n                    entityDelete: '',\n\n                })\n            }\n        }\n    }\n\n    async onDeleteRoleDetail() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete RoleDetail',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.id + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteRoleDetail()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteRoleDetail() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'roledetails/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                roleEntityId: null,\n                entityRead: '',\n                entityAdd: '',\n                entityUpdate: '',\n                entityPrint: '',\n                entityExport: '',\n                entityDelete: '',\n                selectedRow: null\n            }, () => {\n                this.loadRoleDetails()\n                confirmAlert({\n                    title: 'RoleDetail',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'RoleDetail',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    onChangeRoleEntity = (newValue, actionMeta) => {\n        if (actionMeta.action == \"select-option\") {\n            this.setState({\n                selectedRoleEntity: newValue,\n                roleEntityId: newValue.id\n            })\n        }\n    }\n\n    onEditorRoleDetailChange = (editorRoleDetail) => {\n        this.setState({\n            editorRoleDetail,\n            description: editorRoleDetail && draftToMarkdown(convertToRaw(editorRoleDetail.getCurrentContent())),\n        })\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { roleDetailList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteRoleDetail}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditRoleDetail.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditRoleDetail.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearRoleDetail()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"roleEntityId\">RoleEntity Id </label>\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"org\"}\n                                                value={this.state.selectedRoleEntity}\n                                                onChange={this.onChangeRoleEntity}\n                                                options={this.state.roleEntityList}\n                                                getOptionLabel={(option) => option.entityName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityRead\">Entity Read </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityRead\" value={this.state.entityRead} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityAdd\">EntityAdd </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityAdd\" value={this.state.entityAdd} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityUpdate\">EntityUpdate </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityUpdate\" value={this.state.entityUpdate} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityPrint\">Entity Print </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityPrint\" value={this.state.entityPrint} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityExport\">Entity Export </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityExport\" value={this.state.entityExport} className=\"form-control\" />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"entityDelete\">Entity Delete </label>\n                                            <input type=\"text\" onChange={this.onTextChange} id=\"entityDelete\" value={this.state.entityDelete} className=\"form-control\" />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearRoleDetail()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update RoleDetail' ? this.onEditRoleDetail : this.onCreateRoleDetail}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapRoleDetailToProps = roleDetail => ({\n    tabSettings: roleDetail.userReducer.tabSettings,\n    roleDetailList: roleDetail.userReducer.playerList,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapRoleDetailToProps,\n    mapDispatchToProps\n)(RoleDetails)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { updateTabNavigation } from '../store/actions'\nimport request from 'superagent';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport Select from 'react-select';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { AllModules } from 'ag-grid-react';\nimport { AgGridReact } from 'ag-grid-react';\nimport Popup from \"reactjs-popup\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToRaw } from 'draft-js';\nimport draftToMarkdown from 'draftjs-to-markdown';\n\nclass UserRolesMapping extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoading: false,\n            UserRolesMappingList: [],\n            selectedSequence: null,\n            modules: AllModules,\n            columnDefs: [\n                {\n                    field: 'id',\n                    headerName: 'RolesMapping Id',\n                },\n                {\n                    field: 'userId',\n                    headerName: 'User Id',\n                },\n                {\n                    field: 'roleId',\n                    headerName: 'RoleId',\n                },\n                {\n                    field: 'orgName',\n                    headerName: 'Organization',\n                }\n            ],\n            defaultColDef: {\n                flex: 1,\n                minWidth: 100,\n                sortable: true,\n                resizable: true,\n                autoHeight: true\n            },\n            getRowHeight: function (params) {\n                return 18 * (Math.floor(params.data.description.length / 50) + 1);\n            },\n            rowSelection: 'single',\n            selectedRow: null,\n            paginationPageSize: 10,\n            editorUserRolesMapping: null,\n\n            rowData: [],\n            userRoleList: [],\n            userList: [],\n            orgList: [],\n\n            selectedOrg: null,\n            selectedRole: null,\n            selectedUser: null,\n\n            recentlyCreatedOrgUserId: '',\n            isPopupOpen: false,\n            actionType: null,\n            userId: null,\n            roleId: null,\n            orgId: null,\n            selectedCountry: null,\n\n        }\n        this.onCreateUserRolesMapping = this.onCreateUserRolesMapping.bind(this)\n        this.onAddEditUserRolesMapping = this.onAddEditUserRolesMapping.bind(this)\n        this.onDeleteUserRolesMapping = this.onDeleteUserRolesMapping.bind(this)\n        this.onEditUserRolesMapping = this.onEditUserRolesMapping.bind(this)\n\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n    }\n\n    componentDidMount() {\n        this.loadUserRolesMapping()\n        this.loadUsers()\n        this.loadUserRoles()\n        this.loadOrganizations()\n    }\n\n    onBtStartEditing = (key, char, pinned) => {\n        this.gridApi.setFocusedCell(0, 'lastName', pinned);\n        this.gridApi.startEditingCell({\n            rowIndex: 0,\n            colKey: 'lastName',\n            rowPinned: pinned,\n            keyPress: key,\n            charPress: char,\n        });\n    }\n\n    async loadUserRolesMapping() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'userrolesmapping')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    rowData: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUsers() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'users')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadUserRoles() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'roles')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    userRoleList: response.ResponsePacket,\n                    isLoading: false\n                })\n\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async loadOrganizations() {\n        this.setState({\n            isLoading: true\n        })\n        try {\n            const r = await request\n                .get(process.env.REACT_APP_API_URL + 'organizations')\n                .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n            const response = r.body\n            if (response.success) {\n                this.setState({\n                    orgList: response.ResponsePacket,\n                    isLoading: false\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                })\n            }\n        } catch (catchError) {\n            this.setState({\n                isLoading: false\n            })\n            alert(\"Error...\")\n        }\n    }\n\n    async onCreateUserRolesMapping() {\n        const {\n            userId,\n            roleId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .post(process.env.REACT_APP_API_URL + 'userrolesmapping')\n            .send({\n                userId,\n                roleId,\n                orgId,\n            })\n        const response = r.body\n\n        if (response.success) {\n            this.setState({\n                userId: null,\n                roleId: null,\n                orgId: null,\n                isLoading: false,\n                isPopupOpen: false\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    async onEditUserRolesMapping() {\n        const {\n            selectedRow,\n            id,\n            userId,\n            roleId,\n            orgId,\n\n        } = this.state\n        this.setState({\n            isLoading: true\n        })\n\n        const r = await request\n            .patch(process.env.REACT_APP_API_URL + 'userrolesmapping/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`)\n            .send({\n                id,\n                userId,\n                roleId,\n                orgId,\n\n            })\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                isLoading: false,\n                isPopupOpen: false,\n                selectedRow: null\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    clearUserRolesMapping = () => {\n        this.setState({\n            selectedRow: null,\n            isPopupOpen: false,\n            organisationId: '',\n            isDeleted: false,\n        })\n    }\n\n    async onAddEditUserRolesMapping(type) {\n        const { selectedRow, userList, userRoleList, orgList } = this.state\n        if (!selectedRow && type == 'edit') {\n            return\n        } else {\n            if (type == 'edit') {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Update UserRolesMapping',\n                    id: selectedRow.id,\n                    userId: selectedRow.userId,\n                    roleId: selectedRow.roleId,\n                    orgId: selectedRow.orgId,\n                    selectedUser: { id: selectedRow.userId, usersFirstName: userList.find(x => x.id === selectedRow.userId).usersFirstName },\n                    selectedRole: { id: selectedRow.roleId, roleName: userRoleList.find(x => x.id === selectedRow.roleId).roleName },\n                    selectedOrg: { id: selectedRow.orgId, orgName: orgList.find(x => x.id === selectedRow.orgId).orgName }\n\n                })\n            } else {\n                this.setState({\n                    isPopupOpen: true,\n                    actionType: 'Add UserRolesMapping',\n                    id: null,\n                    userId: null,\n                    roleId: null,\n                    orgId: null,\n                })\n            }\n        }\n    }\n\n    async onDeleteUserRolesMapping() {\n        const { selectedRow } = this.state\n        confirmAlert({\n            title: 'Delete UserRolesMapping',\n            message: \"Are you sure you wants to delete the record : \" + selectedRow.id + \"?\",\n            buttons: [\n                {\n                    label: 'Confirm',\n                    onClick: () => {\n                        this.deleteUserRolesMapping()\n                    }\n                },\n                {\n                    label: 'Cancel',\n                    onClick: () => {\n\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async deleteUserRolesMapping() {\n        const { selectedRow } = this.state\n        this.setState({ isLoading: true })\n        const r = await request\n            .del(process.env.REACT_APP_API_URL + 'userrolesmapping/id/' + selectedRow.id)\n            .set('authorization', `Bearer ${localStorage.getItem('admin_access_token')}`);\n        const response = r.body\n        if (response.success) {\n            this.setState({\n                id: null,\n                userId: null,\n                roleId: null,\n                orgId: null,\n            }, () => {\n                this.loadUserRolesMapping()\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        } else {\n            this.setState({\n                isLoading: false\n            }, () => {\n                confirmAlert({\n                    title: 'UserRolesMapping',\n                    message: response.message,\n                    buttons: [\n                        {\n                            label: 'Ok',\n                            onClick: () => {\n\n                            }\n                        }\n                    ],\n                    closeOnClickOutside: false,\n                    closeOnEscape: false\n                })\n            })\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleImageUploadChange(event) {\n        this.setState({\n            gameBoard: URL.createObjectURL(event.target.files[0])\n        })\n    }\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    handleChangeUsers = selectedUser => {\n\n        this.setState({\n            selectedUser,\n            userId: selectedUser.id\n        })\n    }\n\n    handleChangeRoles = selectedRole => {\n        this.setState({\n            selectedRole,\n            roleId: selectedRole.id\n        })\n    }\n\n    handleChangeOrg = selectedOrg => {\n        this.setState({\n            selectedOrg,\n            orgId: selectedOrg.id\n        })\n    }\n\n    onEditorUserRolesMappingChange = (editorUserRolesMapping) => {\n        this.setState({\n            editorUserRolesMapping,\n            description: editorUserRolesMapping && draftToMarkdown(convertToRaw(editorUserRolesMapping.getCurrentContent())),\n        })\n    }\n\n    onSelectionChanged = () => {\n        var selectedRows = this.gridApi.getSelectedRows();\n        this.setState({\n            selectedRow: selectedRows && selectedRows.length > 0 ? selectedRows[0] : null\n        })\n    }\n\n    render() {\n        const { UserRolesMappingList, isLoading, isPopupOpen } = this.state\n        return (\n            <LoadingOverlay\n                active={isLoading}\n                spinner\n            >\n                <div className=\"card m-10\">\n                    <section className=\"content\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className=\"card-body\">\n                                    <div style={{ width: '100%', display: isPopupOpen ? 'none' : 'block' }}>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-danger float-right btn-sm\"\n                                            onClick={this.onDeleteUserRolesMapping}\n                                        >{'Delete Record'}</button>\n                                        <button\n                                            disabled={!this.state.selectedRow}\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm mx-2\"\n                                            onClick={this.onAddEditUserRolesMapping.bind(this, 'edit')}\n                                        >{'Update Record'}</button>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-success float-right btn-sm\"\n                                            onClick={this.onAddEditUserRolesMapping.bind(this, 'add')}\n                                        >{'Add New'}</button>\n                                    </div>\n                                    <div style={{ width: '100%', display: !isPopupOpen ? 'none' : 'block' }}>\n                                        <strong className=\"text-center\">{this.state.actionType} </strong>\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-warning float-right btn-sm mx-1\"\n                                            onClick={() => {\n                                                this.setState({ isPopupOpen: false }, () => {\n                                                    this.clearUserRolesMapping()\n                                                })\n                                            }}\n                                        >{'Back'}</button>\n                                    </div>\n                                    <div className=\"card-body table-responsive p-0\" style={{ display: isPopupOpen ? 'none' : 'block' }}>\n                                        <div style={{ width: '100%', height: '550px' }}>\n                                            <div\n                                                id=\"RoleNameGrid\"\n                                                style={{\n                                                    height: '550px',\n                                                    width: '100%',\n                                                }}\n                                                className=\"ag-theme-alpine\"\n                                            >\n                                                <AgGridReact\n                                                    modules={this.state.modules}\n                                                    columnDefs={this.state.columnDefs}\n                                                    defaultColDef={this.state.defaultColDef}\n                                                    enableCellTextSelection={true}\n                                                    rowSelection={this.state.rowSelection}\n                                                    onGridReady={this.onGridReady}\n                                                    rowData={this.state.rowData}\n                                                    pagination={true}\n                                                    paginationPageSize={this.state.paginationPageSize}\n                                                    onSelectionChanged={this.onSelectionChanged.bind(this)}\n                                                    rowDeselection={true}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <section className=\"content\" style={{ display: !isPopupOpen ? 'none' : 'block' }}>\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n\n                                <div style={{ marginTop: '10px' }}>\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"userId\">User Id </label>\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"userId\" value={this.state.userId} className=\"form-control\" /> */}\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"user\"}\n                                                value={this.state.selectedUser}\n                                                onChange={this.handleChangeUsers}\n                                                options={this.state.userList}\n                                                getOptionLabel={(option) => option.usersFirstName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"roleId\">Role Id </label>\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"roleId\" value={this.state.roleId} className=\"form-control\" /> */}\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"roleName\"}\n                                                value={this.state.selectedRole}\n                                                onChange={this.handleChangeRoles}\n                                                options={this.state.userRoleList}\n                                                getOptionLabel={(option) => option.roleName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"orgId\">Org Id </label>\n                                            {/* <input type=\"text\" onChange={this.onTextChange} id=\"orgId\" value={this.state.orgId} className=\"form-control\" /> */}\n                                            <Select\n                                                // className=\"form-control\"\n                                                id={\"org\"}\n                                                value={this.state.selectedOrg}\n                                                onChange={this.handleChangeOrg}\n                                                options={this.state.orgList}\n                                                getOptionLabel={(option) => option.orgName}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div style={{ padding: '0 15px 15px', display: 'inline-block', width: '100%' }}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning float-right btn-sm mx-1\"\n                                        onClick={() => {\n                                            this.setState({ isPopupOpen: false }, () => {\n                                                this.clearUserRolesMapping()\n                                            })\n                                        }}\n                                    >{'Cancel'}</button>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success float-right btn-sm mx-1\"\n                                        onClick={this.state.actionType == 'Update UserRolesMapping' ? this.onEditUserRolesMapping : this.onCreateUserRolesMapping}\n                                    >{'Submit'}</button>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                </div>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapUserRolesMappingToProps = UserRolesMapping => ({\n    tabSettings: UserRolesMapping.userReducer.tabSettings,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapUserRolesMappingToProps,\n    mapDispatchToProps\n)(UserRolesMapping)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { storeCurrentUser, updateTabNavigation } from '../store/actions'\n\nclass Header extends Component {\n    logout = () => {\n        localStorage.setItem('adminLogin', false);\n        window.location.reload();\n    }\n\n    onClickTab = (tabName) => {\n        // alert(tabName)\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabSettings, currentUserFromStore, tabNames } = this.props\n        return (\n            <div className=\"wrapper\">\n                <nav className=\"main-header navbar navbar-expand navbar-white navbar-light\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a className=\"brand-link\">\n                                <img src=\"dist/img/AdminLTELogo.png\" alt=\"Logo\" className=\"brand-image img-circle elevation-3\" />\n                                &nbsp;\n                                <span className=\"brand-text font-weight-light\">NCM Admin</span>\n                            </a>\n                        </li>\n                    </ul>\n\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                All\n                            </a>\n                            <div className=\"dropdown-menu overflow-hidden\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[0])}>\n                                    {tabNames[0]}\n                                </a>\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                    {tabNames[1]}\n                                </a>\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[2])}>\n                                    {tabNames[2]}\n                                </a>\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[3])}>\n                                    {tabNames[3]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                    {tabNames[4]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[5])}>\n                                    {tabNames[5]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                    {tabNames[6]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                    {tabNames[7]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[8])}>\n                                    {tabNames[8]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[9])}>\n                                    {tabNames[9]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[10])}>\n                                    {tabNames[10]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[11])}>\n                                    {tabNames[11]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[12])}>\n                                    {tabNames[12]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[13])}>\n                                    {tabNames[13]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[14])}>\n                                    {tabNames[14]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[15])}>\n                                    {tabNames[15]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[16])}>\n                                    {tabNames[16]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[17])}>\n                                    {tabNames[17]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[18])}>\n                                    {tabNames[18]}\n                                </a>\n\n\n                                <a className={\"nav-link\"} onClick={this.onClickTab.bind(this, tabNames[19])}>\n                                    {tabNames[19]}\n                                </a>\n\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Masters\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[2])}>\n                                    {tabNames[2]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[3])}>\n                                    {tabNames[3]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                    {tabNames[4]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                    {tabNames[6]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                    {tabNames[7]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[8])}>\n                                    {tabNames[8]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[9])}>\n                                    {tabNames[9]}\n                                </a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Job\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[12])}>\n                                    {tabNames[12]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[13])}>\n                                    {tabNames[13]}\n                                </a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Devices\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[5])}>\n                                    {tabNames[5]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[11])}>\n                                    {tabNames[11]}\n                                </a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Reports\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[15])}>\n                                    {tabNames[15]}\n                                </a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                User\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                    {tabNames[1]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[6])}>\n                                    {tabNames[6]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[7])}>\n                                    {tabNames[7]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[16])}>\n                                    {tabNames[16]}\n                                </a>\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[17])}>\n                                    {tabNames[17]}\n                                </a>\n                            </div>\n                        </li>\n                        <li className=\"nav-item dropdown\">\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Settings\n                            </a>\n                            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                <a className={\"dropdown-item \"} onClick={this.onClickTab.bind(this, tabNames[18])}>\n                                    {tabNames[18]}\n                                </a>\n                            </div>\n                        </li>\n                    </ul>\n                    {/* <ul className=\"navbar-nav\">\n                       \n                    </ul> */}\n                </nav>\n                {/* <nav className=\" navbar navbar-expand navbar-white navbar-light\">\n                    <ul className=\"navbar-nav\">\n                        <li><strong>{tabSettings.TabName}</strong></li>\n                    </ul>\n                </nav> */}\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameData,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { storeCurrentUser, updateTabNavigation } from '../store/actions'\n\nclass SideBar extends Component {\n\n    onClickTab = (tabName) => {\n        this.props.updateTabNavigation({ TabName: tabName })\n    }\n\n    render() {\n        const { tabSettings, currentUserFromStore, tabNames } = this.props\n        return (\n            <aside className=\"main-sidebar sidebar-dark-primary elevation-4\">\n                <a className=\"brand-link\">\n                    <img src=\"dist/img/AdminLTELogo.png\" alt=\"Logo\" className=\"brand-image img-circle elevation-3\" />\n                    <span className=\"brand-text font-weight-light text-light\">NCM Admin</span>\n                </a>\n                <div className=\"sidebar\">\n                    {/* <div className=\"user-panel mt-3 pb-3 mb-3 d-flex\">\n                        <div className=\"image\">\n                            <img src=\"dist/img/user2-160x160.jpg\" className=\"img-circle elevation-2\" alt=\"User Image\" />\n                        </div>\n                        <div className=\"info\">\n                            <a href=\"#\" className=\"d-block\">{currentUserFromStore.Name}</a>\n                        </div>\n                    </div> */}\n                    <nav className=\"mt-2\">\n                        <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[0])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[0] ? 'active' : '')} >\n                                    <i className=\"nav-icon fas fa-home\"></i>\n                                    <p>{tabNames[0]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[1])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[1] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-tachometer-alt\"></i>\n                                    <p>{tabNames[1]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[2])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[2] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-user\"></i>\n                                    <p>{tabNames[2]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[3])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[3] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-gamepad\"></i>\n                                    <p>{tabNames[3]}</p>\n                                </a>\n                            </li>\n                            <li className=\"nav-item has-treeview menu-open\" onClick={this.onClickTab.bind(this, tabNames[4])}>\n                                <a className={\"nav-link \" + (tabSettings.TabName == tabNames[4] ? 'active' : '')}>\n                                    <i className=\"nav-icon fas fa-cog\"></i>\n                                    <p>{tabNames[4]}</p>\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                </div>\n            </aside>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameData,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SideBar)\n","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n    render() {\n        return (\n            <footer className=\"main-footer\">\n                <span>Copyright &copy; 2020-2021</span>\n                <div className=\"float-right d-none d-sm-inline-block\">\n                    <span>v1.0</span>\n                </div>\n            </footer>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Dashboard from '../adminPanel/Dashboard'\nimport Settings from '../adminPanel/Settings'\nimport Users from '../adminPanel/Users';\nimport Countries from '../adminPanel/Countries';\nimport States from '../adminPanel/States';\nimport Vendor from '../adminPanel/Vendor';\nimport Device from '../adminPanel/Device';\nimport Roles from '../adminPanel/Roles';\nimport RolesEntity from '../adminPanel/RolesEntity';\nimport Organization from '../adminPanel/Organization';\n\nimport CategoriesType from '../adminPanel/CategoriesType';\nimport Config from '../adminPanel/Config';\nimport DeviceLog from '../adminPanel/DeviceLog';\nimport JobLog from '../adminPanel/JobLog';\nimport JobMaster from '../adminPanel/JobMaster';\nimport OrgDevices from '../adminPanel/OrgDevices';\nimport Reports from '../adminPanel/Reports';\nimport RoleDetails from '../adminPanel/RoleDetails';\nimport UserRolesMapping from '../adminPanel/UserRolesMapping';\n\nimport Header from './Header';\nimport SideBar from './SideBar';\nimport Footer from './Footer';\n\nclass AdminContent extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    renderPage = () => {\n        const { tabSettings, tabNames } = this.props\n        if (tabSettings.TabName == tabNames[0]) {\n            return <Dashboard />\n        } else if (tabSettings.TabName == tabNames[1]) {\n            return <Users />\n        } else if (tabSettings.TabName == tabNames[2]) {\n            return <Countries />\n        } else if (tabSettings.TabName == tabNames[3]) {\n            return <States />\n        } else if (tabSettings.TabName == tabNames[4]) {\n            return <Vendor />\n        } else if (tabSettings.TabName == tabNames[5]) {\n            return <Device />\n        } else if (tabSettings.TabName == tabNames[6]) {\n            return <Roles />\n        } else if (tabSettings.TabName == tabNames[7]) {\n            return <RolesEntity />\n        } else if (tabSettings.TabName == tabNames[8]) {\n            return <Organization />\n        } else if (tabSettings.TabName == tabNames[9]) {\n            return <CategoriesType />\n        } else if (tabSettings.TabName == tabNames[10]) {\n            return <Config />\n        } else if (tabSettings.TabName == tabNames[11]) {\n            return <DeviceLog />\n        } else if (tabSettings.TabName == tabNames[12]) {\n            return <JobLog />\n        } else if (tabSettings.TabName == tabNames[13]) {\n            return <JobMaster />\n        } else if (tabSettings.TabName == tabNames[14]) {\n            return <OrgDevices />\n        } else if (tabSettings.TabName == tabNames[15]) {\n            return <Reports />\n        } else if (tabSettings.TabName == tabNames[16]) {\n            return <RoleDetails />\n        } else if (tabSettings.TabName == tabNames[17]) {\n            return <UserRolesMapping />\n        } else if (tabSettings.TabName == tabNames[18]) {\n            return <Settings />\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <Header />\n                {/* <SideBar /> */}\n                <div className=\"content-wrapper\" style={{ padding: '10px' }}>\n                    {this.renderPage()}\n                </div>\n                <Footer />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentUserFromStore: state.userReducer.currentUser,\n    gameDataFromStore: state.gameReducer.gameList,\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n})\n\nexport default connect(\n    mapStateToProps,\n    null\n)(AdminContent)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport request from 'superagent';\n// import { API_URL, IS_PRODUCTION, API_PORT } from '../constants'\nimport { updateTabNavigation } from '../store/actions'\nimport { Card, Nav } from 'react-bootstrap'\nimport LoadingOverlay from 'react-loading-overlay';\n\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css' // Import css\nimport AdminContent from '../components/AdminContent';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            gameName: 'NCM',\n            email: '',\n            password: '',\n            isLoading: false\n        }\n        process.env.REACT_APP_STAGE == 'production' ? this.apiBase = process.env.REACT_APP_API_URL + '/api' : this.apiBase = `${window.location.protocol}//${window.location.hostname}:${process.env.REACT_APP_API_PORT}`\n    }\n\n    async onLoginClick() {\n        if (this.state.email && this.state.password) {\n            await this.loginWithTeam()\n        } else {\n            this.showAlert(\"Credientials can't blank !!\")\n        }\n    }\n\n    showAlert = (msg) => {\n        confirmAlert({\n            title: 'Login',\n            message: msg,\n            buttons: [\n                {\n                    label: 'Ok',\n                    onClick: () => {\n                        // this.props.undo()\n                    }\n                }\n            ],\n            closeOnCllickOutside: false,\n            closeOnEscape: false\n        })\n    }\n\n    async loginWithTeam() {\n\n        this.setState({\n            isLoading: true\n        })\n\n        try {\n            const r = await request.post(process.env.REACT_APP_API_URL + 'users/login')\n                .send({\n                    email: this.state.email,\n                    password: this.state.password\n                })\n            const response = r.body\n            \n            if (response.success) {\n                \n                this.setState({\n                    isLoading: false\n                }, () => {\n                    localStorage.setItem('adminLogin', true);\n                    localStorage.setItem('admin_access_token', response.ResponsePacket.token);\n\n                    this.props.history.push('/admin');\n                })\n            } else {\n                this.setState({\n                    isLoading: false\n                }, () => {\n                    this.showAlert(response.message)\n                })\n            }\n        } catch (catchErr) {\n            this.showAlert(\"Error:\", catchErr.error)\n        }\n    }\n\n    onTextChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <LoadingOverlay active={this.state.isLoading} spinner >\n                <section className=\"hold-transition login-page\">\n                    <div className=\"login-box\">\n                        <div className=\"login-logo\">\n                            <a href='javascript:void(0)'><b></b> &nbsp;NCM</a>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body login-card-body\">\n                                <p className=\"login-box-msg\">Sign in to start your session</p>\n                                <form>\n                                    <div className=\"input-group mb-3\">\n                                        <input type=\"text\" onChange={this.onTextChange} id=\"email\" value={this.state.email} className=\"form-control\" placeholder=\"email\" />\n                                        <div className=\"input-group-append\">\n                                            {/* <div className=\"input-group-text\">\n                                                <span className=\"fas fa-envelope\"></span>\n                                            </div> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"input-group mb-3\">\n                                        <input type=\"password\" className=\"form-control\" onChange={this.onTextChange} id=\"password\" value={this.state.password} placeholder=\"Password\" />\n                                        <div className=\"input-group-append\">\n                                            {/* <div className=\"input-group-text\">\n                                                <span className=\"fas fa-lock\"></span>\n                                            </div> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col-8\">\n                                        </div>\n                                        <div className=\"col-4\">\n                                            <button type=\"button\" onClick={this.onLoginClick.bind(this)} className=\"btn btn-primary btn-block\">Sign In</button>\n                                        </div>\n                                    </div>\n                                </form>\n                                <div className=\"social-auth-links text-center mb-3\">\n                                    <p>- OR -</p>\n                                    <a href=\"javascript:void(0)\" className=\"btn btn-block btn-primary\">\n                                        <i className=\"fab fa-facebook mr-2\"></i> Sign in using Facebook\n                                    </a>\n                                    <a href=\"javascript:void(0)\" className=\"btn btn-block btn-danger\">\n                                        <i className=\"fab fa-google-plus mr-2\"></i> Sign in using Google+\n                                    </a>\n                                </div>\n                                <p className=\"mb-1\">\n                                    <a href=\"javascript:void(0)\">I forgot my password</a>\n                                </p>\n                                <p className=\"mb-0\">\n                                    <a href=\"javascript:void(0)\" className=\"text-center\">Register a new membership</a>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </LoadingOverlay>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabSettings: state.userReducer.tabSettings,\n    tabNames: state.userReducer.tabNames,\n\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateTabNavigation: (data) => { dispatch(updateTabNavigation(data)) },\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login)\n","import React from 'react';\n\nimport AdminContent from '../components/AdminContent';\nimport Login from '../adminPanel/Login';\n\nfunction AdminContainer() {\n  if (JSON.parse(localStorage.getItem('adminLogin'))) {\n    return (\n      <AdminContent />\n    )\n  } else {\n    return (\n      <Login />\n    )\n  }\n}\n\nexport default AdminContainer;\n","export const initialDefaultState = {\n    currentUser: {\n        Response: \"\",\n        AppUserID: null,\n        VendorID: null,\n        UserTypeID: null,\n        Email: \"\",\n        UserType: \"\",\n        Name: \"Admin\",\n        ProfileImage: \"\",\n        CustomerID: null,\n        OutletID: null,\n        OutletName: null,\n        DeviceToken: \"\",\n        VehicleRegNumber: \"\",\n        IsFirstTime: false,\n        IsActivated: false,\n        Status: false,\n        Message: \"\"\n    },\n    currentUserSetings: {\n        SettingID: 1,\n        Currency: \"\",\n        DeliveryCharges: \"\",\n        IsGST: \"\",\n        GSTPercentage: \"\",\n        IsLanguage2: \"\",\n        Language2: \"\",\n        Message: \"\"\n    },\n    tabSettings: {\n        TabName: 'Dashboard',\n    },\n    tabNames: [\n        'Dashboard', 'Users', 'Countries', 'States', 'Vendors', 'Devices', 'Roles', 'Roles Entity', 'Organization',\n        'CategoriesType', 'Config', 'DeviceLog', 'JobLog', 'JobMaster', 'OrgDevices', 'Reports', 'RoleDetails', 'UserRolesMapping', 'Settings'\n    ]\n}","import { userConstants } from '../constants'\nimport { initialDefaultState } from './initialDefaultState'\n\nconst initialState = {\n    currentUser: initialDefaultState.currentUser,\n    currentUserSettings: initialDefaultState.currentUserSetings,\n    tabSettings: initialDefaultState.tabSettings,\n    tabNames: initialDefaultState.tabNames,\n    userList: initialDefaultState.userList,\n    teamList: initialDefaultState.teamList,\n    gameList: initialDefaultState.gameList,\n\n}\nconst userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case userConstants.USERLOGIN_REQUEST:\n            return state;\n        case userConstants.USERLOGIN_SUCCESS:\n            return state\n        case userConstants.USERLOGIN_FAILURE:\n            return state;\n        case userConstants.STORE_CURRENT_USER:\n            return {\n                ...state,\n                currentUser: action.currentUser\n            }\n        case userConstants.STORE_CURRENT_USER_SETTINGS:\n            return {\n                ...state,\n                currentUserSettings: action.currentUserSettings\n            }\n\n        case userConstants.UPDATE_TAB_DATA:\n            return {\n                ...state,\n                tabSettings: action.tabSettings\n            }\n\n\n        case userConstants.GET_CURRENT_USER_FROM_STORE:\n            return {\n                ...state,\n                currentUser: state.currentUser\n            }\n        default:\n            return state;\n    }\n}\nexport default userReducer;\n","import { gameConstants } from '../constants'\nimport { initialDefaultState } from './initialDefaultState'\n\nconst initialState = {\n    gameData: initialDefaultState.gameData,\n    gameList: initialDefaultState.gameList,\n    gamePlayers: initialDefaultState.Players,\n    isMeJoined: false,\n    gameMoves: initialDefaultState.Moves,\n    gameChats: initialDefaultState.Chats,\n    numberOfPlayers: initialDefaultState.numberOfPlayers,\n    playerNames: initialDefaultState.playerNames,\n    gameSecret: initialDefaultState.gameSecret,\n    isPlayerLoggedIn: initialDefaultState.isPlayerLoggedIn,\n\n    currentUserPlayerID: null,\n    currentUserCredentials: null,\n    currentGameID: null,\n    currentGameName: 'NCM',\n    currentGameSetupData: {},\n    currentMainTab: '',\n    defaultRoleCards: initialDefaultState.DefaultRoleCards,\n    defaultRoleNames: initialDefaultState.DefaultRoleNames,\n    notificationsFromStore: []\n}\n\nfunction isMeJoined(players) {\n    var result = false;\n    for (let i = 0; i < players.length; i++) {\n        if (players[i].isJoined === true) {\n            result = true;\n            break;\n        }\n    }\n    return result\n}\n\nconst gameReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case gameConstants.PLAYER_LOGIN:\n            return {\n                ...state,\n                isPlayerLoggedIn: action.isLogin\n            }\n\n        case gameConstants.STORE_CURRENT_GAME_DETAILS:\n            return {\n                ...state,\n                currentGameID: action.gameData.currentGameID,\n                currentGameSetupData: action.gameData.currentGameSetupData\n            }\n\n        case gameConstants.STORE_CURRENT_PLAYER_CREDENTIALS:\n            return {\n                ...state,\n                currentUserPlayerID: action.credentials ? action.credentials.currentUserPlayerID : null,\n                currentUserCredentials: action.credentials ? action.credentials.currentUserCredentials : null\n            }\n\n        case gameConstants.CREATE_NEW_GAME:\n            let OldArr = state.gameList\n            OldArr.push(action.gameData)\n            return {\n                ...state,\n                gameList: OldArr\n            }\n\n        case gameConstants.UPDATE_CURRENT_PLAYER_ID:\n            let Plrs = state.gamePlayers\n            if (isMeJoined(Plrs)) {\n                Plrs[action.playerID].isJoined = false\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: Plrs,\n                    isMeJoined: isMeJoined(Plrs)\n                }\n            } else {\n                Plrs[action.playerID].isJoined = true\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: Plrs,\n                    isMeJoined: isMeJoined(Plrs)\n                }\n            }\n\n        case gameConstants.REMOVE_CURRENT_PLAYER_ID:\n            let plDT = state.gamePlayers\n            if (isMeJoined(plDT)) {\n                return state\n            } else {\n                plDT[action.playerID].isJoined = false\n                return {\n                    ...state,\n                    currentUserPlayerID: action.playerID,\n                    gamePlayers: plDT,\n                    isMeJoined: isMeJoined(plDT)\n                }\n            }\n\n        case gameConstants.SET_GAME_PLAYER:\n            return {\n                ...state,\n                gamePlayers: action.playerData,\n            }\n\n        case gameConstants.SET_TAB_TO_STORE:\n            return {\n                ...state,\n                currentMainTab: action.tabData.tabName,\n            }\n\n        case gameConstants.SET_NOTIFICATION_TO_STORE:\n            return {\n                ...state,\n                notificationsFromStore: action.notificationData,\n            }\n\n        default:\n            return state;\n    }\n}\nexport default gameReducer","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport userReducer from '../store/reducers/user.reducer'\nimport gameReducer from '../store/reducers/game.reducer'\n\nconst rootReducer = combineReducers({\n    userReducer,\n    gameReducer\n})\nconst configureStore = () => {\n    return createStore(rootReducer, applyMiddleware(thunk));\n}\nexport default configureStore;","import React from 'react';\nimport { Provider } from \"react-redux\";\n\n//Styling\nimport '../App.css';\nimport '../assets/css/bootstrap.min.css'\nimport '../assets/css/style.css'\n\nimport Login from '../adminPanel/Login'\nimport AdminContainer from './AdminContainer'\n\nimport configureStore from '../../src/store/configureStore'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'\n\nconst store = configureStore()\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                {/* <Rote exact pattern='/game' path=\"/game\" component={GameContainer} /> */}\n                <Route\n                    exact\n                    path=\"/\"\n                    render={() => {\n                        return (\n\n                            <Redirect to=\"/login\" />\n                        )\n                    }}\n                />\n                {/* <Route exact pattern='/' path=\"/login\" component={Login} /> */}\n                <Route exact pattern='/login' path=\"/login\" component={Login} />\n                <Route exact pattern='/admin' path=\"/admin\" component={AdminContainer} />\n            </Router>\n        </Provider>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/index';\nimport * as serviceWorker from './serviceWorker';\nimport { registerServiceWorker } from './serviceWorker'\n\n// registerServiceWorker()\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// serviceWorker.unregister();"],"sourceRoot":""}